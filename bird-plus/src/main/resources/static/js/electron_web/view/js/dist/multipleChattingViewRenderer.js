/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./browser/controller/AccountController.js":
/*!*************************************************!*\
  !*** ./browser/controller/AccountController.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   accountController: () => (/* binding */ accountController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class AccountController {
	constructor() {

	}

	loginProcessing(param){
		param = Object.entries(param).reduce((total, [k,v]) => {
			if(v != undefined && v != ''){
				total[k] = v;
			}
			return total;
		},{});
		return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi + '/login-processing', JSON.stringify(param), {
			headers:{
				'Content-Type': 'application/json'
			}
		})
		.then(response=>{
			if(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseIsOk(response) && top.constructor.name == 'Window'){
				return response.data;
			}
			return response;	
		}).catch(err=>{
			log.error('loginProcessing error : ', err.message);
			axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'] = '';
			console.log(err);
			if(err.response){
				return err.response.data;
			}else{
				return err.message
			}
			
		})
	}
	getAccountInfo(){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/account/search/get-account-info`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response=>response.data)
				.catch(err=>{
					log.error('IPC getAccountInfo error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		});
	}
	updateSimpleAccountInfo(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/account/update/simple-account-info`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createPermitWokrspaceInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
}
const accountController = new AccountController();

/***/ }),

/***/ "./browser/controller/ApiS3Controller.js":
/*!***********************************************!*\
  !*** ./browser/controller/ApiS3Controller.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   apiS3Controller: () => (/* binding */ apiS3Controller)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class ApiS3Controller {
	constructor() {
	}
	generatePutObjectPresignedUrl(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			param = Object.entries(param).reduce((total, [k,v]) => {
				if(v != undefined && v != ''){
					total[k] = v;
				}
				return total;
			},{});
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/generate-presigned-url/create/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data;
				}).catch(err=>{
					log.error('IPC sendChatting error', err);
					return err.response.data;
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('sendChatting login error ::: ', error.message);
			log.error('sendChatting login error stack ::: ', error.stack);
			return undefined;
		});
	}
	generateGetObjectPresignedUrl(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			param = Object.entries(param).reduce((total, [k,v]) => {
				if(v != undefined && v != ''){
					total[k] = v;
				}
				return total;
			},{});
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/generate-presigned-url/search/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data;
				}).catch(err=>{
					log.error('IPC sendChatting error', err);
					return err.response.data;
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('sendChatting login error ::: ', error.message);
			log.error('sendChatting login error stack ::: ', error.stack);
			return undefined;
		});
	}
}
const apiS3Controller = new ApiS3Controller();

/***/ }),

/***/ "./browser/controller/ChattingController.js":
/*!**************************************************!*\
  !*** ./browser/controller/ChattingController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chattingController: () => (/* binding */ chattingController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class ChattingController {
	constructor() {

	}

	sendChatting(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/chatting/create/send-chatting`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data;
				}).catch(err=>{
					log.error('IPC sendChatting error', err);
					return err.response.data;
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('sendChatting login error ::: ', error.message);
			log.error('sendChatting login error stack ::: ', error.stack);
			return undefined;
		});
	}	
	deleteChatting(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/chatting/delete/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data;
				}).catch(err=>{
					log.error('IPC sendChatting error', err);
					return err.response.data;
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('sendChatting login error ::: ', error.message);
			log.error('sendChatting login error stack ::: ', error.stack);
			return undefined;
		});
	}
	searchChattingList(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let {workspaceId, roomId} = param;
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId' && k != 'roomId')
					.map(([k,v]) => `${k}=${v}`).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/chatting/search/chatting-list/${workspaceId}/${roomId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data;
				}).catch(err=>{
					log.error('IPC searchChatting error' , err);
					return err.response.data;
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('searchChatting login error ::: ', error.message);
			log.error('searchChatting login error stack ::: ', error.stack);
			return undefined;
		})
	}
}
const chattingController = new ChattingController();

/***/ }),

/***/ "./browser/controller/EmoticonController.js":
/*!**************************************************!*\
  !*** ./browser/controller/EmoticonController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   emoticonController: () => (/* binding */ emoticonController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class EmoticonController {
	constructor() {
    }

	createEmotionReaction(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/emoticon/create/reaction`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createEmotion error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
    deleteEmotion(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/emoticon/delete/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC deleteEmotion error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	getIsReaction(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let {workspaceId} = param;
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId')
					.map(([k,v]) => {
						if(v instanceof Array){
							v = v.map(val=>`${k}=${val}`).join('&')
							return v;
						}
						return `${k}=${v}`
					}).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/emoticon/search/is-reaction?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC searchMyJoinedRoomList error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	
}
const emoticonController = new EmoticonController();

/***/ }),

/***/ "./browser/controller/EventStreamController.js":
/*!*****************************************************!*\
  !*** ./browser/controller/EventStreamController.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eventStreamController: () => (/* binding */ eventStreamController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class EventStreamController {
    #source;
    #isConnectSource = false;
	prevWorkspaceId;
    constructor(){

    }

	initWorkspaceStream(param, EventSource, eventSendObj){
        let {workspaceId} = param;
        console.log(top.EventSource);
        if( ! EventSource) EventSource = top?.EventSource;
		if(this.prevWorkspaceId == workspaceId && (this.source?.readyState == 1 || this.source?.readyState == 0)){
            return;
        }else if(this.prevWorkspaceId != workspaceId && (this.source?.readyState == 1 || this.source?.readyState == 0)){
            this.source.close();
        }
        
        this.prevWorkspaceId = workspaceId;

        this.source = new EventSource(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/event-stream/workspace/${workspaceId}`, {
            headers: {
                'Authorization' : axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'],
            },
            withCredentials : ! top.__isLocal
        });

        this.source.onmessage = (event) => {
            let {data, lastEventId, origin, type} = event;
            data = JSON.parse(data);
            log.debug('event stream data ::: ', data);

            let eventName = data.serverSentStreamType.split('_').map((e, i)=>{
                if(i == 0){
                    return e.toLowerCase(); 
                }
                return e.charAt(0) + e.substring(1).toLowerCase();
            }).join('');

            log.debug('on message: ', event.data, 'eventName ::', eventName);

            if(this[eventName]){
                this[eventName](eventName, data);
                return ;
            }
            if(eventSendObj.webEventSend){
                eventSendObj.webEventSend(eventName, data);
            }else{
                eventSendObj.send(eventName, data);
            }
        };

        this.source.onerror = (error) => {
            log.error('on stream err: ', error);
            //log.debug('source ::: ', this.source);
            /*this.#isConnectSource = false;
            windowUtil.isLogin( result => {
                if( ! result.isLogin){
                    axios.defaults.headers.common['Authorization'] = '';
                    this.source.close();
                    this.#send('needLoginRequest', result);
                }
            })*/
            //연결 실패되면 계속 시도하기에 임시 조치로 close
            //this.source.close();
            //stop();
        };
        this.source.onopen = (success) => {
            log.debug('on success: ', success)
        }
        /*
        * This will listen only for events
        * similar to the following:
        *
        * event: notice
        * data: useful data
        * id: someid
        this.source.addEventListener("notice", (e) => {
            log.debug('event notice', e.data);
        });
        */

        /*
        * Similarly, this will listen for events
        * with the field `event: update`
        this.source.addEventListener("update", (e) => {
            log.debug('event update ::: ',e.data);
        });
        */

        /*
        * The event "message" is a special case, as it
        * will capture events without an event field
        * as well as events that have the specific type
        * `event: message` It will not trigger on any
        * other event type.
        this.source.addEventListener("message", (e) => {
            log.debug('message !!!!! : ', e.data);
        });
        */
        //}
	}

}
const eventStreamController = new EventStreamController();

/***/ }),

/***/ "./browser/controller/NoticeBoardController.js":
/*!*****************************************************!*\
  !*** ./browser/controller/NoticeBoardController.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   noticeBoardController: () => (/* binding */ noticeBoardController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;
class NoticeBoardController {
	constructor() {

    }

    createNoticeBoardGroup(param = {}){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/create/group`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC createNoticeBoardGroup error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }

    createNoticeBoard(param = {}){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/create/`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC createNoticeBoard error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }

    createNoticeBoardDetail(param = {}){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/create/detail`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC createNoticeBoardDetail error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }
    searchNoticeBoardList(param = {}, EventSource, eventSendObj){
        if( ! EventSource) EventSource = top?.EventSource;
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                let {workspaceId, roomId} = param;
                let queryString = Object.entries(param)
                    .filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId' && k != 'roomId')
                    .map(([k,v]) => `${k}=${v}`).join('&')
                    //console.log('queryString ::: ', queryString);
                //return axios.get(`${__serverApi}/api/notice-board/search/notice-board-list/${workspaceId}/${roomId}?${queryString}`, {
                return new Promise(resolve=>{
                    let source = new EventSource(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/search/notice-board-list/${workspaceId}/${roomId}?${queryString}`, {
                        headers: {
                            'Authorization' : axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'],
                        },
                        withCredentials : ! top.__isLocal
                    });
                    source.onmessage = (event) => {
                        //console.log('test message :::: ',event);
                        let {data, lastEventId, origin, type} = event;
                        data = JSON.parse(data);
                        if(eventSendObj.webEventSend){
							eventSendObj.webEventSend('noticeBoardAccept', data);
						}else{
							eventSendObj.send('noticeBoardAccept', data);
						}
                    }
                    source.onerror = (event) => {
                        //console.log('searchNoticeBoardList error :::: ',event);
                        source.close();
                        resolve('done');
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
            log.error('error ::: ', error.message)
            log.error('error stack :::', error.stack)
            return undefined;
        });
    }

    searchNoticeBoardDetailList(param = {}, EventSource, eventSendObj){
        if( ! EventSource) EventSource = top?.EventSource;
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                let {workspaceId, roomId, noticeBoardId} = param;
                if(! noticeBoardId){
                    return;
                }
                let queryString = Object.entries(param)
                    .filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId' && k != 'roomId' && k != 'noticeBoardId')
                    .map(([k,v]) => `${k}=${v}`).join('&')
                    //console.log('queryString ::: ', queryString);
                //return axios.get(`${__serverApi}/api/notice-board/search/notice-board-detail-list/${workspaceId}/${roomId}/${noticeBoardId}?${queryString}`, {
                return new Promise(resolve=>{
                    let source = new EventSource(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/search/notice-board-detail-list/${workspaceId}/${roomId}/${noticeBoardId}?${queryString}`, {
                        headers: {
                            'Authorization' : axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'],
                        },
                        withCredentials : ! top.__isLocal
                    });
                    source.onmessage = (event) => {
                        //console.log('test message :::: ',event);
                        let {data, lastEventId, origin, type} = event;
                        data = JSON.parse(data);
                        if(eventSendObj.webEventSend){
							eventSendObj.webEventSend('noticeBoardDetailAccept', data);
						}else{
							eventSendObj.send('noticeBoardDetailAccept', data);
						}
                    }
                    source.onerror = (event) => {
                        console.log('searchNoticeBoardDetailList error :::: ',event);
                        source.close();
                        resolve('done');
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
            log.error('error ::: ', error.message)
            log.error('error stack :::', error.stack)
            return undefined;
        });
    }

    deleteNoticeBoard(param = {}){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});
                console.log('delete param',param)
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/delete/`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC deleteNoticeBoard error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }
    deleteNoticeBoardGroup(param = {}){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                param = Object.entries(param).reduce((total, [k,v]) => {
                    if(v != undefined && v != ''){
                        total[k] = v;
                    }
                    return total;
                },{});

                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/delete/group`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC deleteNoticeBoardGroup error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }
    updateNoticeBoardOrder(param = []){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                console.log('update param',param)
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/update/order`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC updateNoticeBoardOrder error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }
    updateNoticeBoardDetailOrder(param = []){
        return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
            if(result.isLogin){
                return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/notice-board/update/detail-order`, JSON.stringify(param), {
                    headers:{
                        'Content-Type': 'application/json'
                    }
                })
                .then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
                .then(response => response.data)
                .catch(err=>{
                    log.error('IPC updateNoticeBoardDetailOrder error : ', JSON.stringify(err));
                    //axios.defaults.headers.common['Authorization'] = '';
                    if(err.response){
                        return err.response.data;
                    }else{
                        return err.message
                    }
                })
            }else{
                return {'isLogin': false};
            }
        }).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
    }
}
const noticeBoardController = new NoticeBoardController();


/***/ }),

/***/ "./browser/controller/RoomController.js":
/*!**********************************************!*\
  !*** ./browser/controller/RoomController.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   roomController: () => (/* binding */ roomController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;
class RoomController {
	constructor() {
    }

	createRoom(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/create/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createRoom error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	createMySelfRoom(param = {}){
		if( ! param.workspaceId || isNaN(parseInt(param.workspaceId))){
			log.error(`createMySelfRoom workspaceId is ::: ${param.workspaceId}`);
			return undefined;
		}
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/create/my-self-room/${param.workspaceId}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createMySelfRoom error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	createRoomInAccount(param = []){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/create/in-account`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.then(data => {
					log.debug('createRoomInAccount ::: ',data)
					return data;
				})
				.catch(err=>{
					log.error('IPC createRoomInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	updateRoomInAccoutOrder(param = []){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/update/order`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC updateRoomInAccoutOrder error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	createRoomFavorites(param){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/create/favorites`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createRoomFavorites error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	updateRoomFavorites(param = []){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/update/favorites-order`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createRoom error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchRoomList(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let {roomId} = param;
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'roomId')
					.map(([k,v]) => `${k}=${v}`).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/list/${roomId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC searchRoom error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchMyJoinedRoomList(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let {workspaceId} = param;
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId')
					.map(([k,v]) => {
						if(v instanceof Array){
							v = v.map(val=>`${k}=${val}`).join('&')
							return v;
						}
						return `${k}=${v}`
					}).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/my-joined-list/${workspaceId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC searchMyJoinedRoomList error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchRoomFavoritesList(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let {workspaceId} = param;
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId')
					.map(([k,v]) => {
						if(v instanceof Array){
							v = v.map(val=>`${k}=${val}`).join('&')
							return v;
						}
						return `${k}=${v}`
					}).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/favorites-list/${workspaceId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC searchMyJoinedRoomList error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchRoomJoinedAccountList(param = {}, EventSource, eventSendObj){

		if( ! param.roomId || isNaN(parseInt(param.roomId))){
			log.error(`searchRoomJoinedAccountList roomId is ::: ${param.roomId}`);
			return undefined;
		}
		if( ! EventSource) EventSource = top?.EventSource;
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return new Promise(resolve=>{
					let source = new EventSource(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/in-account-list/${param.roomId}`, {
						headers: {
							'Authorization' : axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'],
						},
						withCredentials : ! top.__isLocal
					});
					source.onmessage = (event) => {
						//console.log('test message :::: ',event);
						let {data, lastEventId, origin, type} = event;
						data = JSON.parse(data);
						if(eventSendObj.webEventSend){
							eventSendObj.webEventSend('roomInAccountAccept', data);
						}else{
							eventSendObj.send('roomInAccountAccept', data);
						}
					}
					source.onerror = (event) => {
						//console.log('searchRoomJoinedAccountList error :::: ',event);
						source.close();
						resolve('done');
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	
	getRoomDetail(param = {}){
		if( ! param.roomId || isNaN(parseInt(param.roomId))){
			log.error(`getRoomDetail roomId is ::: ${param.roomId}`);
			return undefined;
		}
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/detail/${param.roomId}`, {
					headers: {
						'Content-Type' : 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
			}else{
				return {'isLogin': false};
			}
		});
	}
	isRoomFavorites(param = {}){
		if( ! param.roomId || isNaN(parseInt(param.roomId))){
			log.error(`isRoomFavorites roomId is ::: ${param.roomId}`);
			return undefined;
		}
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/room/search/is-room-favorites/${param.roomId}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC isRoomFavorites error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
}
const roomController = new RoomController();

/***/ }),

/***/ "./browser/controller/WorkspaceController.js":
/*!***************************************************!*\
  !*** ./browser/controller/WorkspaceController.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   workspaceController: () => (/* binding */ workspaceController)
/* harmony export */ });
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window/WindowUtil */ "./browser/window/WindowUtil.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
 

const log = console;

class WorkspaceController {
	constructor() {
	}
	searchWorkspaceMyJoined(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin((result) => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/my-joined-list?page=${param.page}&size=${param.size}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response=>{
					return response.data;
				}).catch(err=>{
					log.error('error : ', JSON.stringify(err));
					if(err.response){
						if( ! err.response.data.content){
							err.response.data.content = [];
						}
						return err.response.data;
					}else{

					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchNameSpecificList(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin((result) => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/name-specific-list?page=${param.page}&size=${param.size}&workspaceName=${param.workspaceName}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response=>{
					return response.data;
				}).catch(err=>{
					log.error('error : ', JSON.stringify(err));
					if(err.response){
						if( ! err.response.data.content){
							err.response.data.content = [];
						}
						return err.response.data;
					}else{

					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchWorkspaceInAccount(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId')
					.map(([k,v]) => `${k}=${v}`).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/joined-account-list/${param.workspaceId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data
				}).catch(err=>{
					log.error('IPC searchWorkspaceInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	getWorkspaceDetail(param = {}){
		if( ! param.workspaceId || isNaN(parseInt(param.workspaceId))){
			log.error(`workspaceId is ::: ${param.workspaceId}`);
			return undefined;
		}
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/detail/${param.workspaceId}`, {
					headers: {
						'Content-Type' : 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data.data;
				})
			}else{
				return {'isLogin': false};
			}
		});
	}
	getWorkspaceInAccountCount(param = {}){
		if( ! param.workspaceId || isNaN(parseInt(param.workspaceId))){
			log.error(`workspaceId is ::: ${param.workspaceId}`);
			return undefined;
		}
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/count/${param.workspaceId}`, {
					headers: {
						'Content-Type' : 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data.data;
				})
			}else{
				return {'isLogin': false};
			}
		});
	}
	createPermitWokrspaceInAccount(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/create/permit`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createPermitWokrspaceInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	createGiveAdmin(param={}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/create/give-admin`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createPermitWokrspaceInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	searchPermitRequestList(param = {}, EventSource, eventSendObj){
		if( ! param.workspaceId || isNaN(parseInt(param.workspaceId))){
			log.error(`searchPermitRequestList workspaceId is ::: ${param.workspaceId}`);
			return undefined;
		}
		if( ! EventSource) EventSource = top?.EventSource;
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				//return axios.get(`${__serverApi}/api/workspace/search/permit-request-list/${param.workspaceId}`, {
				return new Promise(resolve=>{
					let source = new EventSource(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/permit-request-list/${param.workspaceId}`, {
						headers: {
							'Authorization' : axios__WEBPACK_IMPORTED_MODULE_1__["default"].defaults.headers.common['Authorization'],
						},
						withCredentials : ! top.__isLocal
					});
					source.onmessage = (event) => {
						//console.log('test message :::: ',event);
						let {data, lastEventId, origin, type} = event;
						data = JSON.parse(data);
						if(eventSendObj.webEventSend){
							eventSendObj.webEventSend('workspacePermitRequestAccept', data);
						}else{
							eventSendObj.send('workspacePermitRequestAccept', data);
						}
					}
					source.onerror = (event) => {
						//console.log('searchPermitRequestList error :::: ',event);
						source.close();
						resolve('done');
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	getIsAdmin(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				let queryString = Object.entries(param)
					.filter(([k,v]) => v != undefined && v != '' && k != 'workspaceId')
					.map(([k,v]) => `${k}=${v}`).join('&')
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].get(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/search/is-admin/${param.workspaceId}?${queryString}`, {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data
				}).catch(err=>{
					log.error('IPC getIsAdmin error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
	createWorkspaceJoined(param = {}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/create/joined`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => {
					return response.data
				})
				.catch(err=>{
					log.error('IPC createPermitWokrspaceInAccount error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';

					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}

	createWorkspace(param={}){
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.isLogin( result => {
			if(result.isLogin){
				param = Object.entries(param).reduce((total, [k,v]) => {
					if(v != undefined && v != ''){
						total[k] = v;
					}
					return total;
				},{});
				return axios__WEBPACK_IMPORTED_MODULE_1__["default"].post(`${_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.__serverApi}/api/workspace/create/`, JSON.stringify(param), {
					headers:{
						'Content-Type': 'application/json'
					}
				})
				.then(_window_WindowUtil__WEBPACK_IMPORTED_MODULE_0__.windowUtil.responseCheck)
				.then(response => response.data)
				.catch(err=>{
					log.error('IPC createWorkspace error : ', JSON.stringify(err));
					//axios.defaults.headers.common['Authorization'] = '';
					if(err.response){
						return err.response.data;
					}else{
						return err.message
					}
				})
			}else{
				return {'isLogin': false};
			}
		}).catch(error=>{
			log.error('error ::: ', error.message)
			log.error('error stack :::', error.stack)
			return undefined;
		})
	}
}
const workspaceController = new WorkspaceController();

/***/ }),

/***/ "./browser/preload/preload.js":
/*!************************************!*\
  !*** ./browser/preload/preload.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   globalHandler: () => (/* binding */ globalHandler),
/* harmony export */   ipcRenderer: () => (/* binding */ ipcRenderer),
/* harmony export */   myAPI: () => (/* binding */ myAPI)
/* harmony export */ });
/* harmony import */ var _controller_AccountController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../controller/AccountController */ "./browser/controller/AccountController.js");
/* harmony import */ var _controller_ApiS3Controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../controller/ApiS3Controller */ "./browser/controller/ApiS3Controller.js");
/* harmony import */ var _controller_ChattingController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../controller/ChattingController */ "./browser/controller/ChattingController.js");
/* harmony import */ var _controller_EmoticonController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../controller/EmoticonController */ "./browser/controller/EmoticonController.js");
/* harmony import */ var _controller_EventStreamController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../controller/EventStreamController */ "./browser/controller/EventStreamController.js");
/* harmony import */ var _controller_NoticeBoardController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../controller/NoticeBoardController */ "./browser/controller/NoticeBoardController.js");
/* harmony import */ var _controller_RoomController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../controller/RoomController */ "./browser/controller/RoomController.js");
/* harmony import */ var _controller_WorkspaceController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../controller/WorkspaceController */ "./browser/controller/WorkspaceController.js");
/* harmony import */ var _window_WindowUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../window/WindowUtil */ "./browser/window/WindowUtil.js");











/**
 * @author kimjoohyoung
 * @description 기본적으로 사용 할 preload 정의
 */

let permission;

window.addEventListener('load', () => {
	Notification.requestPermission().then(result => {
		console.log(result);
		permission = result;
	})
	if(globalHandler.loadInitRoomId){
		ipcRenderer.webEventSend('roomChange', {roomId:globalHandler.loadInitRoomId});
	}
	if(globalHandler.loadInitNoticeBoardId){
		ipcRenderer.webEventSend('noticeBoardChange', {noticeBoardId:globalHandler.loadInitNoticeBoardId});
	}
})

const globalHandler = new class GlobalHandler{
	#workspaceId;
	loadInitRoomId;
	loadInitNoticeBoardId;
	#option = {};
	constructor(){
		//n : name, v : value, c : create_at, u : update_at
		let queryString = new URLSearchParams(location.search);
		this.#workspaceId = queryString.get('workspaceId');
		this.loadInitRoomId = queryString.get('roomId');
		this.loadInitNoticeBoardId = queryString.get('noticeBoardId');
		this.#option = JSON.parse(localStorage.getItem('o'))?.reduce((t,e)=>{
			t[e.OPTION_NAME] = e;
			return t;
		}, {}) || {};

	}

	resetWorkspace(){
		this.#workspaceId = undefined;
	}

	set workspaceId(workspaceId){
		if(this.#workspaceId === workspaceId) return;
		this.#workspaceId = workspaceId;
		ipcRenderer.webEventSend('workspaceChange', {workspaceId : this.workspaceId});
	}
	get workspaceId(){
		return this.#workspaceId
	}

	setOption({name, value}){
		if( ! this.#option[name]) {
			this.#option[name] = {
				OPTION_NAME : name,
				OPTION_VALUE : value,
				CREATE_AT : new Date().getTime(),
				UPDATE_AT : new Date().getTime(),
			};
		}else{
			this.#option[name].OPTION_VALUE = value,
			this.#option[name].UPDATE_AT = new Date().getTime();
		}
		localStorage.setItem('o', JSON.stringify( Object.values(this.#option)) );
	}

	getOption(name){
		//console.log(this.#option, name);
		return this.#option[name];
	}
}

const ipcRenderer = new class IpcRendererWeb{
	#send = {};
	#invoke = {};
	#connection = {};
	constructor(){

		[
			_controller_AccountController__WEBPACK_IMPORTED_MODULE_0__.accountController, _controller_ApiS3Controller__WEBPACK_IMPORTED_MODULE_1__.apiS3Controller, 
			_controller_ChattingController__WEBPACK_IMPORTED_MODULE_2__.chattingController, _controller_EmoticonController__WEBPACK_IMPORTED_MODULE_3__.emoticonController, 
			_controller_EventStreamController__WEBPACK_IMPORTED_MODULE_4__.eventStreamController, _controller_NoticeBoardController__WEBPACK_IMPORTED_MODULE_5__.noticeBoardController,
			_controller_RoomController__WEBPACK_IMPORTED_MODULE_6__.roomController, _controller_WorkspaceController__WEBPACK_IMPORTED_MODULE_7__.workspaceController
		].flatMap(e=>{
			return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).filter(e=> e != 'constructor').map(name=>{
				return [name, e]
			});
		}).forEach( ([name, clazz])=>{
			this.#send[name] = clazz[name] 
			this.#invoke[name] = clazz[name] 
		})
	}
	send(name, param){
		if( ! this.#send[name] || ! this.#send[name] instanceof Function){
			return;
		}
		this.#send[name](param, undefined, ipcRenderer);
	}
	invoke(name, param){
		if( ! this.#invoke[name] || ! this.#invoke[name] instanceof Function){
			return;
		}
		return this.#invoke[name](param, undefined, ipcRenderer);
	}
	webEventSend(eventName, data){
		if( ! this.#connection[eventName] || ! this.#connection[eventName] instanceof Function){
			return;
		}
		this.#connection[eventName](undefined, data);
	}
	on(eventName, callback){
		this.#connection[eventName] = callback;
	}
	/*
	send : {},
	invoke : {},
	connection : {},
	eventSend: (eventName, data) => {
		if( ! ipcRenderer.connection[eventName] instanceof Function){
			return;
		}
		ipcRenderer.connection[eventName](undefined, data);
	},
	on : (eventName, callback) => {
		connection[eventName] = callback;
	}*/
};

const electronEventTrigger = {
	objectEventListener : {},
	onEvent : {},
	on : (eventName, callBack) => {
		electronEventTrigger.onEvent[eventName] = callBack;
		ipcRenderer.on(eventName, (event, message) => {
			electronEventTrigger.trigger(eventName, event, message);
		})
	},
	addElectronEventListener : (eventName, callBack) => {
		if(electronEventTrigger.objectEventListener.hasOwnProperty(eventName)){
			electronEventTrigger.objectEventListener[eventName].push({ [callBack.name] : callBack });
		}else{
			electronEventTrigger.objectEventListener[eventName] = [{ [callBack.name] : callBack }];
		}
		ipcRenderer.on(eventName, (event, message) => {
			electronEventTrigger.trigger(eventName, event, message);
		})
	},
	removeElectronEventListener : (eventName, callBack) => {
		if(electronEventTrigger.objectEventListener.hasOwnProperty(eventName)){
			if(callBack){
				electronEventTrigger.objectEventListener[eventName] = electronEventTrigger.objectEventListener[eventName].filter(e=> ! e.hasOwnProperty(callBack.name))
			}else{
				delete electronEventTrigger.objectEventListener[eventName]
			}
		}
	},
	trigger : (eventName, event, message) => {
		new Promise(resolve=> {
			if( ! electronEventTrigger.objectEventListener.hasOwnProperty(eventName)){
				resolve();
				return;
			}
			electronEventTrigger.objectEventListener[eventName].forEach(async obj => {
				Object.values(obj).forEach(async callBack => {
					if( ! callBack || ! callBack instanceof Function){
						return;
					}
					new Promise(res=>{	
						try{
							if(eventName == 'checkForUpdates' || eventName == 'updateAvailable' || eventName == 'updateDownloaded'){
								callBack(event,message);
								return;
							}
			
							callBack(message);
						}catch(err){
							console.error(`${eventName} error message ::: `,err.message);
							console.error(`${eventName} error stack ::: `,err.stack);
							throw new Error('');
						}
						res();
					})
				})
			})
			resolve();
		})
		
		new Promise(resolve => {
			if( ! electronEventTrigger.onEvent[eventName] || ! electronEventTrigger.onEvent[eventName] instanceof Function){
				resolve();
				return;
			}
			try{
				electronEventTrigger.onEvent[eventName](message);
			}catch(err){
				console.error(`${eventName} error message ::: `, err.message);
				console.error(`${eventName} error stack ::: `, err.stack);
			}
			resolve();
		})
		
	}
};

const myAPI = {
	/**
	 * 단방향 ipc 통신
	 * 보안상의 이유로ipcRenderer.send 전체 API를 직접 노출하지 않습니다. 
	 * Electron API에 대한 렌더러의 액세스를 가능한 한 많이 제한해야 합니다.
	 */
	//setTitle : (param) => ipcRenderer.send('setTitle', param),
	/**
	 * dialog:IPC 채널 이름 의 접두사는 코드에 영향을 미치지 않습니다. 
	 * 코드 가독성에 도움이 되는 네임스페이스 역할만 합니다.
	 * 보안상의 이유로ipcRenderer.invoke 전체 API를 직접 노출하지 않습니다. 
	 * Electron API에 대한 렌더러의 액세스를 가능한 한 많이 제한해야 합니다. 
	 */
	//openFile : () => ipcRenderer.invoke('dialog:openFile'),
	
	/**
	 * key-value가 아닌 함수는 일렉트론에서만쓰고 웹버전에서는 쓰지 않도록 합니다.
	 * event.electronEventTrigger은 일렉트론 + 웹이 함께써야 하는 부분이 있어 예외입니다.
	 */

	getProjectPath : async () => `${location.origin}/`,

	createSubWindow : async (param) => {
		//open(url?: string | URL, target?: string, features?: string): WindowProxy | null;
		let queryString = Object.entries(param)
			.filter(([k,v]) => v != undefined && v != '' && k != 'pageName' && k != 'pageId')
			.map(([k,v]) => `${k}=${v}`).join('&')
		window.open(`/mobile/create-sub-window/${param.pageName}?${queryString}`, param.pageId)
	},

	closeRequest : async (param) => {},
	
	maximizeRequest : async () => {},

	unmaximizeRequest : async () => {},
	
	minimizeRequest : async () => {},
	
	restoreRequest : async () => {},
	
	isMaximize : async () => false,

	resetWorkspaceId: async () => {
		globalHandler.resetWorkspace();
	},

	getWorkspaceId: async () => {
		return globalHandler.workspaceId;
	},

	notifications: async (param) => {
		let content = param.content.join('\n');
		content = content.substring(0,200) + (content.length > 200 ? '...' : '');
		if(permission == 'granted'){
			myAPI.getProjectPath().then(path=>{
				let noti = new Notification(param.fullName, { body: content, icon: path+'image/icon.icon' });
				noti.onclick = () => {
					if(globalHandler.workspaceId != param.workspaceId){
						ipcRenderer.webEventSend('workspaceChange', {workspaceId : param.workspaceId});
					}
					ipcRenderer.webEventSend('roomChange', {roomId : param.roomId});
				}
				setTimeout(() => {
					noti.close()
				}, 4000);
			})
		}else{
			let html = Object.assign(document.createElement('div'), {
				innerHTML : `
					<h1>${param.fullName}</h1>
					<div>${param.content}</div>
				`
			})
			Object.assign(html.style, {
				position: 'fixed', right: '2vw', bottom: '2vh', borderRadius : '15px',
				background: '#e1e1e1cf', width: '40%', height: 'auto',
				zIndex: 9999, whiteSpace: 'break-spaces', overflowWrap: 'anywhere', 
				display: 'flex', flexDirection: 'column', alignItems: 'center',
				justifyContent: 'flex-start', fontSize: '13px', paddingBottom: '5vh'
			})
			html.onclick = () => {
				if(globalHandler.workspaceId != param.workspaceId){
					ipcRenderer.webEventSend('workspaceChange', {workspaceId : param.workspaceId});
				}
				ipcRenderer.webEventSend('roomChange', {roomId : param.roomId});
			}
			document.body.append(html);
			setTimeout(() => {
				html.remove();
			}, 4000);
		}
	},

	getOption: async (optionName) => globalHandler.getOption(optionName),
	setOption: async (param) => globalHandler.setOption(param),

	isLogin: async () => {
		return _window_WindowUtil__WEBPACK_IMPORTED_MODULE_8__.windowUtil.isLogin(result=>{
			return {isLogin : result.isLogin}
		})
	},

	getServerUrl : async () => `${location.origin}/login-page`,

	pageChange : {
		changeLoginPage : async () => top.location.href = '/mobile',
		changeWokrspacePage : async () => top.location.href = '/mobile',
		changeMainPage : async (param) => top.location.href = `/mobile/main?workspaceId=${param.workspaceId}`,
	},
	
	event : {
		electronEventTrigger : electronEventTrigger,
	},

	stream : {
		initWorkspaceStream : async (param) => ipcRenderer.send('initWorkspaceStream', param),
	},



	account : {
		loginProcessing : async (param) => ipcRenderer.invoke('loginProcessing', param),
		getAccountInfo : async () => ipcRenderer.invoke('getAccountInfo'),
		updateSimpleAccountInfo : async (param) => ipcRenderer.invoke('updateSimpleAccountInfo', param)
	},

	chatting : {
		sendChatting : async (param) => ipcRenderer.invoke('sendChatting', param),
		deleteChatting : async (param) => ipcRenderer.invoke('deleteChatting', param),
		searchChattingList : async (param) => ipcRenderer.invoke('searchChattingList', param),
	},
	
	workspace : {
		searchWorkspaceMyJoined : async (param) => ipcRenderer.invoke('searchWorkspaceMyJoined', param),
		searchNameSpecificList: async (param) => ipcRenderer.invoke('searchNameSpecificList', param),
		searchWorkspaceInAccount : async (param) => ipcRenderer.invoke('searchWorkspaceInAccount', param),
		getWorkspaceDetail : async (param) => ipcRenderer.invoke('getWorkspaceDetail', param),
		createPermitWokrspaceInAccount: async (param) => ipcRenderer.invoke('createPermitWokrspaceInAccount', param),
		createGiveAdmin : async (param) => ipcRenderer.invoke('createGiveAdmin', param),
		searchPermitRequestList : async (param) => ipcRenderer.invoke('searchPermitRequestList', param),
		getIsAdmin : async (param) => ipcRenderer.invoke('getIsAdmin', param),
		createWorkspaceJoined: async (param) => ipcRenderer.invoke('createWorkspaceJoined', param),
		createWorkspace : async (param) => ipcRenderer.invoke('createWorkspace', param),
		getWorkspaceInAccountCount : async (param) => ipcRenderer.invoke('getWorkspaceInAccountCount', param),
	},

	room : {
		createRoom : async (param) => ipcRenderer.invoke('createRoom', param),
		createMySelfRoom : async (param)=> ipcRenderer.invoke('createMySelfRoom', param),
		createRoomInAccount : async (param) => ipcRenderer.invoke('createRoomInAccount', param),
		createRoomFavorites : async (param) => ipcRenderer.invoke('createRoomFavorites', param),
		updateRoomInAccoutOrder : async (param) => ipcRenderer.invoke('updateRoomInAccoutOrder', param),
		updateRoomFavorites : async (param) => ipcRenderer.invoke('updateRoomFavorites', param),
		searchRoom : async (param) => ipcRenderer.invoke('searchRoom', param),
		searchMyJoinedRoomList : async (param) => ipcRenderer.invoke('searchMyJoinedRoomList', param),
		searchRoomFavoritesList : async (param) => ipcRenderer.invoke('searchRoomFavoritesList', param),
		searchRoomJoinedAccountList : async (param) => ipcRenderer.invoke('searchRoomJoinedAccountList', param),
		getRoomDetail : async (param) => ipcRenderer.invoke('getRoomDetail', param),
		isRoomFavorites : async (param) => ipcRenderer.invoke('isRoomFavorites', param)
	},

	noticeBoard : {
		createNoticeBoard : async (param) => ipcRenderer.invoke('createNoticeBoard', param),
		createNoticeBoardGroup : async (param) => ipcRenderer.invoke('createNoticeBoardGroup', param),
		createNoticeBoardDetail : async (param) => ipcRenderer.invoke('createNoticeBoardDetail', param),
		deleteNoticeBoard : async (param) => ipcRenderer.invoke('deleteNoticeBoard', param),
		deleteNoticeBoardGroup : async (param) => ipcRenderer.invoke('deleteNoticeBoardGroup', param),
		updateNoticeBoardOrder : async (param) => ipcRenderer.invoke('updateNoticeBoardOrder', param),
		updateNoticeBoardDetailOrder : async (param) => ipcRenderer.invoke('updateNoticeBoardDetailOrder', param),
		searchNoticeBoardList : async (param) => ipcRenderer.invoke('searchNoticeBoardList', param),
		searchNoticeBoardDetailList : async (param) => ipcRenderer.invoke('searchNoticeBoardDetailList', param),
	},
	s3: {
		generatePutObjectPresignedUrl : async (param) => ipcRenderer.invoke('generatePutObjectPresignedUrl', param),
		generateGetObjectPresignedUrl : async (param) => ipcRenderer.invoke('generateGetObjectPresignedUrl', param),
	},
	emoticon: {
		createEmotionReaction : async (param) => ipcRenderer.invoke('createEmotionReaction', param),
		getIsReaction : async (param) => ipcRenderer.invoke('getIsReaction', param)
	}

}
window.myAPI = myAPI;
console.log('????????????????');
console.log(window.myAPI)

/***/ }),

/***/ "./browser/window/WindowUtil.js":
/*!**************************************!*\
  !*** ./browser/window/WindowUtil.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __isLocal: () => (/* binding */ __isLocal),
/* harmony export */   __serverApi: () => (/* binding */ __serverApi),
/* harmony export */   windowUtil: () => (/* binding */ windowUtil)
/* harmony export */ });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");


const log = console; 
const __serverApi = '';
const __isLocal = window.location.host == 'localhost';
top.__isLocal = __isLocal;
class WindowUtil{
    #loginRemeber;
    constructor(){

    }
    async isLogin(callBack = () => {}){
        if(this.#loginRemeber){
            return Promise.resolve(callBack(this.#loginRemeber));
        }
        return axios__WEBPACK_IMPORTED_MODULE_0__["default"].get(__serverApi + '/api/account/search/is-login', {
            headers:{
                'Content-Type': 'application/json'
            }
        })
        .catch(err=>{
            return err.response
        })
        .then(response => {
            if( ! this.responseIsOk(response)){
                return callBack({
                    isLogin: false,
                    status: response?.status,
                    statusText: response?.statusText
                });
            }else{
                if(response.data.code == 0){
                    response.isLogin = true;	
                }else if(response.data.code == 100 || response.data.code == 105 || response.data.code == 106 || response.data.code == 107){
                    response.isLogin = false;
                }else{
                    response.isLogin = false;
                }

                if(! response.isLogin){
                    axios__WEBPACK_IMPORTED_MODULE_0__["default"].defaults.headers.common['Authorization'] = '';
                }else{
                    this.#loginRemeber = response;
                    setTimeout(()=>{
                        this.#loginRemeber = undefined;
                    }, 1000 * 60)
                }
                return callBack(response);
            }
        })
    }

    responseIsOk({status = undefined} = {}){
        if( ! status){
            return false;
        }
        return (status == '200' || status == '201') ;
    }

    responseCheck(response){
		let status = response.status;
		let {code, data} = response.data;
        if(status == '200' || status == '201'){
			return response
		}else{
            log.error(response);
			throw new Error(response.message);
		}
	}

}

const windowUtil = new WindowUtil();

/***/ }),

/***/ "./view/js/common.js":
/*!***************************!*\
  !*** ./view/js/common.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class Common{
	#keyRegx = /[A-Z]?[a-z]+|[0-9]+|[A-Z]+(?![a-z])/g;

	constructor(){

	}

	jsonToSaveElementDataset(data, element){
		if( ! element){
			throw new Error('element is undefined')
		} else if(element.nodeType != Node.ELEMENT_NODE){
			throw new Error(`element is not element node type ::: ${element.nodeType}`);
		}
		return new Promise(resolve=>{
			let underbarKeyNameObject = Object.entries(data).reduce((total, [k,v]) => {
				let key = k.match(this.#keyRegx).map(e=> e.toLowerCase()).join('_');
				total[key] = v;
				return total;
			}, {});
			Object.assign(element.dataset, underbarKeyNameObject);
			resolve(element);
		})
	}
	async underbarNameToCamelName(obj){
		return new Promise(resolve => {
			resolve(Object.entries(obj).reduce((total, [k,v]) => {
				let key = k.split('_').map((e,i)=>{
					if(i == 0){
						return e.charAt(0).toLowerCase() + e.substring(1);
					}
					return e.charAt(0).toUpperCase() + e.substring(1)
				}).join('');
				total[key] = v;
				return total;
			}, {}))
		})
	}
	/**
	 * @returns {Promise<String>}
	 */
	async getProjectPathPromise(){
		return await window.myAPI.getProjectPath().then((data) => {
			return data;
		}).catch(error=>{
			console.error(error);
			return '';
		})
	}

	processingElementPosition(element, target){
		let rect;
		if(this.isElement(target, HTMLElement)){
			rect = target.getBoundingClientRect();
		}else{
			rect = target;
		}

		let {x, y, height, width} = rect;
		let elementTop = (y - element.clientHeight)
		let elementLeft = (x - element.clientWidth)
		if(elementTop > 0){
			element.style.top = elementTop + 'px';
		}else{
			element.style.top = y + height + 'px';
		}
		if(elementLeft > 0){
			element.style.left = elementLeft + 'px'
		}else{
			element.style.left = x + width + 'px';
		}
		
	}
    isElement(targetObject, checkClazz){
        let check = Object.getPrototypeOf(targetObject)
        let isElement = false;
        while(check != undefined){

            if(check?.constructor  == checkClazz){
                isElement = true;
                break;
            }else{
                check = Object.getPrototypeOf(check);
            }
        }
        return isElement;
    }

	shortenBytes(byte) {
		const rank = byte > 0 ? Math.floor((Math.log2(byte)/10)) : 0;
		const rankText = ( (rank > 0 ? 'KMGTPEZY'[rank - 1] : '') || (rank >= 9 ? 'Y' : '') ) + 'B';
		const size = Math.floor(byte / Math.pow(1024, (rank >= 9 ? 8 : rank) ));
		return {size, rank, rankText};
	}
});

/***/ }),

/***/ "./view/js/component/LayerPopupTemplate.js":
/*!*************************************************!*\
  !*** ./view/js/component/LayerPopupTemplate.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayerPopupTemplate)
/* harmony export */ });
class LayerPopupTemplate{

	#dim = Object.assign(document.createElement('div'),{
		className: 'layer_dim'
	})
	#containerBox;
	#container = (() => {
		let container = Object.assign(document.createElement('div'), {
			className: 'layer_container'
		});
		let containerBox = Object.assign(document.createElement('div'), {
			className: 'layer_container_box'
		});
		this.#containerBox = containerBox;
		this.#dim.append(containerBox);
		containerBox.append(container);
		return container;
	})();
	#onOpenCloseCallback = () => {}
	#dimIsClick = false;
	constructor(){
		new MutationObserver( (mutationList)=> {
			mutationList.forEach( (mutation) => {
				if( ! mutation.target.hasAttribute('open')){
					this.#dim.remove();
				}else{
					document.body.append(this.#dim);
					let openWait = setInterval(() => {
						if(this.#dim.isConnected){
							this.#dim.style.opacity = 1;
							this.#containerBox.style.opacity = 1;
							clearInterval(openWait);

						}
					}, 50);
					if(this.onOpenCloseCallback instanceof Function){
						this.onOpenCloseCallback('open');
					}
				}
			});
		}).observe(this.#dim, {
			attributeFilter:['open'],
			attributeOldValue:true
		});
		
		window.addEventListener('keyup', (event) => {
			if( ! this.#containerBox.isConnected || event.key != 'Escape'){
				return;
			}

			this.close();
		})
		/*
		this.#containerBox.onkeyup = (event) => {
			if(event.key == 'Escape'){
				this.close();
			}
		}
		*/
		this.#dim.onclick = (event) => {
			if(this.#dimIsClick || event.composedPath().some(e=>e==this.#containerBox)){
				return;
			}
			this.#dimIsClick = true;
			this.close();
		}

	}

	set onOpenCloseCallback(onOpenCloseCallback){
		this.#onOpenCloseCallback = onOpenCloseCallback;
	}
	get onOpenCloseCallback(){
		return this.#onOpenCloseCallback;
	}

	get dim(){
		return this.#dim;
	}

	get container(){
		return this.#container;
	}

	/**
	 * 이 레이어를 닫는 함수
	 * @param {Function} callback : 이 레이어를 닫은 후 실행 할 콜백 함수 
	 */
	close(callback){
		this.#containerBox.style.opacity = '';
		this.#dim.style.opacity = '';
		//this.#containerBox.ontransitionend = '';
		this.#dim.ontransitionend = '';
		new Promise(res=>{
			if(callback instanceof Function){
				callback();
			}
			res();
		});
		new Promise(res=>{
			if(this.onOpenCloseCallback instanceof Function){
				this.onOpenCloseCallback('close');
			}
			res();
		})
		/*
		this.#containerBox.ontransitionend = () => {
			this.#dim.removeAttribute('open');
			this.#dim.ontransitionend = () => {
				this.#containerBox.ontransitionend = '';
				this.#dim.ontransitionend = '';
			}
		}
		*/
		this.#dim.ontransitionend = () => {
			this.#dim.removeAttribute('open');
			this.#containerBox.ontransitionend = '';
			this.#dim.ontransitionend = '';
			this.#dimIsClick = false;
		}
	}
	/**
	 * 이 레이어를 여는 함수
	 * @param {Function} callback : 이 레이어를 연 후 실행 할 콜백 함수
	 */
	open(callback){
		this.#dim.setAttribute('open', '')
		new Promise(res=>{
			if(callback instanceof Function){
				callback();
			}
			res();
		});
	}
	

}

/***/ }),

/***/ "./view/js/component/NotificationsIcon.js":
/*!************************************************!*\
  !*** ./view/js/component/NotificationsIcon.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotificationsIcon)
/* harmony export */ });
class NotificationsIcon{
    static PositionOption = class PositionOption{
        static #PositionOptionEnum = class PositionOptionEnum{
            value;
            constructor(value){
                this.value = value;
                Object.freeze(this);
            }
        }
        static RIGHT_CENTER = new this.#PositionOptionEnum(1);
        static RIGHT_UP = new this.#PositionOptionEnum(2);
        static RIGHT_BOTTOM = new this.#PositionOptionEnum(3);
        
        static LEFT_CENTER = new this.#PositionOptionEnum(4);
        static LEFT_UP = new this.#PositionOptionEnum(5);
        static LEFT_BOTTOM = new this.#PositionOptionEnum(6);
    }
    
    #positionOption;

    #keyMapper = {};

    #element

    #counterSpan

    #target;

    #zeroCountCallback = (element, target) => {};
    constructor({
        target,
        positionOption = NotificationsIcon.PositionOption.RIGHT_UP, 
    }){
        if( ! target){
            throw new Error('target is undefined');
        }
        this.#target = target;
        this.#positionOption = positionOption;

        this.#element = Object.assign(document.createElement('div'),{

        })
        Object.assign(this.#element.style, {
            position: 'fixed',
            width: 'fit-content',
            height: 'fit-content',
            zIndex: '100',
            backgroundColor: 'rgb(247 141 141)',
            color: 'white',
            borderRadius: '100%',
            padding: '0.1rem 0.4rem 0.1rem 0.4rem',
            fontSize: '0.8rem'
        })
        
        this.#counterSpan = Object.assign(document.createElement('span'), {
        
        })
        Object.assign(this.#counterSpan.style, {

        })

        this.#element.append(this.#counterSpan);

        window.addEventListener('resize', (event) => {
            if( ! this.#element.isConnected || ! this.#target.isConnected){
                return;
            }
			this.#processingElementPosition()
		})
        window.addEventListener('wheel', (event) => {
            if( ! this.#element.isConnected || ! this.#target.isConnected){
                return;
            }
            this.#processingElementPosition();
        })
    }

    addCount(data, key){
        this.#keyMapper[key] = data;
        let len = Object.values(this.#keyMapper).length;
        if(len > 0){
            //document.body.append(this.#element);
            this.#processingElementPosition();
        }
        this.#counterSpan.textContent = len;
    }

    deleteCount(key){
        delete this.#keyMapper[key];
        let len = Object.values(this.#keyMapper).length;
        if(len == 0){
            this.#element.remove();
            this.#zeroCountCallback(this.#element, this.#target);
        }
        this.#counterSpan.textContent = len;
    }

    #processingElementPosition(){

        document.body.append(this.#element);
        this.#element.fontSize = parseFloat(window.getComputedStyle(this.#target).fontSize);
        let appendAwait = setInterval(()=>{
            console.log(Object.values(this.#keyMapper).length);
            if(Object.values(this.#keyMapper).length == 0){
                clearInterval(appendAwait);
            }
            if( ! this.#element.isConnected){
                return;
            }
            clearInterval(appendAwait);
            let targetRect = this.#target.getBoundingClientRect();
            let elementRect = this.#element.getBoundingClientRect();

            let positionObj = this.#getPosition(targetRect, elementRect)
            console.log(positionObj);
            Object.assign(this.#element.style, positionObj)

        }, Math.floor(Math.random() * (500 - 100) + 100) );
    }

    /**
     * 
     * @param {DOMRect} targetRect 
     * @param {DOMRect} elementRect 
     */
    #getPosition(targetRect, elementRect){
        let obj = {left: 0, right: 0, top: 0, bottom: 0};
        if(this.#positionOption == NotificationsIcon.PositionOption.RIGHT_CENTER ||
            this.#positionOption == NotificationsIcon.PositionOption.RIGHT_UP ||
            this.#positionOption == NotificationsIcon.PositionOption.RIGHT_BOTTOM
        ){
            obj.left = targetRect.x + targetRect.width - (elementRect.width / 2);
            if(obj.left > window.outerWidth){
                obj.left = targetRect.x - (elementRect.width / 2);
            }
        }else{
            obj.left = targetRect.x - (elementRect.width / 2);
            if(obj.left > targetRect.x - (elementRect.width / 2) < 0){
                obj.left = targetRect.x + targetRect.width - (elementRect.width / 2);
            }
        }

        if(
            this.#positionOption == NotificationsIcon.PositionOption.RIGHT_CENTER ||
            this.#positionOption == NotificationsIcon.PositionOption.LEFT_CENTER
        ){
            obj.top = targetRect.y
        }else if(
            this.#positionOption == NotificationsIcon.PositionOption.RIGHT_UP ||
            this.#positionOption == NotificationsIcon.PositionOption.LEFT_UP
        ){
            obj.top = targetRect.y - targetRect.height;
            if(obj.top < 0){
                obj.top = targetRect.y + targetRect.height;
            }
        }else if(
            this.#positionOption == NotificationsIcon.PositionOption.RIGHT_BOTTOM ||
            this.#positionOption == NotificationsIcon.PositionOption.LEFT_BOTTOM
        ){
            obj.top = targetRect.y + targetRect.height;
            if(obj.top > window.outerHeight){
                obj.top = targetRect.y - targetRect.height;
            }
        }

        return Object.entries(obj).reduce(( t, [k,v] )=>{
            if(v != 0){
                t[k] = v + 'px';
            }else{
                t[k] = v;
            }
            return t;
        },{});
    }

    set zeroCountCallback(callback){
        this.#zeroCountCallback = callback;
    }

    get zeroCountCallback(){
        return this.#zeroCountCallback;
    }

}

/***/ }),

/***/ "./view/js/component/SimpleSvgPipMode.js":
/*!***********************************************!*\
  !*** ./view/js/component/SimpleSvgPipMode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SimpleSvgPipMode)
/* harmony export */ });

class SimpleSvgPipMode{
    
    #svg = Object.assign(document.createElement('svg'), {
        className: 'pointer',
        innerHTML : `
            <foreignObject  width="100%" height="100%" stlye="position:relative;">
                <div style="position:absolute; width:100%; height:100%; background-color: rgba(0,0,0,0); z-index:9999"></div>
                <main></main>
            </foreignObject>
        `
    });

    #onSvgClickCallback = () => {}

    #target;
    #zoom;

    /**
     * 
     * @param {target = HTMLElement, zoom = number} param0 
     */
    constructor({
        target,
        zoom = 15
    }){

        if( ! this.#isElement(target)){
            throw new Error('target is not element');
        }
        this.#target = target;
        this.#zoom = parseFloat(zoom);
        if(isNaN(this.#zoom)){
            throw new Error('zoom is not number');
        }
        this.#svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        this.#svg.dataset.is_not_visible_target = '';
        this.#hiddenStyle(this.#svg);

        this.#svg.onclick = (event) => {
            this.onSvgClickCallback(event);
        }
    }

    #hiddenStyle(svg){
        Object.assign(svg.style, {
            backgroundColor: 'rgba(0, 0, 0, 0)', position: 'absolute', visibility: 'hidden', 
            opacity: '0', zIndex : -1, userSelect: 'none'
        })
    }

    open(){
        let clone = this.#target.cloneNode(true);
        new Promise(resolve => {
            document.body.append(this.#svg);
            this.#svg.querySelector('foreignObject > main').replaceChildren(clone);
            let targetRect = this.#target.getBoundingClientRect();
            let appendAwait = setInterval(()=>{
                if( ! this.#svg.isConnected){
                    return;
                }
                clearInterval(appendAwait);
                Object.assign(this.#svg.style, {
                    top: ( targetRect.top * (100 / this.#zoom)) + (this.#svg.clientHeight) + 'px',
                    left: ( targetRect.left * (100 / this.#zoom) ) - this.#svg.clientWidth + 'px',
                    zIndex : 1000,
                    zoom : this.#zoom + '%',
                    visibility: '',
                    opacity: '',
                    backgroundColor: 'white'
                })
                
            }, 50)
            resolve();
        });
        return clone;
    }

    close(){
        this.#hiddenStyle(this.#svg);
        this.#svg.remove();
    }

    #isElement(targetObject){
        let check = Object.getPrototypeOf(targetObject)
        let isElement = false;
        while(check != undefined){
            isElement = check instanceof HTMLElement
            if(isElement){
                break;
            }
            check = Object.getPrototypeOf(check);

        }
        return isElement;
    }

    set onSvgClickCallback(callback){
        this.#onSvgClickCallback = callback;
    }
    get onSvgClickCallback(){
        return this.#onSvgClickCallback;
    }
    get svg(){
        return this.#svg;
    }
} 

/***/ }),

/***/ "./view/js/component/chatting/ChattingContainer.js":
/*!*********************************************************!*\
  !*** ./view/js/component/chatting/ChattingContainer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _chatting_item_ChattingHead__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chatting_item/ChattingHead */ "./view/js/component/chatting/chatting_item/ChattingHead.js");
/* harmony import */ var _chatting_item_ChattingInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatting_item/ChattingInfo */ "./view/js/component/chatting/chatting_item/ChattingInfo.js");
/* harmony import */ var _chatting_item_ChattingRegist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chatting_item/ChattingRegist */ "./view/js/component/chatting/chatting_item/ChattingRegist.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _component_SimpleSvgPipMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @component/SimpleSvgPipMode */ "./view/js/component/SimpleSvgPipMode.js");







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class ChattingContainer{
    
    #contentList;
    #wrap = (() => {
        let wrap = Object.assign(document.createElement('div'), {
            id:'chatting_wrapper',
            innerHTML: '<div class="content"></div>'
        });
        wrap.dataset.is_resize = true;

        let simpleSvgPipMode = new _component_SimpleSvgPipMode__WEBPACK_IMPORTED_MODULE_4__["default"]({target : wrap, zoom: 15});

        wrap._visibilityChangeCallback = (visibilityStatus) => {
            if(visibilityStatus == 'h'){
                let cloneWrap = simpleSvgPipMode.open();
                cloneWrap.dataset.grow = 1;
                cloneWrap.style.flex = '1 1 0%'
            }else {
                simpleSvgPipMode.close();
            }
        }
        simpleSvgPipMode.onSvgClickCallback = (event) => {
            wrap.dataset.prev_grow = 2.3;
            wrap.closest('flex-layout').openFlex(wrap,{isPrevSizeOpen: true})
        }
        _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].addRoomIdChangeListener = {
            name : 'chattingContainer',
            callBack : () => {
                if( ! simpleSvgPipMode.svg?.isConnected){
                    return;
                }
                _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].roomChangeAwait.then(()=>{
                    setTimeout(()=>{
                        let cloneWrap = simpleSvgPipMode.open();
                        cloneWrap.dataset.grow = 1;
                        cloneWrap.style.flex = '1 1 0%'
                    },1500)
                })
  
            },
            runTheFirst: false
        }
        return wrap;
    })();
    #container = (()=>{
        let chattingContainer = Object.assign(document.createElement('flex-layout'), {
            
        });
        chattingContainer.dataset.direction = 'column';
        return chattingContainer;
    })();
    constructor(){
        _chatting_item_ChattingHead__WEBPACK_IMPORTED_MODULE_0__["default"].element.dataset.is_resize = true;
        _chatting_item_ChattingHead__WEBPACK_IMPORTED_MODULE_0__["default"].element.dataset.grow = 0.4;
        //chattingHead.element.dataset.prev_grow = 0.4;
        _chatting_item_ChattingHead__WEBPACK_IMPORTED_MODULE_0__["default"].element.style.minHeight = '30px';


        _chatting_item_ChattingInfo__WEBPACK_IMPORTED_MODULE_1__["default"].element.dataset.is_resize = true;
        //chattingInfo.element.dataset.prev_grow = 2
        _chatting_item_ChattingInfo__WEBPACK_IMPORTED_MODULE_1__["default"].element.style.minHeight = '30px';

        _chatting_item_ChattingRegist__WEBPACK_IMPORTED_MODULE_2__["default"].element.dataset.is_resize = true;
        _chatting_item_ChattingRegist__WEBPACK_IMPORTED_MODULE_2__["default"].element.dataset.grow = 0.9;
        //chattingRegist.element.dataset.prev_grow = 0.9;        
        _chatting_item_ChattingRegist__WEBPACK_IMPORTED_MODULE_2__["default"].element.style.minHeight = '30px';

        this.#contentList = [_chatting_item_ChattingHead__WEBPACK_IMPORTED_MODULE_0__["default"].element, _chatting_item_ChattingInfo__WEBPACK_IMPORTED_MODULE_1__["default"].element, _chatting_item_ChattingRegist__WEBPACK_IMPORTED_MODULE_2__["default"].element];

        this.#container.replaceChildren(...this.#contentList);
        this.#wrap.querySelector('.content').append(this.#container);

        /*        
        [chattingHead.element].forEach((e,i)=>{
            let simpleSvgPipMode = new SimpleSvgPipMode({target : e, zoom : 30});
            e._visibilityChangeCallback = (visibilityStatus) => {
                if(visibilityStatus == 'h'){
                    let cloneWrap = simpleSvgPipMode.open();
                    cloneWrap.dataset.grow = 1;
                    cloneWrap.style.flex = '1 1 0%'
                }else{
                    simpleSvgPipMode.close();
                }
                simpleSvgPipMode.onSvgClickCallback = (event) => {
                    e.dataset.grow = e.dataset.prev_grow;
                    //this.#container.openFlex(e, {isPrevSizeOpen}).then(()=>{
                       
                    //})
                }
            }
        })
        */
    }
    
    get container(){
        return this.#container;
    }

    get wrap(){
        return this.#wrap;
    }

}());

/***/ }),

/***/ "./view/js/component/chatting/chatting_item/AccountInviteRoomView.js":
/*!***************************************************************************!*\
  !*** ./view/js/component/chatting/chatting_item/AccountInviteRoomView.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AccountInviteRoomView)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @component/LayerPopupTemplate */ "./view/js/component/LayerPopupTemplate.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");






class AccountInviteRoomView extends _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__["default"]{

	#layerContent = Object.assign(document.createElement('div'),{
		innerHTML: `
			<style>
				form#account_invite_room_view{
					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					text-align: center;
					gap: 2vh;
					position: relative;
				}
				#account_invite_room_view_account_list{
					width: 30vw;
					height: 50vh;
					overflow-y: auto;
					max-height: 1%;
				}

				#account_invite_room_view_account_list::-webkit-scrollbar{
					display: none;
				}
				#account_invite_room_view_account_list:hover::-webkit-scrollbar{
					display: initial;
					width: 8px;
				}
				#account_invite_room_view_account_list::-webkit-scrollbar-track{
					background: #00000000;
				}
				#account_invite_room_view_account_list::-webkit-scrollbar-thumb {
					background: #d8a1b6;
					border-radius: 100px;
					box-shadow: inset 0 0 5px #000000;
				}
				#account_invite_room_view_account_list::-webkit-scrollbar-thumb:hover {
					/*background: #44070757;*/
					background: #893e3e
				}

				#account_invite_room_view_account_list > li{
					border-top: outset 1px;
					position: relative;
					display: flex;
					align-items: center;
					justify-content: center;
				}
				#account_invite_room_view_account_list > li > input.add_account_check{
				}
				#account_invite_room_view_account_list > li .create_room_view_department, 
				#account_invite_room_view_account_list > li .create_room_view_job_grade,
				#account_invite_room_view_account_list > li .create_room_view_account_name{
					color: #b1b1b1;
				}
				#account_invite_room_view_account_list > li .create_room_view_department,
				#account_invite_room_view_account_list > li .create_room_view_account_name{
					font-weight: lighter;
				}
				#account_invite_room_view_account_list > li .create_room_view_separator{
					color: #6937a16b;
				}
				/*#account_invite_room_view_account_list > li .create_room_view_job_grade,*/
				#account_invite_room_view_account_list > li .create_room_view_full_name,
				#account_invite_room_view_account_list > li .create_room_view_separator{
					font-weight: bold;
				}
				#account_invite_room_view_account_list > li .create_room_view_full_name{
					color: #789bb9b8;
				}
				#account_invite_room_view_account_list > li .create_room_view_account_info{
					width: 100%
				}
				#account_invite_room_view_account_list #account_invite_room_view_button{
					
				}
			</style>
			<form id="account_invite_room_view">
				<div>
					<label for="account_invite_room_view_search_user">Please enter the users you want to invite.</label>
					<input type="search" id="account_invite_room_view_search_user" name="fullName"/>
				</div>
				<ul id="account_invite_room_view_account_list">
				</ul>
				<div>
					<button type="button" id="account_invite_room_view_button">Invite</button>
				</div>
			</from>
		`
	})

	/**
	 * full 네임으로 검색 ex) ${fullName}(${accountName}) 형식
	 */
	#accountInviteRoomViewAccountList = this.#layerContent.querySelector('#account_invite_room_view_account_list');
	page = 0;
	size = 10;
	#liList = [];
	#workspaceId;
	form = this.#layerContent.querySelector('#account_invite_room_view');
	#roomId;

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.page += 1;
				let roomName = this.form.fullName.value;
				this.callData(this.page, this.size, this.#workspaceId, this.#roomId, roomName).then(data=>{
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
					if(this.page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#inviteAccountMapper = {};

	constructor(owner){
		super(owner);
		super.container.append(this.#layerContent)
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'accountInviteRoomView',
			callBack: (handler) => {
				this.workspaceId = handler.workspaceId;
			},
			runTheFirst: true
		}
		this.form.onsubmit = (event) => {
			//console.log(event);
			event.preventDefault();
			/*let fullName = this.form.create_room_search_user.value;
			this.reset();
			this.callData(this.page, this.size, this.#workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});*/
		};
		this.form.account_invite_room_view_search_user.onkeydown = (event) => {
			if(event.key != 'Enter'){
				return;
			}
			let fullName = this.form.account_invite_room_view_search_user.value;
			this.reset();
			this.callData(this.page, this.size, this.#workspaceId, this.#roomId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});
		}
		this.form.account_invite_room_view_search_user.oninput = (event) => {
			if(this.form.account_invite_room_view_search_user.value == ''){
				this.reset();
				this.callData(this.page, this.size, this.#workspaceId, this.#roomId).then(data => {
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
				});
			}
		}
		
		this.form.account_invite_room_view_button.onclick = (event) => {
			super.close();
			if( ! _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].room || ! _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId){
				console.error('room is undefined', _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"]);
				return;
			}

			let promise = Promise.resolve();
			if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].room.roomType == 'MESSENGER'){
				let createRoomParam = {
					id : _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId,
					roomName : [
						..._handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].room.roomName.split(',').map(e=>e.trim()),
						...Object.values(this.#inviteAccountMapper).map(e=>e.full_name),
					].sort((a,b)=> a.localeCompare(b)).join(','),
					workspaceId : this.#workspaceId,
					roomType : 'MESSENGER'
				}
				console.log('roomName ::: !!! ', createRoomParam.roomName);
				promise = window.myAPI.room.createRoom(createRoomParam);
			}
			promise.then(() => {
				window.myAPI.room.createRoomInAccount(
					Object.values(this.#inviteAccountMapper).map(e=>{	
						return {
							roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId,
							accountName: e.account_name,
							fullName: e.full_name,
							workspaceId: e.workspace_id,
							jobGrade: e.job_grade,
							department: e.department,
							roomType: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].room.roomType	
						};
					})
				).then(()=>{
					this.#inviteAccountMapper = {};
				})
			})
		}
	}
	
	callData(page, size, workspaceId, roomId, fullName){
		console.log(roomId);
		return window.myAPI.workspace.searchWorkspaceInAccount({
			page, size, workspaceId, roomId, fullName
		}).then((data = {}) =>{
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
			}

			let liList = content.map(item => {
				let {
					accountName,
					fullName,
					workspaceId,
					jobGrade,
					department
				} = item;
				
				let departmentHtml = department ? `<small class="create_room_view_department">${department}</small>` : '';
				let separatorHtml = department && jobGrade ? `<span class="create_room_view_separator">/&nbsp</span>` : '';
				let jobGradeHtml = jobGrade ? `${separatorHtml}<small class="create_room_view_job_grade">${jobGrade}</small>` : '';

				let li = Object.assign(document.createElement('li'), {
					className: 'pointer',
					innerHTML: `
						<div class="create_room_view_account_info">
							<div>
								<span class="create_room_view_full_name">${fullName}</span>
								<span class="create_room_view_account_name">(${accountName})</span>
							</div>
							<div>
								${departmentHtml}
								${jobGradeHtml}
							</div>
						</div>
						<input type="checkbox" name="add_account_check" class="add_account_check pointer" ${this.#inviteAccountMapper.hasOwnProperty(accountName) ? 'checked' : ''}/>
					`
				});
				Object.assign(li.dataset,{
					account_name: accountName,
					full_name: fullName,
					workspace_id: workspaceId,
					job_grade: jobGrade,
					department
				});
				this.#addItemEvent(li);
				return li;
			})

			this.#liList.push(...liList);
			this.#accountInviteRoomViewAccountList.replaceChildren(...this.#liList);
			resolve(liList);
		});
	}

	addListItemVisibleEvent(liList){
		return new  Promise(resolve => {
			if(liList.length == 0){
				resolve(liList);
			}
			this.#lastItemVisibleObserver.disconnect();
			this.#lastItemVisibleObserver.observe(liList.at(-1));
			resolve(liList);
		})
	}
	#addItemEvent(li){
		return new Promise(resolve => {
			let checkbox = li.querySelector('[name="add_account_check"]');
			li.onclick = (event) => {
				if(event.target === checkbox){
					return;
				}
				checkbox.click();
			}
			checkbox.onchange = (event) => {
				if(checkbox.checked){
					this.#inviteAccountMapper[li.dataset.account_name] = Object.assign({}, li.dataset)
				}else{
					delete this.#inviteAccountMapper[li.dataset.account_name]
				}
			}
			resolve(li);
		});
	}
	reset(){
		this.#roomId = undefined;
		this.page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#accountInviteRoomViewAccountList.replaceChildren();
		/*inviteAccountMapper.keys().forEach(k=>{
			delete inviteAccountMapper[key];
		})*/
	}

	set roomId(roomId){
		if( ! roomId){
			console.error('roomId is undefined');
            return;
        }
		this.#roomId = roomId;
	}

	get roomId(){
		return this.#roomId;
	}

	set workspaceId(workspaceId){
		this.#workspaceId = workspaceId;
	}
	get workspaceId(){
		return this.#workspaceId;
	}
}

/***/ }),

/***/ "./view/js/component/chatting/chatting_item/ChattingHead.js":
/*!******************************************************************!*\
  !*** ./view/js/component/chatting/chatting_item/ChattingHead.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @component/room/room_item/RoomFavoritesList */ "./view/js/component/room/room_item/RoomFavoritesList.js");
/* harmony import */ var _AccountInviteRoomView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AccountInviteRoomView */ "./view/js/component/chatting/chatting_item/AccountInviteRoomView.js");
/* harmony import */ var _component_room_RoomContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @component/room/RoomContainer */ "./view/js/component/room/RoomContainer.js");
/* harmony import */ var _component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @component/notice_board/NoticeBoardContainer */ "./view/js/component/notice_board/NoticeBoardContainer.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");











/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class ChattingHead{
    #chattingHeadMemory = {};
    //electron datalist 위치 문제 -> electrom 23버전으로 업그레이드
    #element = Object.assign(document.createElement('div'), {
        id: 'chatting_head_wrapper',
        innerHTML: `
        <div class="chatting_head_container" data-bind_name="chattingHeadContainer">
            <div class="chatting_head_info_wrapper list_scroll list_scroll-x" data-bind_name="chattingHeadInfoWrapper">
                <div class="chatting_head_info_container">
                    <h3 class="chatting_head_title" data-bind_name="chattingHeadTitle"></h3>
                    <span class="chatting_head_joined_count" data-bind_name="chattingHeadJounedCount"></span>
                </div>
                <div class="chatting_head_button_container">
                    <div class="chatting_head_info_search_container">
                        <input type="search" placeholder="search members" list="chatting_head_member_list" class="chatting_head_search_members" data-bind_name="searchMembers"/>
                        <datalist id="chatting_head_member_list" class="chatting_head_search_member_list" data-bind_name="searchMemberList">
                        </datalist>
                    </div>
                    <button type="button" class="favorites_add_button" data-bind_name="favoritesAddButton">☆</button>
                    <button type="button" class="member_add_button" data-bind_name="memberAddButton">+</button>
                </div>
            </div>
            <div class="chatting_head_menu_wrapper">
                <button type="button" class="css-gg-list" data-bind_name="noticeBoardIconButton" title="notice board">
                    <svg style="zoom:135%" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M20 4H4C3.44771 4 3 4.44772 3 5V19C3 19.5523 3.44772 20 4 20H20C20.5523 20 21 19.5523 21 19V5C21 4.44771 20.5523 4 20 4ZM4 2C2.34315 2 1 3.34315 1 5V19C1 20.6569 2.34315 22 4 22H20C21.6569 22 23 20.6569 23 19V5C23 3.34315 21.6569 2 20 2H4ZM6 7H8V9H6V7ZM11 7C10.4477 7 10 7.44772 10 8C10 8.55228 10.4477 9 11 9H17C17.5523 9 18 8.55228 18 8C18 7.44772 17.5523 7 17 7H11ZM8 11H6V13H8V11ZM10 12C10 11.4477 10.4477 11 11 11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H11C10.4477 13 10 12.5523 10 12ZM8 15H6V17H8V15ZM10 16C10 15.4477 10.4477 15 11 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H11C10.4477 17 10 16.5523 10 16Z"
                        fill="currentColor"/>
                    </svg>
                </button>
            </div>
            <ul class="chatting_head_joined_members list_scroll list_scroll-x" data-bind_name="chattingHeadJoinedMembers">

            </ul>
        </div>
        `
    });

    #elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();

    #roomId

    #accountInviteRoomView

    constructor(){
		
        this.#accountInviteRoomView = new _AccountInviteRoomView__WEBPACK_IMPORTED_MODULE_3__["default"](this, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].roomId);
		this.#accountInviteRoomView.onOpenCloseCallback = (status) => {
			this.#accountInviteRoomView.reset();
			if(status == 'open'){
                this.#accountInviteRoomView.roomId = _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].roomId;
				this.#accountInviteRoomView.callData(this.#accountInviteRoomView.page, this.#accountInviteRoomView.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__["default"].workspaceId, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].roomId, this.#accountInviteRoomView.form.fullName.value)
				.then(data => {
                    console.log(data);
					this.#accountInviteRoomView.createPage(data).then(liList => {
						this.#accountInviteRoomView.addListItemVisibleEvent(liList);
					})
				})
			}
		}
        [this.#elementMap.chattingHeadJoinedMembers, this.#elementMap.chattingHeadInfoWrapper].forEach(scrollTarget=>{
            document.addEventListener('keydown',(event)=>{
                if(scrollTarget.hasAttribute('data-is_shft')){
                    return;
                }
                let {key} = event;
                if(key === 'Shift'){
                    scrollTarget.dataset.is_shft = '';
                }
            })

            document.addEventListener('keyup', (event)=>{
                if( ! scrollTarget.hasAttribute('data-is_shft')){
                    return;
                }    
                let {key} = event;
                if(key === 'Shift'){
                    scrollTarget.removeAttribute('data-is_shft');
                }
            })
            
            scrollTarget.onwheel = (event) => {
                if(scrollTarget.hasAttribute('data-is_shft')){
                    return;
                }
                event.preventDefault();
                let {deltaY} = event;
                
                scrollTarget.scrollTo(
                    scrollTarget.scrollLeft + deltaY, undefined
                );
                /*
                this.#elementMap.chattingHeadJoinedMembers.scrollTo(
                {
                    left: this.#elementMap.chattingHeadJoinedMembers.scrollLeft + deltaY,
                    behavior: 'smooth'
                });
                */
            }
        })


        window.myAPI.event.electronEventTrigger.addElectronEventListener('roomInAccountAccept', event => {
            let {content = event} = event;

            this.#addMemory(this.createLiElement(content), content.workspaceId, content.roomId, content.accountName);
            if(content.roomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].roomId){

                let memberList = Object.values(this.#chattingHeadMemory[content.workspaceId]?.[content.roomId] || {})
                    .sort((a,b)=> a.dataset.full_name.localeCompare(b.dataset.full_name));

                new Promise(res => {
                    let optionList = memberList.map(li => {
                        let option = Object.assign(document.createElement('option'), {
                            value : li.dataset.full_name,
                            textContent: li.dataset.department
                        })
                        option.__target_member = li;
                        return option;
                    })
                    this.#elementMap.searchMemberList.replaceChildren(...optionList);
                    res();
                })
                if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].room.roomType == 'MESSENGER'){
                    this.#elementMap.chattingHeadTitle.textContent = memberList.map(e=>e.dataset.full_name).join(', ')
                }
                this.#elementMap.chattingHeadJoinedMembers.replaceChildren(...memberList);
                
                this.#elementMap.chattingHeadJounedCount.textContent = 
                    `(${memberList.length} members)`
            }
        })

        const memberAddButton = this.#elementMap.memberAddButton;
        _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addRoomIdChangeListener = {
			name: 'chattingHead',
			callBack: (handler) => {
                this.#roomId = handler.roomId;
                if(handler.room.roomType == 'MESSENGER'){
                    let roomNameList = handler.room.roomName.split(',');
                    let targetIndex = roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_7__.accountHandler.accountInfo.fullName);
                    if(targetIndex != -1){
                        roomNameList.splice(roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_7__.accountHandler.accountInfo.fullName), 1);
                    }
                    this.#elementMap.chattingHeadTitle.textContent = roomNameList.sort((a,b)=> a.localeCompare(b)).join(', ');
                }else{
                    this.#elementMap.chattingHeadTitle.textContent = handler.room.roomName;
                }
                this.#elementMap.chattingHeadJoinedMembers.replaceChildren();
                window.myAPI.room.searchRoomJoinedAccountList({roomId: handler.roomId}).then(result=>{
                    console.log(result);
                });

                window.myAPI.room.isRoomFavorites({roomId : handler.roomId}).then(result => {
                    if(result.data === true){
                        this.#elementMap.favoritesAddButton.classList.add('apply')
                        this.#elementMap.favoritesAddButton.textContent = '★'
                    }else{
                        this.#elementMap.favoritesAddButton.classList.remove('apply')
                        this.#elementMap.favoritesAddButton.textContent = '☆'
                    }
                })

                if(handler.room.roomType == 'SELF'){
                    memberAddButton.remove();
                }else{
                    this.#elementMap.favoritesAddButton.after(memberAddButton);
                }
			},
			runTheFirst: false
		}

        this.#elementMap.searchMembers.oninput = () => {
            let searchText = this.#elementMap.searchMembers.value;
            if(searchText.value == ''){
                this.#elementMap.chattingHeadJoinedMembers.replaceChildren(...Object.values(this.#chattingHeadMemory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__["default"].workspaceId][this.#roomId]));  
            }
            this.#elementMap.chattingHeadJoinedMembers.replaceChildren(
                ...[...this.#elementMap.searchMembers.list.options].map(option => {
                    if(option.value.includes(searchText) || option.textContent.includes(searchText)){
                        option.__target_member.style.visibility = ''
                        option.__target_member.style.opacity = '';
                        return option.__target_member;
                    }
                    return undefined;
                }).filter(e=>e)
            );
            
        }

        this.#elementMap.favoritesAddButton.onclick = () => {
            window.myAPI.room.createRoomFavorites({
                roomId: this.#roomId,
                workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__["default"].workspaceId
            }).then((result)=>{
                if(! result || result == ''){
                    this.#elementMap.favoritesAddButton.classList.remove('apply')
                    this.#elementMap.favoritesAddButton.textContent = '☆'
                    delete _component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_2__["default"].memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__["default"].workspaceId];
                }else if(result.code == 0){
                    this.#elementMap.favoritesAddButton.classList.add('apply')
                    this.#elementMap.favoritesAddButton.textContent = '★'
                    delete _component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_2__["default"].memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_1__["default"].workspaceId];
                }
                _component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_2__["default"].refresh();
                
                //workspaceHandler.workspaceId = workspaceHandler.workspaceId;
            })
        }
        this.#elementMap.memberAddButton.onclick = () => {
            this.#accountInviteRoomView.open();
        }
  
        let isFirstOpen = false;
        this.#elementMap.noticeBoardIconButton.onclick = () => {
            let flexLayout = _component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_5__["default"].wrap.closest('flex-layout');
            if(this.#elementMap.noticeBoardIconButton.hasAttribute('data-is_close')){
                this.#elementMap.noticeBoardIconButton.removeAttribute('data-is_close');
                flexLayout.closeFlex(_component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_5__["default"].wrap).then(()=>{
                    //noticeBoardContainer.wrap.dataset.is_resize = false;
                    flexLayout.openFlex(_component_room_RoomContainer__WEBPACK_IMPORTED_MODULE_4__["default"].wrap, {isPrevSizeOpen: true}).then(()=>{
                    
                    });
                })
            }else{
                this.#elementMap.noticeBoardIconButton.setAttribute('data-is_close', '');
                flexLayout.closeFlex(_component_room_RoomContainer__WEBPACK_IMPORTED_MODULE_4__["default"].wrap).then(()=>{
                    flexLayout.openFlex(_component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_5__["default"].wrap, {isPrevSizeOpen: true, isResize: ! isFirstOpen}).then(() => {
                        isFirstOpen = true;
                    });
                    _component_room_RoomContainer__WEBPACK_IMPORTED_MODULE_4__["default"].wrap.dataset.is_resize = false;
                });
               
            }   
        }
        
    }

    #addMemory(data, workspaceId, roomId, accountName){
		if( ! this.#chattingHeadMemory.hasOwnProperty(workspaceId)){
			this.#chattingHeadMemory[workspaceId] = {};
		}
        if( ! this.#chattingHeadMemory[workspaceId].hasOwnProperty(roomId)){
            this.#chattingHeadMemory[workspaceId][roomId] = {};
        }
        this.#chattingHeadMemory[workspaceId][roomId][accountName] = data
    }

    createLiElement(obj){

        let li = Object.assign(document.createElement('li'), {
            className: 'pointer',
            innerHTML: `
                <span>${obj.fullName}</span>
            `
        });
        _root_js_common__WEBPACK_IMPORTED_MODULE_6__["default"].jsonToSaveElementDataset(obj, li);
        return li
    }

    set roomId(roomId){
        if( ! roomId){
            console.error('roomId is undefined');
            return;
        }
        this.#roomId = roomId;
    }

    get roomId(){
        return this.#roomId; 
    }

    get element(){
        return this.#element;
    }

    get elementMap(){
        return this.#elementMap;
    }

});


/***/ }),

/***/ "./view/js/component/chatting/chatting_item/ChattingInfo.js":
/*!******************************************************************!*\
  !*** ./view/js/component/chatting/chatting_item/ChattingInfo.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_chatting_ChattingHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/chatting/ChattingHandler */ "./view/js/handler/chatting/ChattingHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");
/* harmony import */ var _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @handler/editor/FreeWillEditor */ "./view/js/handler/editor/FreeWillEditor.js");
/* harmony import */ var _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @handler/editor/tools/Strong */ "./view/js/handler/editor/tools/Strong.js");
/* harmony import */ var _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @handler/editor/tools/Color */ "./view/js/handler/editor/tools/Color.js");
/* harmony import */ var _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @handler/editor/tools/Background */ "./view/js/handler/editor/tools/Background.js");
/* harmony import */ var _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @handler/editor/tools/Strikethrough */ "./view/js/handler/editor/tools/Strikethrough.js");
/* harmony import */ var _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @handler/editor/tools/Underline */ "./view/js/handler/editor/tools/Underline.js");
/* harmony import */ var _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @handler/editor/tools/FontFamily */ "./view/js/handler/editor/tools/FontFamily.js");
/* harmony import */ var _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @handler/editor/tools/Quote */ "./view/js/handler/editor/tools/Quote.js");
/* harmony import */ var _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @handler/editor/tools/NumericPoint */ "./view/js/handler/editor/tools/NumericPoint.js");
/* harmony import */ var _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @handler/editor/tools/BulletPoint */ "./view/js/handler/editor/tools/BulletPoint.js");
/* harmony import */ var _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @handler/editor/tools/Sort */ "./view/js/handler/editor/tools/Sort.js");
/* harmony import */ var _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @handler/editor/tools/FontSize */ "./view/js/handler/editor/tools/FontSize.js");
/* harmony import */ var _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @handler/editor/tools/Italic */ "./view/js/handler/editor/tools/Italic.js");
/* harmony import */ var _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @handler/editor/tools/Image */ "./view/js/handler/editor/tools/Image.js");
/* harmony import */ var _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @handler/editor/tools/Video */ "./view/js/handler/editor/tools/Video.js");
/* harmony import */ var _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @handler/editor/tools/Resources */ "./view/js/handler/editor/tools/Resources.js");
/* harmony import */ var _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @handler/editor/tools/Code */ "./view/js/handler/editor/tools/Code.js");
/* harmony import */ var _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @handler/editor/tools/Hyperlink */ "./view/js/handler/editor/tools/Hyperlink.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @handler/S3EncryptionUtil */ "./view/js/handler/S3EncryptionUtil.js");
/* harmony import */ var _handler_editor_module_emoticon__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @handler/editor/module/emoticon */ "./view/js/handler/editor/module/emoticon.js");
/* harmony import */ var _handler_editor_component_EmoticonBox__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @handler/editor/component/EmoticonBox */ "./view/js/handler/editor/component/EmoticonBox.js");
/* harmony import */ var _component_NotificationsIcon__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @component/NotificationsIcon */ "./view/js/component/NotificationsIcon.js");
/* harmony import */ var _component_room_room_item_RoomList__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @component/room/room_item/RoomList */ "./view/js/component/room/room_item/RoomList.js");
/* harmony import */ var _component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @component/room/room_item/RoomFavoritesList */ "./view/js/component/room/room_item/RoomFavoritesList.js");
/* harmony import */ var _component_room_room_item_RoomMessengerList__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @component/room/room_item/RoomMessengerList */ "./view/js/component/room/room_item/RoomMessengerList.js");






































class ChattingInfoLine extends _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_4__["default"]{
    static{
        window.customElements.define('chatting-info-line', ChattingInfoLine);
    }
    static tools = [
        _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_5__["default"],
        _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_6__["default"],
        _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_7__["default"],
        _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_8__["default"],
        _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_9__["default"],
        _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_10__["default"],
        _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_11__["default"],
        _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_12__["default"],
        _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_13__["default"],
        _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_14__["default"],
        _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_15__["default"],
        _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_16__["default"],
        _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_17__["default"],
        _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_18__["default"],
        _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_19__["default"],
        _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_20__["default"],
        _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_21__["default"],
    ]

    static option = {
        isDefaultStyle : true
    }
    
    constructor(){
        super(ChattingInfoLine.tools, ChattingInfoLine.option);
        super.contentEditable = false;
        super.placeholder = ''
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class ChattingInfo{
    
    #memory = {}

    #page = 0;
	#size = 10;

    #element = Object.assign(document.createElement('div'), {
        id: 'chatting_info_wrapper',
        innerHTML: `
            <div class="chatting_info_container" data-bind_name="chattingInfoContainer">
                <ul class="chatting_content_list list_scroll list_scroll-y" data-bind_name="chattingContentList">

                </ul>
                <div class="toolbar" style="position: fixed;" data-bind_name="toolbar"></div>
            </div>
        `
    })
    
    likeAndScrapWrapper;
    
    #totalPages

    #lastVisibleTarget;
    #firstVisibleTarget;

    #lastPageNumber;
    #firstPageNumber;

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if ( ! entry.isIntersecting){
                return;
            }
            //console.log(entry.target);
            console.log(this.#lastVisibleTarget);
            //console.log(this.#firstVisibleTarget);
            //this.#lastItemVisibleObserver.disconnect();
            //return ;
            if(entry.target == this.#lastVisibleTarget){
                this.#page = this.#lastPageNumber;
                if(this.#lastVisibleTarget) this.#lastItemVisibleObserver.unobserve(this.#lastVisibleTarget);
            }else{ //if(entry.target == this.#firstVisibleTarget){
                this.#page = this.#firstPageNumber;
                if(this.#firstVisibleTarget) this.#lastItemVisibleObserver.unobserve(this.#firstVisibleTarget); 
            }
            let promise;
            let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId]?.[this.#page] || {});
            
            if(memory && memory.length != 0){
                promise = new Promise(res => {
                    setTimeout(()=>{ 
                        res(
                            memory
                            .sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils))
                        )
                    },50);
                })
            }else{
                promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId)
                    .then(async data=> 
                        this.createPage(data).then(liList => {
                            console.log(this.#page,liList);
                            this.#totalPages = data.totalPages;        
                            if(this.#page >= data.totalPages){
                                // 마지막 페이지인 경우 - 가장 마지막 채팅에는 날짜가 붙지 않기에 
                                // 날짜 관련 함수 코드 실행
                                let date = new Date(Number(this.elementMap.chattingContentList.lastChild.dataset.create_mils));
                                let timeText; 
                                if(date.toDateString() == new Date().toDateString()){
                                    timeText = 'to day'
                                }else{
                                    timeText = date.toLocaleDateString(undefined, {
                                        weekday: 'short',
                                        month: 'short',
                                        day: '2-digit',
                                        formatMatcher: 'best fit'
                                    })
                                }
                                this.#createTimeGroupingElement(this.elementMap.chattingContentList.lastChild, timeText)
                            }
                            return liList;
                        })
                    )
            }
            
            promise.then(liList => {
                if(liList.length == 0){
                    return;
                }
                
                this.#liList = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] || {})
                    //.flatMap(e=>Object.values(e))
                    .sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils))
                this.#elementMap.chattingContentList.replaceChildren(...this.#liList);
                
                let isConnectedAwait = setInterval(()=>{
                    if( ! this.#liList[0]){
                        clearInterval(isConnectedAwait);
                        return;
                    }
                    if( ! this.#liList[0].isConnected){
                        return;
                    }

                    this.#lastVisibleTarget = this.#liList.at(-1);
                    this.#firstVisibleTarget = this.#liList[0];
                    if(this.#lastVisibleTarget){
                        this.#lastItemVisibleObserver.observe(this.#lastVisibleTarget);
                        this.#lastPageNumber += 1 //this.#page <= 0 ? 1 : this.#page + 1
                    }  
                    if(this.#firstVisibleTarget){
                        this.#lastItemVisibleObserver.observe(this.#firstVisibleTarget);
                        this.#firstPageNumber = this.#firstPageNumber <= 0 ? -1 : this.#firstPageNumber - 1 // this.#page <= 0 ? -1: this.#page - 1
                    }

                    entry.target.scrollIntoView({ behavior: "instant", block: "start", inline: "nearest" });
                    clearInterval(isConnectedAwait);
                },50);

                //let visibilityLastItem = [...this.#elementMap.chattingContentList.querySelectorAll('[data-visibility="v"]')].at(-1);
                //visibilityLastItem?.scrollIntoView({ behavior: "instant", block: "start", inline: "nearest" });
                
            });

		})
	}, {
		threshold: 0.1,
		root: document
	});

    #elementMap = (()=>{
        return [...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
            total[element.dataset.bind_name] = element;
            return total;
        }, {})
    })();

    #roomId

    #liList = [];

    #second = 1000;
    #minute = this.#second * 60;
    #hour = this.#minute * 60;
    #day = this.#hour * 24;

    #lastLiItem;

    #emoticonBox = new _handler_editor_component_EmoticonBox__WEBPACK_IMPORTED_MODULE_25__["default"]();

    #lastEmoticonBoxTarget;

    /*
    this.timerElement.querySelector('.hour').textContent = `${Math.floor( ms / this.hour )}`.padStart(2,'0');
    this.timerElement.querySelector('.minute').textContent = `${Math.floor( ms % this.hour / this.minute )}`.padStart(2,'0');
    this.timerElement.querySelector('.seconds').textContent = `${Math.floor( ms % this.minute / this.second )}`.padStart(2,'0');
    this.timerElement.querySelector('.millisecond').textContent = `${ ms % this.second }`.padStart(2,'0').slice(0, 2);
    */
    constructor(){

        _handler_chatting_ChattingHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addChattingEventListener = {
            name: 'chattingInfo',
            callBack: (chattingData) => {
                this.createItemElement(chattingData).then(liElement => {

                    this.#addMemory(liElement, chattingData.workspaceId, chattingData.roomId, chattingData.id)
                    if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId != chattingData.roomId){
                        setTimeout(()=>{
                            window.myAPI.notifications({
                                fullName: liElement.dataset.full_name, 
                                content: liElement.__editor.innerText.split('\n'),
                                workspaceId: liElement.dataset.workspace_id,
                                roomId: liElement.dataset.room_id
                            });
                            new Promise(resolve => {
                                let list = [
                                    ..._component_room_room_item_RoomList__WEBPACK_IMPORTED_MODULE_27__["default"].liList || [],
                                    ..._component_room_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_28__["default"].liList || [],
                                    ..._component_room_room_item_RoomMessengerList__WEBPACK_IMPORTED_MODULE_29__["default"].liList || []
                                ]
                                list.flatMap(e=>e).filter(e=>e.dataset.room_id == chattingData.roomId).forEach(e=>{
                                    if( ! e.isConnected){
                                        console.log(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomMessengerListMemory);
                                        return;
                                    }
                                    
                                    let notificationsIcon
                                    if( ! e.__notificationsIcon){
                                        notificationsIcon = new _component_NotificationsIcon__WEBPACK_IMPORTED_MODULE_26__["default"]({target: e, positionOption : _component_NotificationsIcon__WEBPACK_IMPORTED_MODULE_26__["default"].PositionOption.RIGHT_CENTER})
                                        e.__notificationsIcon = notificationsIcon;
                                    }else{
                                        notificationsIcon = e.__notificationsIcon;
                                    }
                                    notificationsIcon.addCount(liElement, chattingData.id);
                                    let liElementObserver = new IntersectionObserver((entries, observer) => {
                                        entries.forEach(entry =>{
                                            if (entry.isIntersecting){
                                                notificationsIcon.deleteCount(chattingData.id);
                                                liElementObserver.disconnect();
                                            }
                                        })
                                    }, {
                                        threshold: 0.01,
                                        root: this.#element
                                    });
                                    liElementObserver.observe(liElement);
                                });
                                resolve();
                            }) 
                        },1000)
                        return;
                    }
                    let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] || {});
                    if(memory && memory.length != 0){
                        this.#page = memory.length - 1;
                        this.#liList = memory
                            .sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils))
                        this.#elementMap.chattingContentList.replaceChildren(...this.#liList);
                        let isConnectedAwait = setInterval(()=>{
                            if( ! this.#liList[0]){
                                clearInterval(isConnectedAwait);
                                return;
                            }
                            if( ! this.#liList[0].isConnected){
                                return;
                            }
                            this.#elementMap.chattingContentList.scrollBy(undefined, 
                                this.#elementMap.chattingContentList.scrollHeight
                            )
                            clearInterval(isConnectedAwait);

                            Promise.all(this.#liList.map(async (e,i)=>{
                                if(i == 0 || i == this.#liList.length - 1)return;
                                return this.#processingTimeGrouping(e, this.#liList[i - 1])    
                            }))
                            //this.#processingTimeGrouping(this.#liList[1], this.#liList[0])
                            //.then(()=>this.#processingTimeGrouping(this.#liList[0], this.#liList[1]))
                            .then(result => {
                                //if(result){
                                //    return;
                                //}
                                let date = new Date(Number(this.elementMap.chattingContentList.lastChild.dataset.create_mils));
                                let timeText; 
                                if(date.toDateString() == new Date().toDateString()){
                                    timeText = 'to day'
                                }else{
                                    timeText = date.toLocaleDateString(undefined, {
                                        weekday: 'short',
                                        month: 'short',
                                        day: '2-digit',
                                        formatMatcher: 'best fit'
                                    })
                                }
                                this.#createTimeGroupingElement(this.elementMap.chattingContentList.lastChild, timeText)
                            });
                        },50);
                        
                    }
                });
            }
        }
        let firstOpenCheckMapper = {};
        _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].addRoomIdChangeListener = {
            name: 'chattingInfo',
            callBack: () => {
                this.reset();
                let promise;
                let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] || {});
                let isMemory = memory && memory.length != 0 && firstOpenCheckMapper[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId];
                if( isMemory ){
                    this.#page = memory.length - 1;
                    promise = Promise.resolve(
                        memory
                        .sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils))
                    );
                }else{
                    promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId)
                    .then(async data=> 
                        this.createPage(data)
                        .then(liList => {
                            if(this.#page >= data?.totalPages){
                                //this.#lastItemVisibleObserver.disconnect();
                                if(this.#lastVisibleTarget) this.#lastItemVisibleObserver.unobserve(this.#lastVisibleTarget);
                                // 마지막 페이지인 경우 - 가장 마지막 채팅에는 날짜가 붙지 않기에 
                                // 날짜 관련 함수 코드 실행
                                this.#processingTimeGrouping(
                                    this.#liList.at(-2), 
                                    this.#liList.at(-1)
                                ); 
                            }else if(this.#page <= 0){
                                //this.#lastItemVisibleObserver.disconnect();
                                if(this.#firstVisibleTarget) this.#lastItemVisibleObserver.unobserve(this.#firstVisibleTarget);
                                // 마지막 페이지인 경우 - 가장 마지막 채팅에는 날짜가 붙지 않기에 
                                // 날짜 관련 함수 코드 실행
                                this.#processingTimeGrouping(
                                    this.#liList[1], 
                                    this.#liList[0]
                                );
                            }
                            return liList;
                        })
                    )
                }

                promise.then(liList => {

                    if(this.#lastVisibleTarget?.dataset.visibility == 'v') this.#lastItemVisibleObserver.unobserve(this.#lastVisibleTarget)
                    if(this.#firstVisibleTarget?.dataset.visibility == 'v') this.#lastItemVisibleObserver.unobserve(this.#firstVisibleTarget)    

                    if(liList.length == 0){
                        //this.#lastItemVisibleObserver.disconnect();
                        return;
                    }

                    if( ! firstOpenCheckMapper[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId]){
                        this.#liList.push(...liList, ...memory);
                        this.#liList = Object.values(this.#liList.reduce((total, item)=>{
                            total[item.dataset.id] = item;
                            return total;
                        }, {}))
                        .sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils))
                    }else{
                        this.#liList.push(...liList);
                    }
                  
                    this.#elementMap.chattingContentList.replaceChildren(...this.#liList);
                    let isConnectedAwait = setInterval(()=>{
                        if( ! this.#liList[0]){
                            clearInterval(isConnectedAwait);
                            return;
                        }
                        if( ! this.#liList[0].isConnected){
                            return;
                        }
                        if(isMemory){
                            Promise.all(this.#liList.map(async (e,i)=>{
                                if(i == 0 || i == this.#liList.length - 1)return;
                                return this.#processingTimeGrouping(e, this.#liList[i - 1])    
                            }))
                        }
                        this.#elementMap.chattingContentList.scrollBy(undefined, 
                            this.#elementMap.chattingContentList.scrollHeight
                        )

                        this.#lastVisibleTarget = this.#liList.at(-1);
                        this.#firstVisibleTarget = this.#liList[0];
                        if(this.#lastVisibleTarget){
                            this.#lastItemVisibleObserver.observe(this.#lastVisibleTarget);
                            this.#lastPageNumber = this.#page <= 0 ? 1 : this.#page + 1
                        }  
                        if(this.#firstVisibleTarget){
                            this.#lastItemVisibleObserver.observe(this.#firstVisibleTarget);
                            this.#firstPageNumber = this.#page <= 0 ? -1 : this.#page - 1
                        }

                        clearInterval(isConnectedAwait);
                    },50);
                    firstOpenCheckMapper[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] = '';
                })

            },
            runTheFirst: false
        }
        window.myAPI.event.electronEventTrigger.addElectronEventListener('chattingReactionAccept', event => {
            let {content} = event
            
            let memory = Object.values(this.#memory[content.workspaceId]?.[content.roomId] || {});
            let targetLi = memory.find(e=>e.dataset.id == content.chattingId) //memory.find(e=>e[content.chattingId])//?.[content.chattingId];
            if( ! targetLi || ! targetLi.isConnected){
                targetLi = this.#liList.find(e=>e.dataset.id == content.chattingId);
                if(! targetLi){
                    return
                }
            }

            if(content.emoticonType == 'CODE'){
                let ul = targetLi.querySelector('.chatting_reaction_list');
                let duplicationLi = ul.querySelector(`[data-emoticon="${content.emoticon}"]`);
                if(duplicationLi && content.count == 0){
                    duplicationLi.remove();
                    return;
                }else if(duplicationLi){
                    duplicationLi.dataset.count = content.count;
                    duplicationLi.querySelector('.chatting_reaction_count').textContent = content.count;
                }else{
                    let emoticonItem = this.#createReactionEmoticon(content);
                    ul.append(emoticonItem);
                }
            }
        })
        window.myAPI.event.electronEventTrigger.addElectronEventListener('chattingDeleteAccept', event => {
            let {content} = event
            console.log('delete accept content', content);
            this.reset();
            console.log(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId])
            delete this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId][content.chattingId];
            if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId == content.roomId){
                let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] || {});
                //if( memory && memory.length != 0 && firstOpenCheckMapper[roomHandler.roomId] ){
                Promise.all(this.#liList.map(async (e,i)=>{
                    if(i == 0 || i == this.#liList.length - 1)return;
                    return this.#processingTimeGrouping(e, this.#liList[i - 1])    
                }))
                this.#page = memory.length - 1;
                this.#liList = memory.sort((a,b) => Number(b.dataset.create_mils) - Number(a.dataset.create_mils));
                this.#elementMap.chattingContentList.replaceChildren(...this.#liList);
                //}
            }
            
        })
        
        let toolList = Object.values(ChattingInfoLine.tools).map(e=>e.toolHandler.toolButton);

        document.addEventListener('selectionchange', event => {
            if(document.activeElement.constructor != ChattingInfoLine){
                return;
            }
            let selection = window.getSelection();
            if (selection.rangeCount == 0){
                return;
            }
            
            if( ! selection.isCollapsed){
                this.#elementMap.chattingInfoContainer.append(this.#elementMap.toolbar);
                this.#elementMap.toolbar.replaceChildren(...toolList);
                _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect())
            }else{
                this.#elementMap.toolbar.remove();
            }
        })
        this.#elementMap.chattingInfoContainer.addEventListener("scroll", () => {
			if(this.#elementMap.toolbar.childElementCount == 0)return;
			_root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect());
		});
        window.addEventListener('resize', (event) => {
			if(this.#elementMap.toolbar.childElementCount == 0)return;
            _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect());
		})

        this.#elementMap.chattingContentList.addEventListener("scroll", () => {
			if(this.#emoticonBox.emoticonBox.isConnected && this.#lastEmoticonBoxTarget){
				_root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#emoticonBox.emoticonBox, this.#lastEmoticonBoxTarget);
			}
		});
        window.addEventListener('resize', (event) => {
			if(this.#emoticonBox.emoticonBox.isConnected && this.#lastEmoticonBoxTarget){
				_root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#emoticonBox.emoticonBox, this.#lastEmoticonBoxTarget);
			}
		})
    }

    callData(page, size, workspaceId, roomId, chatting){
		if(page < 0){
           return Promise.resolve({});
        }
        let searchPromise;

		if(chatting && chatting != ''){
			searchPromise = window.myAPI.chatting.searchChattingList({
				page, size, workspaceId, roomId, chatting
			})
		}else{
			searchPromise = window.myAPI.chatting.searchChattingList({
				page, size, workspaceId, roomId, chatting
			})
		}
		return searchPromise.then((result = {}) =>{
			console.log(result)
			return result.data || {};
		});
	}

    createPage(data, chatting = ''){
        return new Promise(resolve => {
            let {content = []} = data || {};
            if(content.length == 0){
                resolve(content);
                return;
            }
            let prevItemPromise;
            return Promise.all(content.map(item => {
                prevItemPromise = this.createItemElement(item, prevItemPromise);
                return prevItemPromise;
            })).then((liList = [])=>{
                if(liList.length == 0){
                    resolve(liList);
                }
               resolve(liList);
            });
        })
    }

    createItemElement(data, prevItemPromise){
        if( ! data){
            return;
        }
        let {
            id,
            roomId,
            workspaceId,
            chatting,
            createAt,
            updateAt,
            createMils,
            updateMils,
            fullName,
            accountName
        } = data;
        return new Promise(async resolve => {
            let li = Object.assign(document.createElement('li'), {
            });
            let descriptionWrap = Object.assign(document.createElement('div'),{
                className: 'chatting_content_description_wrapper',
                innerHTML: `
                    <div class="chatting_content_description_profile">
                        <img src="${(await _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].getProjectPathPromise())}image/user.png"/>
                    </div>
                    <div class="chatting_container">
                        <div class="chatting_content_description_name_wrapper">
                            <div class="chatting_content_description_name_container">
                                <div class="chatting_content_description_name">${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.accountName == accountName ? '나' : fullName}</div>
                                <div class="chatting_content_description_time">${this.#processingTimeText(createMils)}</div>
                            </div>
                            <div class="chatting_content_description_option_container">
                                <button class="chatting_hover_on_off_button">
                                    <svg width="1rem" height="1rem" style="zoom:125%;color: #bfbfbf;" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M14 6C14 7.10457 13.1046 8 12 8C10.8954 8 10 7.10457 10 6C10 4.89543 10.8954 4 12 4C13.1046 4 14 4.89543 14 6Z" fill="currentColor"/>
                                        <path d="M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z" fill="currentColor"/>
                                        <path d="M14 18C14 19.1046 13.1046 20 12 20C10.8954 20 10 19.1046 10 18C10 16.8954 10.8954 16 12 16C13.1046 16 14 16.8954 14 18Z" fill="currentColor"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <ul class="chatting_reaction_list">
                        </ul>
                    </div>
                `
            });
            li.append(descriptionWrap);
            let content = new ChattingInfoLine();
            content.parseLowDoseJSON(chatting).then((e)=>{
                resolve(li)
            });
            descriptionWrap.querySelector('.chatting_container .chatting_content_description_name_wrapper').after(content);
            delete data.chatting
            
            if(data.reaction && data.reaction != ''){
                // createAt - 단순 솔팅용으로, mils가 아니기 때문에 시차 이슈 있을 수 있음 (단순 솔트로서 이슈 없을 뿐)
                let reactionList = JSON.parse(data.reaction).sort((a,b) => new Date(a.createAt).getTime() - new Date(b.createAt).getTime()).map(e=> {
                    e.chattingId = data.id;
                    return this.#createReactionEmoticon(e)
                })
                descriptionWrap.querySelector('.chatting_reaction_list').replaceChildren(...reactionList);
            }
            delete data.reaction;

            li.__editor = content;
            this.#addMemory(li, workspaceId, roomId, id);
            this.#lastLiItem = li;
            
            _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].jsonToSaveElementDataset(data, li).then(() => {
                this.#createDescription(li, descriptionWrap);
                if( ! prevItemPromise && this.#lastLiItem){
                    this.#processingTimeGrouping(li, this.#lastLiItem);
                }else{
                   prevItemPromise?.then(prevItem => this.#processingTimeGrouping(li, prevItem));
                }
            });


            //resolve(li);
        })
    }

    #createDescription(li, descriptionWrap){
        let editor = li.__editor;
        new Promise(resolve=> {
            let hoverButtonWrapper = Object.assign(document.createElement('div'),{
                className: 'chatting_hover_wrapper',
            });
            let recommendEmojiContainer = Object.assign(document.createElement('div'),{
                className: 'chatting_hover_recommend_emoticon_container'
            })
            let buttonContainer = Object.assign(document.createElement('div'), {
                className: 'chatting_hover_button_container'
            })
            let anotherEmoji = Object.assign(document.createElement('button'), {
                className: 'chatting_hover_another_emoticon',
                innerHTML: `
                <svg class="css-gg-smile" style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 13H14C14 14.1046 13.1046 15 12 15C10.8954 15 10 14.1046 10 13H8C8 15.2091 9.79086 17 12 17C14.2091 17 16 15.2091 16 13Z" fill="currentColor"/>
                    <path d="M10 10C10 10.5523 9.55228 11 9 11C8.44772 11 8 10.5523 8 10C8 9.44771 8.44772 9 9 9C9.55228 9 10 9.44771 10 10Z" fill="currentColor"/>
                    <path d="M15 11C15.5523 11 16 10.5523 16 10C16 9.44771 15.5523 9 15 9C14.4477 9 14 9.44771 14 10C14 10.5523 14.4477 11 15 11Z" fill="currentColor"/>
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z" fill="currentColor"/>
                </svg>
                <svg class="css-gg-add" style="zoom:125%;" width="0.5rem" height="0.5rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z" fill="currentColor"/>
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M13 7C13 6.44772 12.5523 6 12 6C11.4477 6 11 6.44772 11 7V11H7C6.44772 11 6 11.4477 6 12C6 12.5523 6.44772 13 7 13H11V17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17V13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11H13V7Z" fill="currentColor"/>
                </svg>
                `,
                onclick : (event) => {
                    anotherEmoji.toggleAttribute('open');
                    if(anotherEmoji.hasAttribute('open')){
                        if(this.#lastEmoticonBoxTarget != anotherEmoji){
                            this.#lastEmoticonBoxTarget?.toggleAttribute('open');
                            this.#lastEmoticonBoxTarget = anotherEmoji;
                        }
                        this.#emoticonBox.open(hoverButtonWrapper);
                        _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].processingElementPosition(this.#emoticonBox.emoticonBox, anotherEmoji)
                        if( ! this.#emoticonBox.emoticonBox.querySelector('.empty_padding')){
                            let emptyPadding = Object.assign(document.createElement('div'), {
                                className : 'empty_padding'
                            })
                            Object.assign(emptyPadding.style, {
                                height: '1.4vh',
                                width: '100%',
                                background: '#ffffff00'
                            })
                            this.#emoticonBox.emoticonBox.append(emptyPadding)
                        }
                        this.#emoticonBox.applyCallback = (emoticonObject) => {
                            this.#emoticonBox.close();
                            anotherEmoji.removeAttribute('open');
                            this.#lastEmoticonBoxTarget?.removeAttribute('open');
                            window.myAPI.emoticon.createEmotionReaction({
                                emoticon: emoticonObject.emoticon, description: emoticonObject.description,
                                emoticonType: 'CODE', groupTitle: emoticonObject.groupTitle,
                                subgroupTitle: emoticonObject.subgroupTitle, chattingId: li.dataset.id,
                                roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId, workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId
                            }).then(result => {
                                console.log(result);
                            })
                        }
                    }else{
                        this.#emoticonBox.close();
                        this.#lastEmoticonBoxTarget = undefined;
                    }
                }
            })
            let prevText;
            let isScriptBlur = false;
            let updateButton = Object.assign(document.createElement('button'), {
                className: 'css-gg-pen',
                innerHTML: `
                <svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path
					fill-rule="evenodd"
					clip-rule="evenodd"
					d="M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z"
					fill="currentColor"
					/>
					<path
					d="M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z"
					fill="currentColor"
					/>
				</svg>
                `,
                onclick : (event) => {
                    editor.contentEditable = true;
                    this.#emoticonBox.close();
                    anotherEmoji.removeAttribute('open');
                    hoverButtonWrapper.remove();
                    window.getSelection().setPosition(editor, editor.childElementCount)
                }
            })
            editor.onfocus = (event) => {
                prevText = editor.innerHTML;
            }
            editor.onblur = (event) => {
                if( ! isScriptBlur && (editor.matches(':hover') || this.#elementMap.toolbar.matches(':hover') || document.activeElement == editor)){
                    return;
                }
                if(isScriptBlur){
                    isScriptBlur = ! isScriptBlur;
                }
                editor.contentEditable = false;
                if( ! event.relatedTarget?.hasAttribute('data-tool_status')){
                    this.#elementMap.toolbar.remove();
                }
                if(prevText == editor.innerHTML){
                    return;
                }
                prevText = editor.innerHTML;
                this.#sendChatting(li);
            }
            editor.onkeydown = (event) => {
                let {altKey, ctrlKey, shiftKey, key} = event;
                if(key == 'Enter' && (altKey || ctrlKey || shiftKey)){
                    event.preventDefault();
                    let LineBreakMode;
                    if(altKey){
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_4__["default"].LineBreakMode.NEXT_LINE_FIRST
                    }else if(ctrlKey){
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_4__["default"].LineBreakMode.NEXT_LINE_LAST
                    }else{
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_4__["default"].LineBreakMode.NO_CHANGE
                    }
                    editor.lineBreak(LineBreakMode);
                }else if(key == 'Enter' && editor.innerText.replaceAll('\n', '') != ''){
                    event.preventDefault();
                    isScriptBlur = true;
                    editor.blur();
                }
            }
            let deleteButton = Object.assign(document.createElement('button'),{
                className : `css-gg-trash`,
                innerHTML: `
                <svg style="zoom:125%" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M17 5V4C17 2.89543 16.1046 2 15 2H9C7.89543 2 7 2.89543 7 4V5H4C3.44772 5 3 5.44772 3 6C3 6.55228 3.44772 7 4 7H5V18C5 19.6569 6.34315 21 8 21H16C17.6569 21 19 19.6569 19 18V7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H17ZM15 4H9V5H15V4ZM17 7H7V18C7 18.5523 7.44772 19 8 19H16C16.5523 19 17 18.5523 17 18V7Z"
                        fill="currentColor"
                    />
                    <path d="M9 9H11V17H9V9Z" fill="currentColor" />
                    <path d="M13 9H15V17H13V9Z" fill="currentColor" />
                </svg>
                `,
                onclick : (event) => {
                    window.myAPI.chatting.deleteChatting({
                        id: li.dataset.id,
                        workspaceId : li.dataset.workspace_id,
                        roomId: li.dataset.room_id
                    }).then((result)=>{
                        console.log('deleteChatting', result);
                    })
                }
            })
            let replyButton = Object.assign(document.createElement('button'),{
                className : `css-gg-trash`,
                innerHTML: `
                <svg style="zoom:125%" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M17.1495 13.4005C18.2541 13.4005 19.1495 12.5051 19.1495 11.4005V3.40051H21.1495V11.4005C21.1495 13.6097 19.3587 15.4005 17.1495 15.4005H6.84398L10.6286 19.1852L9.21443 20.5994L2.85046 14.2354L9.21443 7.87146L10.6286 9.28567L6.5138 13.4005H17.1495Z"
                        fill="currentColor"
                    />
                </svg>
                `
            })
            recommendEmojiContainer.append(..._handler_editor_module_emoticon__WEBPACK_IMPORTED_MODULE_24__.defaultEmoticon.map(e=>{
                let button = document.createElement('button');
                button.textContent = e.emoticon;
                button.onclick = () => {
                    window.myAPI.emoticon.createEmotionReaction({
                        emoticon: e.emoticon,
                        description: e.description,
                        emoticonType: 'CODE',
                        groupTitle: e.groupTitle,
                        subgroupTitle: e.subgroupTitle,
                        chattingId: li.dataset.id,
                        roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
                        workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId
                    }).then(result => {
                        console.log(result);
                    })
                }
                return button;
            }))
            hoverButtonWrapper.append(recommendEmojiContainer, buttonContainer);
            if(li.dataset.is_my_chatting == 'true'){
                buttonContainer.append(anotherEmoji, deleteButton, updateButton, replyButton);
            }else{
                buttonContainer.append(anotherEmoji, replyButton);
            }
            descriptionWrap.onmouseenter = (event) => {
                if(editor.contentEditable == 'true'){
                    return;
                }
                descriptionWrap.append(hoverButtonWrapper);
            }
            let emoticonBoxSearch = this.#emoticonBox.emoticonBox.querySelector('#emoticon-box-search');
            descriptionWrap.onmouseleave = (event) => {
                if(document.activeElement == emoticonBoxSearch || editor.contentEditable == 'true'){
                    return;
                }
                this.#emoticonBox.close();
                anotherEmoji.removeAttribute('open');
                hoverButtonWrapper.remove();
            }
            descriptionWrap.querySelector('.chatting_hover_on_off_button').onclick = () => {
                if(hoverButtonWrapper.isConnected){
                    hoverButtonWrapper.remove();
                }else{
                    descriptionWrap.append(hoverButtonWrapper);
                }
            }
            resolve();
        })
    }
    /**
     * 
     * @param {ChattingInfoLine} editor 
     * @param {Object} param
     */
    async #sendChatting(li){
        let editor = li.__editor;
        let promiseList = [];
        editor.getLowDoseJSON(editor, {
            afterCallback : (json) => {
                if(json.tagName != _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_17__["default"].toolHandler.defaultClass && 
                    json.tagName != _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_18__["default"].toolHandler.defaultClass &&
                    json.tagName != _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_19__["default"].toolHandler.defaultClass
                ){
                    return;
                }else if(json.data.hasOwnProperty('is_upload_end')){
                    return;
                }
                let node = json.node;
                let file = node.selectedFile;
                json.data.is_loading = '';
                let fileType;
                if(json.tagName == _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_17__["default"].toolHandler.defaultClass){
                    fileType = 'IMAGE';
                }else if(json.tagName == _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_18__["default"].toolHandler.defaultClass){
                    fileType = 'VIDEO';
                }else {
                    fileType = 'FILE';
                }
                promiseList.push(new Promise(async resolve => {

                    let {name, size, lastModified, contentType, newFileName} = await _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].underbarNameToCamelName(json.data);
                    let putSignData = `${li.dataset.roomId}:${li.dataset.workspaceId}:${name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.accountName}`;
                    let isUpload = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, putSignData, {newFileName, fileType, uploadType: 'CHATTING'})
                    .then( (result) => {
                        if(! result){
                            return;
                        }
                        let {data, encDncKeyPair} = result;

                        json.data.new_file_name = data.newFileName;

                        return Promise.all([
                            _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionKey).then( async (buffer) => {
                                return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.secretAlgorithm)
                                    .then(buf=>String.fromCharCode(...new Uint8Array(buf)))
                            }),
                            _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionMd).then( async (buffer) => {
                                return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.secretAlgorithm)
                                    .then(buf=>String.fromCharCode(...new Uint8Array(buf)))
                            })
                        ]).then( async ([k,m]) => {
                            /*let base64 = json.data.base64;
                            if(! base64){
                                let blob = await fetch(json.data.url).then(res=>res.blob())
                                base64 = await new Promise(resolve => {
                                    const reader = new FileReader();
                                    reader.readAsDataURL(blob);
                                    reader.onloadend = () => {
                                        resolve(reader.result);
                                    }
                                });
                            }*/
                            let res = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.fetchPutObject(data.presignedUrl, k, m, file.files[0]);
                            if( ! (res.status == 200 || res.status == 201) ){
                                return;
                            }
                            return true;
                        })
                    })
                    if( ! isUpload){
                        resolve();
                        return;
                    }
                    let getSignData = `${li.dataset.roomId}:${li.dataset.workspaceId}:${json.data.new_file_name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.accountName}`;
                    
                    _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_23__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, getSignData, {fileType, uploadType: 'CHATTING'})
                    .then( (result) => {
                        if(! result){
                            return;
                        }
                        let {data, encDncKeyPair} = result;

                        json.data.url = data.presignedUrl;
                        delete json.data.base64
                        json.data.upload_type = 'CHATTING';
                        resolve(json);
                    })
                }))
            }
        }).then(jsonList => {

            window.myAPI.chatting.sendChatting({
                id: li.dataset.id,
                workspaceId: li.dataset.workspace_id,
                roomId: li.dataset.room_id,
                chatting: JSON.stringify(jsonList)
            }).then(res=>{
                console.log(res);
                let {data} = res
                this.innerText = '';
                Promise.all(promiseList).then((fileTargetList) => {
                    if(fileTargetList.length == 0){
                        //window.getSelection().setPosition(this, 1)
                        return;
                    }
                    fileTargetList.forEach(e=>{
                        delete e.data.is_loading
                        e.data.is_upload_end = '';
                    });
                    window.myAPI.chatting.sendChatting({
                        id: data.id,
                        workspaceId: li.dataset.workspace_id,
                        roomId: li.dataset.room_id,
                        chatting: JSON.stringify(jsonList)
                    }).then(res=>{
                        //window.getSelection().setPosition(this, 1)
                    });
                })
            });
            
        })
    }

    #createReactionEmoticon(emoticonData){
        let targetEmoticonObject = _handler_editor_module_emoticon__WEBPACK_IMPORTED_MODULE_24__.emoticon[emoticonData.groupTitle][emoticonData.subgroupTitle].find(e=>e.emoticon == emoticonData.emoticon);
        let li = Object.assign(document.createElement('li'),{
            className: 'chatting_reaction_item'
        });
        _root_js_common__WEBPACK_IMPORTED_MODULE_22__["default"].jsonToSaveElementDataset(emoticonData, li);
        let button = Object.assign(document.createElement('button'),{
            className: 'chatting_reaction_button',
            type: 'button',
            innerHTML: `
                <span class="chatting_reaction_emoticon">${emoticonData.emoticon}</span>
                <span class="chatting_reaction_count">${emoticonData.reactionList.length}</span>
            `,
            onclick: (event) => {
                window.myAPI.emoticon.createEmotionReaction({
                    emoticon: targetEmoticonObject.emoticon,
                    description: targetEmoticonObject.description,
                    emoticonType: 'CODE',
                    groupTitle: targetEmoticonObject.groupTitle,
                    subgroupTitle: targetEmoticonObject.subgroupTitle,
                    chattingId: emoticonData.chattingId,
                    roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
                    workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_2__["default"].workspaceId
                }).then(result => {
                    console.log(result);
                })
            }
        })
        li.append(button);
        return li;
    }

    #addMemory(data, workspaceId, roomId, id){
        /*if(data.dataset.room_id != roomHandler.roomId || data.dataset.workpsace_id != workspaceHandler.workspaceId){
            return;
        }*/

        if( ! this.#memory.hasOwnProperty(workspaceId)){
            this.#memory[workspaceId] = {};
        }
        if( ! this.#memory[workspaceId].hasOwnProperty(roomId)){
            this.#memory[workspaceId][roomId] = {} ;
        }
        /*if(Object.values(this.#memory[workspaceId][roomId]).some(e=>e[id])){
            return;
        }*/
        this.#memory[workspaceId][roomId][id] = data;
    }

    #processingTimeText(createMils){
        return new Date(createMils).toLocaleTimeString();
    }

    async #processingTimeGrouping(li, prevItem){
        return new Promise(resolve=>{
            if( ! prevItem || ! li){
                resolve();
                return;
            }
            let prevDate = new Date(Number(prevItem.dataset.create_mils));
            let prevDateYearMonth = new Date(Number(prevItem.dataset.create_mils));
            prevDateYearMonth.setHours(0,0,0,0);
            //let currentDate = new Date(Number(li.dataset.create_mils));
            let currentDateYearMonth = new Date(Number(li.dataset.create_mils));
            currentDateYearMonth.setHours(0,0,0,0);
            let diffMils = prevDateYearMonth.getTime() - currentDateYearMonth.getTime();

            //하루 이상 차이 나는 경우
            if(Math.abs(diffMils) < this.#day){
                resolve();
                return;
            }else if(prevItem.querySelector('.time_grouping')){
                resolve();
                return;
            }
            
            let timeText;

            
            if(prevDate.toDateString() == new Date().toDateString()){
                timeText = 'to day'
            }else{
                timeText = prevDate.toLocaleDateString(undefined, {
                    weekday: 'short',
                    month: 'short',
                    day: '2-digit',
                    formatMatcher: 'best fit'
                })
            }
            resolve(
                this.#createTimeGroupingElement(prevItem, timeText)
            );
        });
    }

    #createTimeGroupingElement(target, timeText){
        if(target.querySelector('.time_grouping')){
            return;
        }
        let timeGroupingElement = Object.assign(document.createElement('div'), {
            className: 'time_grouping',
            innerHTML: `
                <small class="time_grouping_text">${timeText}</small>
            `
        })
        target.prepend(timeGroupingElement)
        return timeGroupingElement;
    }

    reset(){
		this.#page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#elementMap.chattingContentList.replaceChildren();
	}

    set roomId(roomId){
        if( ! roomId){
            console.error('roomId is undefined');
            return;
        }
        this.#roomId = roomId;
    }

    get roomId(){
        return this.#roomId; 
    }

    get element(){
        return this.#element;
    }

    get elementMap(){
        return this.#elementMap;
    }

    get memory(){
        return this.#memory;
    }
});

/***/ }),

/***/ "./view/js/component/chatting/chatting_item/ChattingRegist.js":
/*!********************************************************************!*\
  !*** ./view/js/component/chatting/chatting_item/ChattingRegist.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/editor/FreeWillEditor */ "./view/js/handler/editor/FreeWillEditor.js");
/* harmony import */ var _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/editor/tools/Strong */ "./view/js/handler/editor/tools/Strong.js");
/* harmony import */ var _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/editor/tools/Color */ "./view/js/handler/editor/tools/Color.js");
/* harmony import */ var _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/editor/tools/Background */ "./view/js/handler/editor/tools/Background.js");
/* harmony import */ var _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @handler/editor/tools/Strikethrough */ "./view/js/handler/editor/tools/Strikethrough.js");
/* harmony import */ var _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @handler/editor/tools/Underline */ "./view/js/handler/editor/tools/Underline.js");
/* harmony import */ var _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @handler/editor/tools/FontFamily */ "./view/js/handler/editor/tools/FontFamily.js");
/* harmony import */ var _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @handler/editor/tools/Quote */ "./view/js/handler/editor/tools/Quote.js");
/* harmony import */ var _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @handler/editor/tools/NumericPoint */ "./view/js/handler/editor/tools/NumericPoint.js");
/* harmony import */ var _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @handler/editor/tools/BulletPoint */ "./view/js/handler/editor/tools/BulletPoint.js");
/* harmony import */ var _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @handler/editor/tools/Sort */ "./view/js/handler/editor/tools/Sort.js");
/* harmony import */ var _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @handler/editor/tools/FontSize */ "./view/js/handler/editor/tools/FontSize.js");
/* harmony import */ var _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @handler/editor/tools/Italic */ "./view/js/handler/editor/tools/Italic.js");
/* harmony import */ var _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @handler/editor/tools/Image */ "./view/js/handler/editor/tools/Image.js");
/* harmony import */ var _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @handler/editor/tools/Video */ "./view/js/handler/editor/tools/Video.js");
/* harmony import */ var _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @handler/editor/tools/Resources */ "./view/js/handler/editor/tools/Resources.js");
/* harmony import */ var _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @handler/editor/tools/Code */ "./view/js/handler/editor/tools/Code.js");
/* harmony import */ var _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @handler/editor/tools/Hyperlink */ "./view/js/handler/editor/tools/Hyperlink.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @handler/S3EncryptionUtil */ "./view/js/handler/S3EncryptionUtil.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");



























/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class ChattingRegist extends _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"]{
    static{
        window.customElements.define('free-will-editor', ChattingRegist);
    }
	static tools = [
        _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_1__["default"],
        _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_2__["default"],
        _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_3__["default"],
        _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_4__["default"],
        _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_5__["default"],
        _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_6__["default"],
        _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_7__["default"],
        _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_8__["default"],
        _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_9__["default"],
        _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_10__["default"],
        _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_11__["default"],
        _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_12__["default"],
        _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"],
        _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"],
		_handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__["default"],
        _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_16__["default"],
        _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_17__["default"],
    ]

    static option = {
        isDefaultStyle : true
    }

    #element = Object.assign(document.createElement('div'), {
        id: 'chatting_regist_wrapper',
        innerHTML: `
            <div class="chatting_regist_container" data-bind_name="chattingRegistContainer">
                <div class="toolbar" data-bind_name="toolbarWrapper">
                </div>
            </div>
        `
    })

    #elementMap = (()=>{
        return [...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
            total[element.dataset.bind_name] = element;
            return total;
        }, {})
    })();
	
    constructor(){

		super(ChattingRegist.tools, ChattingRegist.option);

		this.#elementMap.chattingRegistContainer.append(this);
		
		super.placeholder = 'Enter Your Text Here'
		super.spellcheck = true
		//super.dataset.visibility_not = ''
		this.#addEvent();

	}
	async #addEvent(){

		let toolList = Object.values(ChattingRegist.tools).map(e=>e.toolHandler.toolButton);
		let toolCloneList = toolList.map(e=>{
			let clone = e.cloneNode(true);
			clone.style.color = '#7c7c7c59';
			clone.style.textDecorationColor = '#40404069';
			return clone;
		});
		this.#elementMap.toolbarWrapper.append(...toolCloneList);
		this.onfocus = (event) => {
			this.#elementMap.toolbarWrapper.replaceChildren(...toolList);
		}

		this.onblur = (event) => {
			if(event.relatedTarget?.hasAttribute('data-tool_status')){
				return;
			}
			this.#elementMap.toolbarWrapper.replaceChildren(...toolCloneList);
		}

		let isEnter = false;
		this.onkeydown = (event) => {
			let {altKey, ctrlKey, shiftKey, key} = event;
			if(key == 'Enter' && (altKey || ctrlKey || shiftKey)){
				event.preventDefault();
				let LineBreakMode;
				if(altKey){
					LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NEXT_LINE_FIRST
				}else if(ctrlKey){
					LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NEXT_LINE_LAST
				}else{
					LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NO_CHANGE
				}
				this.lineBreak(LineBreakMode);
				return;
			}else if(key == 'Enter' && this.innerText.replaceAll('\n', '') != ''){
				event.preventDefault();
				if(isEnter){
					return;
				}
				isEnter = true;
				let promiseList = [];
				this.getLowDoseJSON(this, {
					afterCallback : (json) => {
						if(json.tagName != _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"].toolHandler.defaultClass && 
							json.tagName != _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"].toolHandler.defaultClass &&
							json.tagName != _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__["default"].toolHandler.defaultClass
						){
							return;
						}else if(json.data.hasOwnProperty('is_upload_end')){
							return;
						}
						let node = json.node;
						let file = node.selectedFile;
						json.data.is_loading = '';
						console.log(node, file);
						let fileType;
						if(json.tagName == _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"].toolHandler.defaultClass){
							fileType = 'IMAGE';
						}else if(json.tagName == _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"].toolHandler.defaultClass){
							fileType = 'VIDEO';
						}else {
							fileType = 'FILE';
						}
						promiseList.push(new Promise(async resolve => {

							let {name, size, lastModified, contentType, newFileName} = await _root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].underbarNameToCamelName(json.data);
							let putSignData = `${_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId}:${_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId}:${name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_22__.accountHandler.accountInfo.accountName}`;
							let isUpload = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, putSignData, {newFileName, fileType, uploadType: 'CHATTING'})
							.then( (result) => {
								if(! result){
									return;
								}
								let {data, encDncKeyPair} = result;

								json.data.new_file_name = data.newFileName;

								return Promise.all([
									_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionKey).then( async (buffer) => {
										return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.secretAlgorithm)
											.then(buf=>String.fromCharCode(...new Uint8Array(buf)))
									}),
									_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionMd).then( async (buffer) => {
										return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.secretAlgorithm)
											.then(buf=>String.fromCharCode(...new Uint8Array(buf)))
									})
								]).then( async ([k,m]) => {
									/*let base64 = json.data.base64;
									if(! base64){
										let blob = await fetch(json.data.url).then(res=>res.blob())
										base64 = await new Promise(resolve => {
											const reader = new FileReader();
											reader.readAsDataURL(blob);
											reader.onloadend = () => {
												resolve(reader.result);
											}
										});
									}*/
									let res = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.fetchPutObject(data.presignedUrl, k, m, file.files[0]);
									if( ! (res.status == 200 || res.status == 201) ){
										return;
									}
									return true;
								})
							})
							console.log(isUpload);
							if( ! isUpload){
								resolve();
								return;
							}
							let getSignData = `${_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId}:${_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId}:${json.data.new_file_name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_22__.accountHandler.accountInfo.accountName}`;
							
							_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_21__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, getSignData, {fileType, uploadType: 'CHATTING'})
							.then( (result) => {
								if(! result){
									return;
								}
								let {data, encDncKeyPair} = result;

								json.data.url = data.presignedUrl;
								delete json.data.base64
								json.data.upload_type = 'CHATTING';
								resolve(json);
							})
						}))
					}
				}).then(jsonList => {

					window.myAPI.chatting.sendChatting({
						workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId,
						roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId,
						chatting: JSON.stringify(jsonList)
					}).then(res=>{
						let {data} = res
						this.innerText = '';
						isEnter = false;
						Promise.all(promiseList).then((fileTargetList) => {
							console.log(fileTargetList);
							if(fileTargetList.length == 0){
								window.getSelection().setPosition(this, 1)
								return;
							}
							fileTargetList.forEach(e=>{
								delete e.data.is_loading
								e.data.is_upload_end = '';
							});
							window.myAPI.chatting.sendChatting({
								id: data.id,
								workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId,
								roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId,
								chatting: JSON.stringify(jsonList)
							}).then(res=>{
								window.getSelection().setPosition(this, 1)
							});
						})
					});
					
				})
			}
		}
	}

	#chattingLineBreak(){
		if(document.activeElement != this){
			return;
		}
		let range = window.getSelection().getRangeAt(0)

		//collapsed == false = 범위 선택 x
	}

    get element(){
        return this.#element;
    }

}());


/***/ }),

/***/ "./view/js/component/notice_board/NoticeBoardContainer.js":
/*!****************************************************************!*\
  !*** ./view/js/component/notice_board/NoticeBoardContainer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _notice_board_item_NoticeBoardList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notice_board_item/NoticeBoardList */ "./view/js/component/notice_board/notice_board_item/NoticeBoardList.js");
/* harmony import */ var _notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notice_board_item/NoticeBoardDetail */ "./view/js/component/notice_board/notice_board_item/NoticeBoardDetail.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class NoticeBoardContainer{

	#contentList;
	#wrap = (() => {
		let wrap = Object.assign(document.createElement('div'), {
			id: 'notice_board_wrapper',
			innerHTML: '<div class="content"></div>'
		});
		wrap.dataset.is_resize = false;
		wrap.dataset.grow = 0;
		return wrap 
	})();
	#container = (() => {
		let noticeBoardContainer = Object.assign(document.createElement('flex-layout'), {

		});
		noticeBoardContainer.dataset.direction = 'column';
		return noticeBoardContainer;
	})();
	constructor(){
		_notice_board_item_NoticeBoardList__WEBPACK_IMPORTED_MODULE_0__["default"].element.dataset.is_resize = true;
		_notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].element.dataset.is_resize = true;
		_notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].element.dataset.grow = 0;
		_notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].element.dataset.prev_grow = 1.5;

		this.#contentList = [_notice_board_item_NoticeBoardList__WEBPACK_IMPORTED_MODULE_0__["default"].element, _notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].element];
		
		this.#container.replaceChildren(...this.#contentList);
		this.#wrap.querySelector('.content').append(this.#container);
		let isFirstOpen = false;
		let prevRoomId; 
		console.log(prevRoomId, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId);
		this.#wrap._openEndCallback = (flexLayout) => {
			console.log(isFirstOpen, prevRoomId, _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId, prevRoomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId);
			if(isFirstOpen && (prevRoomId && _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId && prevRoomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId)){
				return;
			}
			console.log('start !!!');
			_notice_board_item_NoticeBoardList__WEBPACK_IMPORTED_MODULE_0__["default"].refresh();
			_notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].refresh();
			isFirstOpen = true;
			prevRoomId = _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId
			/*
			console.log(flexLayout);
			if( ! flexLayout.isVisible(this.#wrap)){
				noticeBoardList.refresh();
			}
			*/
		}

		this.#wrap._closeEndCallback = () => {
			this.#container.closeFlex(_notice_board_item_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_1__["default"].element)
		}
	}

	get container(){
		return this.#container;
	}
	get wrap(){
		return this.#wrap;
	}
});

/***/ }),

/***/ "./view/js/component/notice_board/notice_board_item/NoticeBoardDetail.js":
/*!*******************************************************************************!*\
  !*** ./view/js/component/notice_board/notice_board_item/NoticeBoardDetail.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/editor/FreeWillEditor */ "./view/js/handler/editor/FreeWillEditor.js");
/* harmony import */ var _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/editor/tools/Strong */ "./view/js/handler/editor/tools/Strong.js");
/* harmony import */ var _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/editor/tools/Color */ "./view/js/handler/editor/tools/Color.js");
/* harmony import */ var _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/editor/tools/Background */ "./view/js/handler/editor/tools/Background.js");
/* harmony import */ var _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @handler/editor/tools/Strikethrough */ "./view/js/handler/editor/tools/Strikethrough.js");
/* harmony import */ var _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @handler/editor/tools/Underline */ "./view/js/handler/editor/tools/Underline.js");
/* harmony import */ var _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @handler/editor/tools/FontFamily */ "./view/js/handler/editor/tools/FontFamily.js");
/* harmony import */ var _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @handler/editor/tools/Quote */ "./view/js/handler/editor/tools/Quote.js");
/* harmony import */ var _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @handler/editor/tools/NumericPoint */ "./view/js/handler/editor/tools/NumericPoint.js");
/* harmony import */ var _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @handler/editor/tools/BulletPoint */ "./view/js/handler/editor/tools/BulletPoint.js");
/* harmony import */ var _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @handler/editor/tools/Sort */ "./view/js/handler/editor/tools/Sort.js");
/* harmony import */ var _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @handler/editor/tools/FontSize */ "./view/js/handler/editor/tools/FontSize.js");
/* harmony import */ var _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @handler/editor/tools/Italic */ "./view/js/handler/editor/tools/Italic.js");
/* harmony import */ var _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @handler/editor/tools/Image */ "./view/js/handler/editor/tools/Image.js");
/* harmony import */ var _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @handler/editor/tools/Video */ "./view/js/handler/editor/tools/Video.js");
/* harmony import */ var _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @handler/editor/tools/Resources */ "./view/js/handler/editor/tools/Resources.js");
/* harmony import */ var _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @handler/editor/tools/Code */ "./view/js/handler/editor/tools/Code.js");
/* harmony import */ var _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @handler/editor/tools/Hyperlink */ "./view/js/handler/editor/tools/Hyperlink.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @handler/notice_board/NoticeBoardHandler */ "./view/js/handler/notice_board/NoticeBoardHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");
/* harmony import */ var _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @handler/S3EncryptionUtil */ "./view/js/handler/S3EncryptionUtil.js");




























class NoticeBoardLine extends _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"]{
    static{
        window.customElements.define('notice-board-line', NoticeBoardLine);
    }
	static tools = [
        _handler_editor_tools_Strong__WEBPACK_IMPORTED_MODULE_1__["default"],
        _handler_editor_tools_Color__WEBPACK_IMPORTED_MODULE_2__["default"],
        _handler_editor_tools_Background__WEBPACK_IMPORTED_MODULE_3__["default"],
        _handler_editor_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_4__["default"],
        _handler_editor_tools_Underline__WEBPACK_IMPORTED_MODULE_5__["default"],
        _handler_editor_tools_FontFamily__WEBPACK_IMPORTED_MODULE_6__["default"],
        _handler_editor_tools_Quote__WEBPACK_IMPORTED_MODULE_7__["default"],
        _handler_editor_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_8__["default"],
        _handler_editor_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_9__["default"],
        _handler_editor_tools_Sort__WEBPACK_IMPORTED_MODULE_10__["default"],
        _handler_editor_tools_FontSize__WEBPACK_IMPORTED_MODULE_11__["default"],
        _handler_editor_tools_Italic__WEBPACK_IMPORTED_MODULE_12__["default"],
        _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"],
        _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"],
        _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__["default"],
        _handler_editor_tools_Code__WEBPACK_IMPORTED_MODULE_16__["default"],
        _handler_editor_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_17__["default"],
    ]

    static option = {
        isDefaultStyle : true
    }
    
    parentLi;
    parentClass;
    constructor(parentLi, parentClass){

		super(NoticeBoardLine.tools, NoticeBoardLine.option);

        this.parentLi = parentLi;
        this.parentClass = parentClass;
        
        super.placeholder = ''
        super.spellcheck = true
    }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class NoticeBoardDetail{
	#memory = {}

    #element = Object.assign(document.createElement('div'), {
        id: 'notice_board_detail_wrapper',
        innerHTML: `
            <div class="notice_board_detail_container list_scroll list_scroll-y" data-bind_name="noticeBoardDetailContainer">
                <ul class="notice_board_detail_content" data-bind_name="noticeBoardDetailList">
 
                </ul>
                <div class="toolbar" style="position: fixed;" data-bind_name="toolbar"></div>
            </div>
        `
    })

	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();

    #positionChanger;

    /*#prevRange;
    #prevContent;
    #prevStartOffset;
    #prevEndOffset;*/

    constructor(){
        this.#positionChanger = new _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_21__["default"]({wrapper: this.#elementMap.noticeBoardDetailList});
		this.#positionChanger.onDropEndChangePositionCallback = (changeList, {item, target, wrapper}) => {
            window.myAPI.noticeBoard.updateNoticeBoardDetailOrder(
                changeList.map(e=>{
                    return {
                        id: e.dataset.id,
                        workspaceId: e.dataset.workspace_id,
                        roomId: e.dataset.room_id,
                        orderSort: e.dataset.order_sort,
                    }
                })
            ).then(result => {
                console.log(result);
            })
        };

        window.myAPI.event.electronEventTrigger.addElectronEventListener('noticeBoardDetailAccept', (data) => {
            //console.log(data);
            let isEventStream
            if(data && data.serverSentStreamType){
                isEventStream = true;
                data = data.content;
            }
            
            let lastTarget = document.activeElement;
            this.createItemElement(data)
            .then(li => {
                this.#addMemory(li, data.workspaceId, data.roomId, data.noticeBoardId, data.id);
                let list = Object.values(this.#memory[data.workspaceId]?.[data.roomId]?.[data.noticeBoardId] || {})
                .sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort));
                
                this.#positionChanger.addPositionChangeEvent(list);

                let listObserver = new MutationObserver( (mutationList, observer) => {
                    mutationList.forEach((mutation) => {
                        let {addedNodes, removedNodes} = mutation;
                        let isAddedActiveTarget = [...addedNodes].some(e=> e == lastTarget.parentLi)
                        if(isAddedActiveTarget){
                            //setTimeout(()=>{
                                lastTarget.contentEditable = true;
                                let cursorTarget = lastTarget.hasAttribute('is_cursor') ? lastTarget : lastTarget.querySelector('[is_cursor]');
                                if( ! cursorTarget) return;
                                let {'cursor_offset': offset, 'cursor_type': type, 'cursor_index': index, 'cursor_scroll_x': x, 'cursor_scroll_y': y} = cursorTarget.attributes;
                                let selection = window.getSelection();
                                if(type.value == Node.ELEMENT_NODE){
                                    let node = cursorTarget.childNodes[index.value]; 
                                    selection.setPosition(node, offset.value);
                                }else if(type.value == Node.TEXT_NODE){
                                    selection.setPosition(cursorTarget, offset.value);
                                }

                            //},5000)
                        }
                    })
                });
                if(lastTarget && lastTarget.tagName == 'NOTICE-BOARD-LINE'){ //|| ! checkTarget){    
                    listObserver.observe(this.#elementMap.noticeBoardDetailList, {childList:true});
                }

                this.#elementMap.noticeBoardDetailList.replaceChildren(...list);

                //this.#elementMap.noticeBoardDetailList.append();
                let appendAwait = setInterval(()=>{
                    if( ! li.isConnected){
                        return;
                    }
                    clearInterval(appendAwait);
                    listObserver.disconnect();
                }, 50)
            })
        })

        this.#elementMap.noticeBoardDetailList
        _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_22__["default"].addNoticeBoardIdChangeListener = {
            name: 'noticeBoardDetailIdChange',
            callBack: (handler, data)=>{
                this.#elementMap.noticeBoardDetailList.replaceChildren();
                this.refresh();
                /*if(this.#memory[workspaceHandler.workspaceId]?.[roomHandler.roomId]?.[noticeBoardHandler.noticeBoardId]){
                    this.#memory[workspaceHandler.workspaceId][roomHandler.roomId][noticeBoardHandler.noticeBoardId] = {};
                }*/
            }
        }

        let toolList = Object.values(NoticeBoardLine.tools).map(e=>e.toolHandler.toolButton);

        document.addEventListener('selectionchange', event => {
            if(document.activeElement.constructor != NoticeBoardLine){
                return;
            }
            let selection = window.getSelection();
            if (selection.rangeCount == 0){
                return;
            }
            
            /*let range = selection.getRangeAt(0);

            this.#prevRange = range.cloneRange();
            this.#prevStartOffset = range.startOffset;
            this.#prevEndOffset = range.endOffset;
            this.#prevContent = range.commonAncestorContainer;*/

            if( ! selection.isCollapsed){
                this.#elementMap.noticeBoardDetailContainer.append(this.#elementMap.toolbar);
                this.#elementMap.toolbar.replaceChildren(...toolList);
                _root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect())
            }else{
                this.#elementMap.toolbar.remove();
            }
        })
        this.#elementMap.noticeBoardDetailContainer.addEventListener("scroll", () => {
			if(this.#elementMap.toolbar.childElementCount == 0)return;
			_root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect());
		});
        window.addEventListener('resize', (event) => {
			if(this.#elementMap.toolbar.childElementCount == 0)return;
            _root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].processingElementPosition(this.#elementMap.toolbar, window.getSelection().getRangeAt(0).getBoundingClientRect());
		})
    }

    createItemElement(data){
        return new Promise(resolve=>{
            let li = Object.assign(document.createElement('li'),{
                className : 'notice_board_detail_item'
            });
            li.dataset.is_not_visible_target = '';
            li.style.minHeight = (parseInt(window.getComputedStyle(document.body).fontSize) || 16) * 2 + 'px';
            
            resolve(this.#addItemEvent(li, data));
        })
    }

    #addItemEvent(li, data){
        return new Promise(resolve=> {
            let addButton = Object.assign(document.createElement('button'), {
                className: 'notice_board_detail_item_add_content',
                textContent: '+'
            });
            let editor = new NoticeBoardLine(li, this);
            let positionChangeIcon = Object.assign(document.createElement('span'),{
                className: 'notice_board_detail_item_position_change_icon pointer',
                textContent: '〓'
            })

            let datasetPromise = _root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].jsonToSaveElementDataset(data, li);
            //console.log(data.content);
            if(data.content){
                let {content} = data;
                delete data.content;
                datasetPromise.then(() => {
                    li.removeAttribute('data-content');
                    
                    editor.parseLowDoseJSON(content).then(() => {
                        editor.contentEditable = false;
                        li.append(editor);
                        let appendAwait = setInterval(()=>{
                            if( ! editor.isConnected) return;
                            clearInterval(appendAwait);
                            if( ! editor.isEmpty){
                                li.append(positionChangeIcon)
                            }else {
                                editor.remove();
                                li.prepend(addButton);
                            }
                        },50)
                    })
                })
            }else{
                li.prepend(addButton);
                editor.startFirstLine();
            }
            li.onmouseenter = () => {
                if(addButton.isConnected){
                    addButton.classList.add('active');
                    return;
                }
                li.draggable = false;
            }
            li.onmouseleave = () => {
                if(addButton.isConnected){
                    addButton.classList.remove('active');
                    return;
                }
            }
            //let isPositionChangeIconOver = false;
            positionChangeIcon.onmousemove = () => {
                li.draggable = true;
            }
            positionChangeIcon.onmouseover = () => {
                //isPositionChangeIconOver = true;
                li.draggable = true;
            }
            positionChangeIcon.onmouseout = () => {
                //isPositionChangeIconOver = false;
                li.draggable = false;
            }

            addButton.onclick = (event) => {
                //console.log(event, editor.isConnected);
                editor.contentEditable = true;
                editor.firstLine.innerText = '\n'
                if(editor.isConnected){
                    return;
                }
                li.append(editor);
                li.append(positionChangeIcon);
                addButton.remove();
                window.getSelection().setPosition(editor, editor.childNodes.length);
            }
            let prevText;
            editor.onclick = () => {
                if(editor.contentEditable == 'false'){
                    editor.contentEditable = true;
                    if(editor.isEmpty){
                        editor.firstLine.innerText = '\n'
                    }
                    window.getSelection().setPosition(editor, editor.childNodes.length);
                }
            }
            editor.onfocus = (event) => {
                prevText = editor.innerHTML;
            }
            let isScriptBlur = false;
            editor.onblur = (event) => {
                if( ! isScriptBlur && (editor.matches(':hover') || this.#elementMap.toolbar.matches(':hover') || document.activeElement == editor)){
                    return;
                }
                if(isScriptBlur){
                    isScriptBlur = ! isScriptBlur;
                }
                this.#elementMap.toolbar.remove();
                editor.contentEditable = false;
                if( ! event.relatedTarget?.hasAttribute('data-tool_status')){
                    this.#elementMap.toolbar.remove();
                }
                if(editor.isEmpty){
                    editor.replaceChildren();
                    editor.remove();
                    positionChangeIcon.remove();
                    li.prepend(addButton);
                    if(li.matches(':hover')){
                        addButton.classList.add('active');
                    }else{
                        addButton.classList.remove('active');
                    }
                    //return ;
                }else if(prevText == editor.innerHTML){
                    return;
                }
                prevText = editor.innerHTML;
                
                let param = {
                    id: li.dataset.id,
                    noticeBoardId: _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_22__["default"].noticeBoardId,
                    roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId,
                    workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId,
                    orderSort: li.dataset.order_sort //([...this.#elementMap.noticeBoardDetailList.children].findIndex(e=>e==li) - 1) * -1,
                };
                this.#uploadNoticeBoard(editor, param);
            }
            editor.onkeydown = (event) => {
                let {altKey, ctrlKey, shiftKey, key} = event;
                if(key == 'Enter' && (altKey || ctrlKey || shiftKey)){
                    event.preventDefault();
                    let LineBreakMode;
                    if(altKey){
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NEXT_LINE_FIRST
                    }else if(ctrlKey){
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NEXT_LINE_LAST
                    }else{
                        LineBreakMode = _handler_editor_FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__["default"].LineBreakMode.NO_CHANGE
                    }
                    editor.lineBreak(LineBreakMode);
                }else if(key == 'Enter'){// && editor.innerText.replaceAll('\n', '') != ''){
                    event.preventDefault();
                    isScriptBlur = true;
                    editor.blur();
                }
            }

            resolve(li);
        });
    }

    /**
     * 
     * @param {NoticeBoardLine} editor 
     * @param {Object} param
     */
    async #uploadNoticeBoard(editor, param){
        let promiseList = [];

        editor.contentEditable = false;
        editor.getLowDoseJSON(editor, {
            afterCallback : (json) => {
                if(json.tagName != _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"].toolHandler.defaultClass && 
                    json.tagName != _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"].toolHandler.defaultClass &&
                    json.tagName != _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_15__["default"].toolHandler.defaultClass
                ){
                    return;
                }else if(json.data.hasOwnProperty('is_upload_end')){
                    return;
                }
                let node = json.node;
                let file = node.selectedFile;
                json.data.is_loading = '';
                console.log(node, file);
                let fileType;
                if(json.tagName == _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_13__["default"].toolHandler.defaultClass){
                    fileType = 'IMAGE';
                }else if(json.tagName == _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_14__["default"].toolHandler.defaultClass){
                    fileType = 'VIDEO';
                }else {
                    fileType = 'FILE';
                }
                promiseList.push(new Promise(async resolve => {

                    let {name, size, lastModified, contentType, newFileName} = await _root_js_common__WEBPACK_IMPORTED_MODULE_20__["default"].underbarNameToCamelName(json.data);
                    let putSignData = `${_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId}:${_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId}:${name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_23__.accountHandler.accountInfo.accountName}`;
                    let isUpload = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, putSignData, {newFileName, fileType, uploadType: 'NOTICE'})
                    .then( (result) => {
                        if(! result){
                            return;
                        }
                        let {data, encDncKeyPair} = result;

                        json.data.new_file_name = data.newFileName;

                        return Promise.all([
                            _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionKey).then( async (buffer) => {
                                return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.secretAlgorithm)
                                    .then(buf=>String.fromCharCode(...new Uint8Array(buf)))
                            }),
                            _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionMd).then( async (buffer) => {
                                return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.secretAlgorithm)
                                    .then(buf=>String.fromCharCode(...new Uint8Array(buf)))
                            })
                        ]).then( async ([k,m]) => {
                            /*let base64 = json.data.base64;
                            if(! base64){
                                let blob = await fetch(json.data.url).then(res=>res.blob())
                                base64 = await new Promise(resolve => {
                                    const reader = new FileReader();
                                    reader.readAsDataURL(blob);
                                    reader.onloadend = () => {
                                        resolve(reader.result);
                                    }
                                });
                            }*/
                            let res = await _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.fetchPutObject(data.presignedUrl, k, m, file.files[0]);
                            if( ! (res.status == 200 || res.status == 201) ){
                                return;
                            }
                            return true;
                        })
                    })
                    console.log(isUpload);
                    if( ! isUpload){
                        resolve();
                        return;
                    }
                    let getSignData = `${_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId}:${_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId}:${json.data.new_file_name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_23__.accountHandler.accountInfo.accountName}`;
                    
                    _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_24__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generatePutObjectPresignedUrl, getSignData, {fileType, uploadType: 'NOTICE'})
                    .then( (result) => {
                        if(! result){
                            return;
                        }
                        let {data, encDncKeyPair} = result;

                        json.data.url = data.presignedUrl;
                        delete json.data.base64
                        json.data.upload_type = 'NOTICE';
                        resolve(json);
                    })
                }))
            }
        }).then(jsonList => {

            param.content = JSON.stringify(jsonList);
            if(param.content.length == 0) param.content = undefined
            window.myAPI.noticeBoard.createNoticeBoardDetail(param).then(res=>{
                let {data} = res
                this.innerText = '';
                Promise.all(promiseList).then((fileTargetList) => {
                    console.log(fileTargetList);
                    if(fileTargetList.length == 0){
                        //window.getSelection().setPosition(this, 1)
                        return;
                    }
                    fileTargetList.forEach(e=>{
                        delete e.data.is_loading
                        e.data.is_upload_end = '';
                    });
                    param.content = JSON.stringify(jsonList);
                    if(param.content.length == 0) param.content = undefined
                    window.myAPI.noticeBoard.createNoticeBoardDetail(param).then(response=>{
                        //window.getSelection().setPosition(this, 1)
                    });
                })
            });
            
        })
    }

    #callData(){
        return window.myAPI.noticeBoard.searchNoticeBoardDetailList({
            workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId, 
            roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId,
            noticeBoardId : _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_22__["default"].noticeBoardId
        })
    }

    #addMemory(data, workspaceId, roomId, noticeBoardId, id){
		if( ! this.#memory.hasOwnProperty(workspaceId)){
			this.#memory[workspaceId] = {};
		}
		if( ! this.#memory[workspaceId].hasOwnProperty(roomId)){
			this.#memory[workspaceId][roomId] = {} ;
		}
        if( ! this.#memory[workspaceId][roomId].hasOwnProperty(noticeBoardId)){
            this.#memory[workspaceId][roomId][noticeBoardId] = {}
        }
        
        this.#memory[workspaceId][roomId][noticeBoardId][id] = data;
		
    }
    async refresh(){
        let list = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_18__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_19__["default"].roomId]?.[_handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_22__["default"].noticeBoardId] || {})
        .sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort));
        if(list.length == 0){
            this.#callData();
            return;
        }
        this.#positionChanger.addPositionChangeEvent(list);
        this.#elementMap.noticeBoardDetailList.replaceChildren(...list);  

	}

	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}
});

/***/ }),

/***/ "./view/js/component/notice_board/notice_board_item/NoticeBoardList.js":
/*!*****************************************************************************!*\
  !*** ./view/js/component/notice_board/notice_board_item/NoticeBoardList.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NoticeBoardDetail */ "./view/js/component/notice_board/notice_board_item/NoticeBoardDetail.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @handler/notice_board/NoticeBoardHandler */ "./view/js/handler/notice_board/NoticeBoardHandler.js");







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class NoticeBoardList{
	#memory = {}

    #element = Object.assign(document.createElement('div'), {
        id: 'notice_board_list_wrapper',
        innerHTML: `
            <div class="notice_board_list_container" data-bind_name="noticeBoardListContainer">
                <div class="notice_board_menu_wrapper">
                    <div class="notice_board_search_wrapper" data-bind_name="noticeBoardMenuSearchWrapper">
						<form id="notice_board_search" data-bind_name="noticeBoardSearch" style="display:none;">
							<div class="search_title_wrapper">
                                <label>search title</label>
                                <input type="search" placeholder="Press Enter Key" class="search_name" name="searchTitle" data-bind_name="searchTitle">
                            </div>
                            <div class="search_content_wrapper">
                                <label>search content</label>
                                <input type="search" placeholder="Press Enter Key" class="search_name" name="searchContent" data-bind_name="searchContent">
                            </div>
							<button type="submit" hidden></button>
                        </form>
					</div>
                </div> 
				<div class="notice_board_list_content_button_wrapper">
					<button class="css-gg-folder-add" type="button" data-bind_name="rootFolderAdd">
						<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M11 14.5V16.5H13V14.5H15V12.5H13V10.5H11V12.5H9V14.5H11Z"
							fill="currentColor"/>
							<path fill-rule="evenodd" clip-rule="evenodd" d="M4 1.5C2.89543 1.5 2 2.39543 2 3.5V4.5C2 4.55666 2.00236 4.61278 2.00698 4.66825C0.838141 5.07811 0 6.19118 0 7.5V19.5C0 21.1569 1.34315 22.5 3 22.5H21C22.6569 22.5 24 21.1569 24 19.5V7.5C24 5.84315 22.6569 4.5 21 4.5H11.874C11.4299 2.77477 9.86384 1.5 8 1.5H4ZM9.73244 4.5C9.38663 3.9022 8.74028 3.5 8 3.5H4V4.5H9.73244ZM3 6.5C2.44772 6.5 2 6.94772 2 7.5V19.5C2 20.0523 2.44772 20.5 3 20.5H21C21.5523 20.5 22 20.0523 22 19.5V7.5C22 6.94772 21.5523 6.5 21 6.5H3Z"
							fill="currentColor"/>
						</svg>
					</button>
				</div>
                <ul class="notice_board_list_content list_scroll list_scroll-y" data-bind_name="noticeBoardList">
                </ul>
            </div>
        `
    })
	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();

    #positionChanger;

    constructor(){
        this.#positionChanger = new _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__["default"]({wrapper: this.#elementMap.noticeBoardList});
		//let prevWrapper;
		this.#positionChanger.onDropEndChangePositionCallback = (changeList, {item, target, wrapper}) => {
			//prevWrapper = wrapper;
			let parentRoot = item.__parentRoot;
			if(parentRoot && target.dataset.parent_group_id != parentRoot.dataset.parent_group_id || 0){
				target.dataset.parent_group_id = parentRoot.dataset.parent_group_id
				if(! parentRoot.dataset.parent_group_id){

				}
				//if(prevWrapper){
					//prevWrapper.querySelector(`[data-id="${targetData.id}"]`)?.remove();
				//}
				
				this.#positionChanger.addPositionChangeEvent(changeList, parentRoot)
			}
			window.myAPI.noticeBoard.updateNoticeBoardOrder(changeList.map(e=>{
				let obj = {
					id: e.dataset.id,
					groupId: e.dataset.group_id,
					workspaceId: e.dataset.workspace_id,
					roomId: e.dataset.room_id, 
					orderSort: e.dataset.order_sort,
					parentGroupId: e.dataset.parent_group_id,
				}
				if(! parentRoot.dataset.parent_group_id){
					delete obj.parentGroupId
				}
				return obj;
			})).then(data=>{
				console.log(data);
			})
		}
		this.#positionChanger.onIfCancelCallback = (target, item) => {
			if(! item.dataset.parent_group_id && ! target.dataset.group_id){
				return true
			}
			return false;
		}

		this.#positionChanger.onDropDocumentOutCallback = ({target, event}) => {
			if(target.hasAttribute('data-gorup_id') || JSON.parse(target.dataset.group_id) ){
				return;
			}
			window.myAPI.createSubWindow({
				workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomId: target.dataset.room_id,
				noticeBoardId: target.dataset.id,
				width: parseInt(window.outerWidth * 0.7),
				height: parseInt(window.outerHeight * 0.7),
				x: event.x,
				y: event.y,
				pageName: 'multipleNoticeBoard',
				pageId : target.dataset.room_id,
				title : _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName + ' - ' + target.dataset.title
			})
		}

        this.#elementMap.noticeBoardSearch.onsubmit = (event) => {
			event.preventDefault();
			this.refresh()
		}
		this.#elementMap.searchTitle.oninput = (event) => {
			if(this.#elementMap.searchTitle.value == ''){
				this.refresh()
			}
		}
        this.#elementMap.searchContent.oninput = (event) => {
			if(this.#elementMap.searchContent.value == ''){
				this.refresh()
			}
		}//
		this.#elementMap.rootFolderAdd.onclick = () => {
			this.createNoticeBoardGroup(undefined, this.#elementMap.noticeBoardList);
		}

		window.myAPI.event.electronEventTrigger.addElectronEventListener('noticeBoardAccept', (data) => {

			let {content = data} = data;
			let parentRoot = content.parentGroupId == null ? this.#elementMap.noticeBoardList : this.#element.querySelector(`ul[data-parent_group_id="${content.parentGroupId}"]`)
			this.createItemElement(
				content, 
				parentRoot
			).then(li => {
				let id = content.groupId || content.id;
				let bindName = ! content.groupId ? 'id' : 'group_id'
				this.#elementMap.noticeBoardList.querySelectorAll(`[data-${bindName}="${id}"]`).forEach((e,i)=>{
					if(e == li) {
						return
					}
					e.remove();
				});
				let list = Object.values(this.#memory[content.workspaceId]?.[content.roomId] || {}).filter(e=>(e.dataset.parent_group_id || 0) == (parentRoot.dataset.parent_group_id || 0))
					.sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort));
				if(list.length != 0){
					this.#positionChanger.addPositionChangeEvent(list, parentRoot)
					parentRoot.replaceChildren(...list);
				}
			})

		});
		window.myAPI.event.electronEventTrigger.addElectronEventListener('noticeBoardDeleteAccept', (data) => {
			let {content} = data;
			let id = content.groupId || content.id;
			if(! id) return;

			delete this.#memory[content.workspaceId][content.roomId]?.[id]
			
			let parentRoot = content.parentGroupId == null ? this.#elementMap.noticeBoardList : this.#element.querySelector(`ul[data-parent_group_id="${content.parentGroupId}"]`)
			
			let list = Object.values(this.#memory[content.workspaceId]?.[content.roomId] || {}).filter(e=>(e.dataset.parent_group_id || 0) == (parentRoot.dataset.parent_group_id || 0))
				.sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort));
			this.#positionChanger.addPositionChangeEvent(list, parentRoot)
			parentRoot.replaceChildren(...list);
		})
        window.addEventListener('resize', (event) => {
			let activeTitleName = this.#elementMap.noticeBoardList.querySelector('.notice_board_list_content_item_title_name.active');
            if(activeTitleName){
				activeTitleName.scrollIntoView({ behavior: 'instant', block: "end", inline: "nearest" });
			}
		})
    }
	createFolder(){
		
	}
	createNoticeBoardGroup(data = {isEmpty:true}, parentRoot){
		let li = Object.assign(document.createElement('li'), {
			className: `notice_board_list_content_item`,
			innerHTML : `
			<div class="notice_board_list_content_item_title_wrapper">
				<button class="marker" data-is_open=${Boolean(data.isEmpty)}></button>
				<div class="notice_board_list_content_item_title">
					<b class="notice_board_list_content_item_title_name ${data.isEmpty ? '' : 'pointer'}" ${data.isEmpty ? '' : `data-prev_title-name="${data.title}"`} contentEditable=${Boolean(data.isEmpty)}>${data.title || ''}</b>
				</div>
				<div class="notice_board_list_content_button_wrapper">
					<button class="css-gg-add" type="button">
						<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path fill-rule="evenodd" clip-rule="evenodd" d="M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z" 
							fill="currentColor"/>
							<path fill-rule="evenodd" clip-rule="evenodd" d="M13 7C13 6.44772 12.5523 6 12 6C11.4477 6 11 6.44772 11 7V11H7C6.44772 11 6 11.4477 6 12C6 12.5523 6.44772 13 7 13H11V17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17V13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11H13V7Z" 
							fill="currentColor"/>
						</svg>
					</button>
					<button class="css-gg-folder-add" type="button">
						<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M11 14.5V16.5H13V14.5H15V12.5H13V10.5H11V12.5H9V14.5H11Z" 
							fill="currentColor" />
							<path fill-rule="evenodd" clip-rule="evenodd" d="M4 1.5C2.89543 1.5 2 2.39543 2 3.5V4.5C2 4.55666 2.00236 4.61278 2.00698 4.66825C0.838141 5.07811 0 6.19118 0 7.5V19.5C0 21.1569 1.34315 22.5 3 22.5H21C22.6569 22.5 24 21.1569 24 19.5V7.5C24 5.84315 22.6569 4.5 21 4.5H11.874C11.4299 2.77477 9.86384 1.5 8 1.5H4ZM9.73244 4.5C9.38663 3.9022 8.74028 3.5 8 3.5H4V4.5H9.73244ZM3 6.5C2.44772 6.5 2 6.94772 2 7.5V19.5C2 20.0523 2.44772 20.5 3 20.5H21C21.5523 20.5 22 20.0523 22 19.5V7.5C22 6.94772 21.5523 6.5 21 6.5H3Z" 
							fill="currentColor"/>
						</svg>
					</button>
				</div>
			</div>
			<ul class="notice_board_list_content">
			</ul>
			`
		});
		li.dataset.visibility_not = '';
		li.__parentRoot = parentRoot;
		let [marker, titleName, buttonWrapper, addButton, folderAddButton, childRoot] = li.querySelectorAll('.marker, .notice_board_list_content_item_title_name, .notice_board_list_content_button_wrapper, .css-gg-add, .css-gg-folder-add, .notice_board_list_content');
		childRoot.__component = {
			marker, titleName, buttonWrapper, addButton, folderAddButton, childRoot, li
		};
		let markerObserve = new MutationObserver((mutationList, observer) => {
			mutationList.forEach((mutation) => {
				let isOpen = JSON.parse(marker.dataset.is_open);
				if(isOpen && marker.dataset.is_open == mutation.oldValue){
					childRoot.style.height = '';
					childRoot.style.overflow = '';	
					return
				}
				else if(! isOpen){
					childRoot.style.height = childRoot.scrollHeight + 'px';
					childRoot.dataset.prev_height = childRoot.style.height;
					setTimeout(()=>{
						childRoot.style.height = '0px';
						childRoot.style.overflow = 'hidden';
					}, 0);
				}else{
					childRoot.style.height = childRoot.dataset.prev_height;
					childRoot.ontransitionend = () => {
						childRoot.style.height = '';
						childRoot.style.overflow = '';
					}
					if(childRoot.childElementCount == 0){
						childRoot.style.height = '';
						childRoot.style.overflow = '';	
					}
				}
			})
		})
		let deleteButton  = Object.assign(document.createElement('button'),{
			className: 'css-gg-remove',
			innerHTML: `
				<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z"
					fill="currentColor"/>
					<path fill-rule="evenodd" clip-rule="evenodd" d="M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
					fill="currentColor"/>
				</svg>
			`,
			onclick: (event) => {
				window.myAPI.noticeBoard.deleteNoticeBoardGroup({
					roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
					workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
					groupId: li.dataset.group_id,
					parentGroupId: li.dataset.parent_group_id,
				})
				li.remove();
				markerObserve.disconnect();
			}
		});
		let updateButton = Object.assign(document.createElement('button'), {
			innerHTML: `
				<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z"
					fill="currentColor"/>
					<path d="M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z"
					fill="currentColor"/>
				</svg>
			`,
			className: 'css-gg-pen',
			onclick : (event) => {
				titleName.contentEditable = true;
				updateButton.remove();
				titleName.focus();
				window.getSelection().setPosition(titleName, titleName.childNodes.length);
				titleName.classList.remove('pointer');
			}
		});
		li.childElementMap = {
			marker, titleName, buttonWrapper,
			addButton, folderAddButton, childRoot, deleteButton, updateButton
		}
		_root_js_common__WEBPACK_IMPORTED_MODULE_4__["default"].jsonToSaveElementDataset(data, li).then(() => {
			childRoot.dataset.parent_group_id = li.dataset.group_id;
		})

		addButton.onclick = () => {
			this.refresh(childRoot);
			marker.dataset.is_open = true;
			this.createNoticeBoard(undefined, childRoot);
			childRoot.style.height = '';
			childRoot.style.overflow = '';	
		}
		folderAddButton.onclick = () => this.createNoticeBoardGroup(undefined, childRoot);
		
		markerObserve.observe(marker, {
			attributeFilter:['data-is_open'],
			attributeOldValue:true
		});
		marker.onclick = () => {
			childRoot.ontransitionend = '';
			marker.dataset.is_open = ! JSON.parse(marker.dataset.is_open)
			new Promise(resolve=>{
				this.refresh(childRoot);
				resolve();
			})
		}
		titleName.onclick = (event) => {
			if(document.activeElement == titleName){
				return;
			}
			marker.click();
		}
		titleName.onblur = (event) => {
			if(titleName.textContent != '' && ! deleteButton.hasAttribute('data-is_mouseover')){
				deleteButton.remove();
				titleName.contentEditable = false;
				titleName.classList.add('pointer');
				if( ! titleName.dataset.prev_titleName || titleName.dataset.prev_titleName != titleName.textContent){
					window.myAPI.noticeBoard.createNoticeBoardGroup({
						roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
						workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
						title: titleName.textContent,
						groupId: li.dataset.group_id,
						parentGroupId: parentRoot.dataset.parent_group_id
					}).then( result => {
						console.log(result);
						childRoot.dataset.parent_group_id = li.dataset.group_id;
						_root_js_common__WEBPACK_IMPORTED_MODULE_4__["default"].jsonToSaveElementDataset(result.data, li);
					})
				}
				titleName.dataset.prev_titleName = titleName.textContent
			}else if(titleName.textContent == '' && data.isEmpty){
				li.remove();
			}
		}
		this.#addItemEvent(li, parentRoot);
		return li;
	}
	createNoticeBoard(data = {isEmpty:true}, parentRoot){
		let flexLayout = this.#element.closest('flex-layout');
		let isNoticeBoardActive = ! Boolean(data.isEmpty) && data.id == _handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_5__["default"].noticeBoardId && flexLayout.isVisible(_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element)
		
		let li = Object.assign(document.createElement('li'), {
			className: 'notice_board_list_content_item type_notice_board',
			innerHTML: `
			<div class="notice_board_list_content_item_title_wrapper">
				<div class="notice_board_list_content_item_title">
					<span class="notice_board_list_content_item_title_name pointer ${isNoticeBoardActive ? 'active' : ''}" ${data.isEmpty ? '' : `data-prev_title-name="${data.title}"`} contentEditable=${Boolean(data.isEmpty)}>${data.title || ''}</span>
				</div>
				<div class="notice_board_list_content_button_wrapper">
				</div>
			</div>
			`
		});
		li.__parentRoot = parentRoot;
		let [titleName, buttonWrapper] = li.querySelectorAll('.notice_board_list_content_item_title_name, .notice_board_list_content_button_wrapper');
		let deleteButton  = Object.assign(document.createElement('button'),{
			className: 'css-gg-remove',
			innerHTML: `
				<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z"
					fill="currentColor"/>
					<path fill-rule="evenodd" clip-rule="evenodd" d="M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
					fill="currentColor"/>
				</svg>
			`,
			onclick: (event) => {
				window.myAPI.noticeBoard.deleteNoticeBoard({
					roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
					workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
					id: li.dataset.id,
					parentGroupId: li.dataset.parent_group_id,
				})
				li.remove();
				if(parentRoot.childElementCount == 0){
					parentRoot.__component.marker.dataset.is_open = false
				}
			}
		});
		let updateButton = Object.assign(document.createElement('button'), {
			innerHTML: `
				<svg style="zoom:125%;" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z"
					fill="currentColor"/>
					<path d="M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z"
					fill="currentColor"/>
				</svg>
			`,
			className: 'css-gg-pen',
			onclick : (event) => {
				titleName.contentEditable = true;
				updateButton.remove();
				titleName.focus();
				titleName.classList.remove('pointer');
				window.getSelection().setPosition(titleName, titleName.childNodes.length);
			}
		})
		li.childElementMap = {
			titleName, buttonWrapper, deleteButton, updateButton
		};
		_root_js_common__WEBPACK_IMPORTED_MODULE_4__["default"].jsonToSaveElementDataset(data, li);

		titleName.onclick = (event) => {
			
			if(document.activeElement == titleName){
				return;
			}else if(titleName.classList.contains('active')){
				flexLayout.closeFlex(_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element)
			}
			_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element.dataset.prev_grow = 1.5;
			_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element._openEndCallback = () => {
				titleName.classList.add('active');
				//titleName.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
				titleName.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
			}
			_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element._closeEndCallback = () => {
				_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element.dataset.prev_grow = 1.5;
				if( ! titleName.classList.contains('active') && this.prevOpenFlexTarget != titleName){
					flexLayout.openFlex(_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element, {isPrevSizeOpen: true}).then(()=>{
						_handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_5__["default"].noticeBoardId = data.id;
						this.prevOpenFlexTarget = titleName;
						document.head.querySelector('title').textContent = _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName + ' - ' + titleName.textContent + ' - Grease Lightning Chat';
					})
				}else{
					titleName.classList.remove('active');
					document.head.querySelector('title').textContent = _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName + ' - Grease Lightning Chat';
				}
			}

			if(flexLayout.isVisible(_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element)){
				_handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_5__["default"].noticeBoardId = data.id;
				this.prevOpenFlexTarget = titleName;
				titleName.classList.add('active');
				titleName.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
				//flexLayout.closeFlex(noticeBoardDetail.element).then(() => {
				//})
			}else{
				flexLayout.openFlex(_NoticeBoardDetail__WEBPACK_IMPORTED_MODULE_3__["default"].element, {isPrevSizeOpen: true}).then(() => {
					this.prevOpenFlexTarget = titleName;
					_handler_notice_board_NoticeBoardHandler__WEBPACK_IMPORTED_MODULE_5__["default"].noticeBoardId = data.id;
					document.head.querySelector('title').textContent = _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName + ' - ' + titleName.textContent + ' - Grease Lightning Chat';
					//titleName.classList.add('active');
				})
			}
			this.#elementMap.noticeBoardList.querySelectorAll('.notice_board_list_content_item_title_name').forEach( async e=> {
				if(e == titleName)return;
				e.classList.remove('active');
			})
		}
		titleName.onblur = (event) => {
			if(titleName.textContent != '' && ! deleteButton.hasAttribute('data-is_mouseover')){
				deleteButton.remove();
				titleName.contentEditable = false;
				titleName.classList.add('pointer');
				if( ! titleName.dataset.prev_titleName || titleName.dataset.prev_titleName != titleName.textContent){
					window.myAPI.noticeBoard.createNoticeBoard({
						roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId,
						workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
						title: titleName.textContent,
						id: li.dataset.id,
						parentGroupId: parentRoot.dataset.parent_group_id
					}).then( result => {
						_root_js_common__WEBPACK_IMPORTED_MODULE_4__["default"].jsonToSaveElementDataset(result.data, li);
					})
				}
				titleName.dataset.prev_titleName = titleName.textContent
			}else if(titleName.textContent == '' && data.isEmpty){
				li.remove();
				if(parentRoot.childElementCount == 0){
					parentRoot.__component.marker.dataset.is_open = false
				}
			}
		}

		this.#addItemEvent(li, parentRoot);
		return li;
	}

    callData(workspaceId, roomId, searchTitle, searchContent, parentGroupId){
		return window.myAPI.noticeBoard.searchNoticeBoardList({
            workspaceId, roomId, searchTitle, searchContent, parentGroupId
        }).then((data = {}) => {
            return data.data;
        })
	}

    createPage(content = [], searchTitle = '', searchContent = '', parentRoot = this.#elementMap.noticeBoardList){
		return new Promise(resolve => {
			//let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
				return;
			}
			return Promise.all(
				content.map(async item => {
					return this.createItemElement(item, parentRoot)
				})
			).then((liList = [])=>{
				if(liList.length == 0){
                    resolve(liList);
                }
				//console.log(this.#memory);
				/*if(searchTitle == '' && searchContent == ''){
					this.#positionChanger.addPositionChangeEvent(liList);
				}*/
               resolve(liList);
            });
		});
	}

    createItemElement(item, parentRoot){
		return new Promise(resolve=>{
			let li = ! item.groupId ? this.createNoticeBoard(item, parentRoot) : this.createNoticeBoardGroup(item, parentRoot);
			this.#addMemory(li, item.workspaceId, item.roomId, item.groupId || item.id, parentRoot.dataset.parent_group_id);
			resolve(li);
		})
	}

    #addItemEvent(li, parentRoot){
		return new Promise(resolve => {
			let {titleName, buttonWrapper, deleteButton, updateButton} = li.childElementMap;

			if(Boolean(li.dataset.is_empty)){
				buttonWrapper.prepend(deleteButton);
			}
			deleteButton.onmouseover = (event) => {
				deleteButton.dataset.is_mouseover = '';
			}
			deleteButton.onmouseout = (event) => {
				deleteButton.removeAttribute('data-is_mouseover');
			}

			titleName.onkeydown = (event) => {
				if(event.key != 'Enter'){
					return;
				}
				event.preventDefault();
				titleName.blur();
			}
			titleName.onkeyup = (event) => {
				if(titleName.textContent == ''){
					buttonWrapper.prepend(deleteButton);
				}
			}
			let titleNameConnectedAwait = setInterval(()=>{
				if(titleName.isConnected && Boolean(li.dataset.is_empty)){
					titleName.focus();
					clearInterval(titleNameConnectedAwait);
				}
			}, 100);

			[titleName, buttonWrapper].forEach(e=> e.onmouseenter = (event) => {
				if(Boolean(li.dataset.is_empty) || document.activeElement == titleName){
					return;
				}
				buttonWrapper.prepend(updateButton);
			});
			[titleName, buttonWrapper].forEach(e=> e.onmouseleave = (event) => {
				if(Boolean(li.dataset.is_empty)){
					return;
				}
				updateButton.remove();
			});

			parentRoot.prepend(li);
			resolve(li);
		});
	}

    #addMemory(data, workspaceId, roomId, noticeBoardId){
		if( ! this.#memory.hasOwnProperty(workspaceId)){
			this.#memory[workspaceId] = {};
		}
		if( ! this.#memory[workspaceId].hasOwnProperty(roomId)){
			this.#memory[workspaceId][roomId] = {} ;
		}
		/*
		if( ! this.#memory[workspaceHandler.workspaceId][roomHandler.roomId].hasOwnProperty(parentGroupId)){
			this.#memory[workspaceHandler.workspaceId][roomHandler.roomId][parentGroupId] = {};
		}
		this.#memory[workspaceHandler.workspaceId][roomHandler.roomId][parentGroupId][noticeBoardId] = data;
		*/
		this.#memory[workspaceId][roomId][noticeBoardId] = data;
    }

    refresh(parentRoot = this.#elementMap.noticeBoardList){
		parentRoot.replaceChildren();
		//let promise;
		let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId]?.[_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId] || {}).filter(e=>(e.dataset.parent_group_id || 0) == (parentRoot.dataset.parent_group_id || 0));
		let isSearchEmpty = this.#elementMap.searchTitle.value == '' && this.#elementMap.searchContent.value == '';
		
		if(isSearchEmpty && memory && memory.length != 0){
			//promise = Promise.resolve(memory);
			parentRoot.replaceChildren(
				...memory.sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
				);
		}else{
			this.callData(
				_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId, 
				this.#elementMap.searchTitle.value, 
				this.#elementMap.searchContent.value, 
				parentRoot?.dataset.parent_group_id
			)

		}
	}

	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}
});

/***/ }),

/***/ "./view/js/component/option/GiveAdminView.js":
/*!***************************************************!*\
  !*** ./view/js/component/option/GiveAdminView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GiveAdminView)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @component/LayerPopupTemplate */ "./view/js/component/LayerPopupTemplate.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");






class GiveAdminView extends _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__["default"]{

	#layerContent = Object.assign(document.createElement('div'),{
		innerHTML: `
			<style>
				form#give_admin_view{
					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					text-align: center;
					gap: 2vh;
					position: relative;
				}
				#give_admin_view_account_list{
					width: 80%;
					height: 50vh;
					overflow-y: auto;
					max-height: 1%;
				}

				#give_admin_view_account_list::-webkit-scrollbar{
					display: none;
				}
				#give_admin_view_account_list:hover::-webkit-scrollbar{
					display: initial;
					width: 8px;
				}
				#give_admin_view_account_list::-webkit-scrollbar-track{
					background: #00000000;
				}
				#give_admin_view_account_list::-webkit-scrollbar-thumb {
					background: #d8a1b6;
					border-radius: 100px;
					box-shadow: inset 0 0 5px #000000;
				}
				#give_admin_view_account_list::-webkit-scrollbar-thumb:hover {
					/*background: #44070757;*/
					background: #893e3e
				}

				#give_admin_view_account_list > li{
					border-top: outset 1px;
					position: relative;
					display: flex;
					align-items: center;
					justify-content: center;
				}
				#give_admin_view_account_list > li > input.add_account_check{
				}
				#give_admin_view_account_list > li .create_room_view_department, 
				#give_admin_view_account_list > li .create_room_view_job_grade,
				#give_admin_view_account_list > li .create_room_view_account_name{
					color: #b1b1b1;
				}
				#give_admin_view_account_list > li .create_room_view_department,
				#give_admin_view_account_list > li .create_room_view_account_name{
					font-weight: lighter;
				}
				#give_admin_view_account_list > li .create_room_view_separator{
					color: #6937a16b;
				}
				/*#give_admin_view_account_list > li .create_room_view_job_grade,*/
				#give_admin_view_account_list > li .create_room_view_full_name,
				#give_admin_view_account_list > li .create_room_view_separator{
					font-weight: bold;
				}
				#give_admin_view_account_list > li .create_room_view_full_name{
					color: #789bb9b8;
				}
				#give_admin_view_account_list > li .create_room_view_account_info{
					width: 100%
				}
			</style>
			<form id="give_admin_view">
				<div>
					<label for="give_admin_view_search_user">Please enter the users you want to invite.</label>
					<input type="search" id="give_admin_view_search_user" name="fullName"/>
				</div>
				<ul id="give_admin_view_account_list">
				</ul>
				<div>
					<button type="button" id="give_admin_view_button">Give Admin</button>
				</div>
			</from>
		`
	})

	/**
	 * full 네임으로 검색 ex) ${fullName}(${accountName}) 형식
	 */
	#accountInviteRoomViewAccountList = this.#layerContent.querySelector('#give_admin_view_account_list');
	page = 0;
	size = 10;
	#liList = [];
	form = this.#layerContent.querySelector('#give_admin_view');

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.page += 1;
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.form.fullName.value).then(data=>{
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList))
					.then((liList)=>{
						if(this.page >= data.totalPages || liList.length == 0){
							this.#lastItemVisibleObserver.disconnect();
						}
					});
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#inviteAccountMapper = {};

	constructor(owner){
		super(owner);
		super.container.append(this.#layerContent)
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'giveAdminView',
			callBack: (handler) => {
				this.workspaceId = handler.workspaceId;
			},
			runTheFirst: true
		}
		this.form.onsubmit = (event) => {
			//console.log(event);
			event.preventDefault();
			/*let fullName = this.form.create_room_search_user.value;
			this.reset();
			this.callData(this.page, this.size, this.#workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});*/
		};
		this.form.give_admin_view_search_user.onkeydown = (event) => {
			if(event.key != 'Enter'){
				return;
			}
			let fullName = this.form.give_admin_view_search_user.value;
			this.reset();
			this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});
		}
		this.form.give_admin_view_search_user.oninput = (event) => {
			if(this.form.give_admin_view_search_user.value == ''){
				this.reset();
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId).then(data => {
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
				});
			}
		}
		
		this.form.give_admin_view_button.onclick = (event) => {
			
			Object.values(this.#inviteAccountMapper).forEach(e=>{
				console.log(e);
				window.myAPI.workspace.createGiveAdmin({
					id:e.id,
					workspaceId: e.workspace_id
				}).then((result)=>{
					console.log(result)
				})
			})
			this.#inviteAccountMapper = {};
			super.close();
		}
	}
	
	callData(page, size, workspaceId, fullName){
		console.log({page, size, workspaceId, fullName})
		return window.myAPI.workspace.searchWorkspaceInAccount({
			page, size, workspaceId, fullName
		}).then((data = {}) =>{
			console.log(data);
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
			}

			let liList = content.filter(e=> ! e.isAdmin).map(item => {
				let {
					id,
					accountName,
					fullName,
					workspaceId,
					jobGrade,
					department
				} = item;
				
				let departmentHtml = department ? `<small class="create_room_view_department">${department}</small>` : '';
				let separatorHtml = department && jobGrade ? `<span class="create_room_view_separator">/&nbsp</span>` : '';
				let jobGradeHtml = jobGrade ? `${separatorHtml}<small class="create_room_view_job_grade">${jobGrade}</small>` : '';

				let li = Object.assign(document.createElement('li'), {
					className: 'pointer',
					innerHTML: `
						<div class="create_room_view_account_info">
							<div>
								<span class="create_room_view_full_name">${fullName}</span>
								<span class="create_room_view_account_name">(${accountName})</span>
							</div>
							<div>
								${departmentHtml}
								${jobGradeHtml}
							</div>
						</div>
						<input type="checkbox" name="add_account_check" class="add_account_check pointer" ${this.#inviteAccountMapper.hasOwnProperty(accountName) ? 'checked' : ''}/>
					`
				});
				Object.assign(li.dataset,{
					id,
					account_name: accountName,
					full_name: fullName,
					workspace_id: workspaceId,
					job_grade: jobGrade,
					department
				});
				this.#addItemEvent(li);
				return li;
			})

			this.#liList.push(...liList);
			this.#accountInviteRoomViewAccountList.replaceChildren(...this.#liList);
			resolve(liList);
		});
	}

	addListItemVisibleEvent(liList){
		return new  Promise(resolve => {
			if(liList.length == 0){
				resolve(liList);
			}
			this.#lastItemVisibleObserver.disconnect();
			this.#lastItemVisibleObserver.observe(liList.at(-1));
			resolve(liList);
		})
	}
	#addItemEvent(li){
		return new Promise(resolve => {
			let checkbox = li.querySelector('[name="add_account_check"]');
			li.onclick = (event) => {
				if(event.target === checkbox){
					return;
				}
				checkbox.click();
			}
			checkbox.onchange = (event) => {
				if(checkbox.checked){
					this.#inviteAccountMapper[li.dataset.account_name] = Object.assign({}, li.dataset)
				}else{
					delete this.#inviteAccountMapper[li.dataset.account_name]
				}
			}
			resolve(li);
		});
	}
	reset(){
		this.page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#accountInviteRoomViewAccountList.replaceChildren();
	}

}

/***/ }),

/***/ "./view/js/component/option/SimpleOption.js":
/*!**************************************************!*\
  !*** ./view/js/component/option/SimpleOption.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   simpleOption: () => (/* binding */ simpleOption)
/* harmony export */ });
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/* harmony import */ var _handler_IndexedDBHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/IndexedDBHandler */ "./view/js/handler/IndexedDBHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _component_option_GiveAdminView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @component/option/GiveAdminView */ "./view/js/component/option/GiveAdminView.js");








/**
 * @author kimjoohyoung
 * @description 간단한 옵션 내용 정의
 */
const simpleOption = new class SimpleOption{
    
    #wrap = Object.assign(document.createElement('div'), {
        className: 'simple_option'
    })
    #container = Object.assign(document.createElement('ul'), {
        className: 'simple_option_container'
    })

    #componentOption;

    #dbOpenPromise

    #indexedDBHandler

    #attendRequestObject = this.#createPermitRequest();

    #giveAdminObject = this.#createGiveAdmin();

    #isAdmin;

    #giveAdminView = new _component_option_GiveAdminView__WEBPACK_IMPORTED_MODULE_4__["default"](this);

    constructor(){
        
        /*this.#accountInfoPromise.then((accountInfo)=>{
            console.log(accountInfo); // undefined
        })*/

        window.myAPI.getOption('componentOption').then((option) => {
            this.componentOption = option?.OPTION_VALUE || 'responsive';
        });
        window.myAPI.event.electronEventTrigger.addElectronEventListener('optionChange', ({name, value}) => {
            if(name == 'componentOption'){
                this.componentOption = value;
            }
        })
        /* 멀티 윈도우에서 동시에 동일한 데이터베이스를 바라볼 수 없어서 주석 처리 20231214
        this.#indexedDBHandler = new IndexedDBHandler({
            dbName: 'simpleOptionDB',
            storeName: 'simpleOption',
            columnInfo: {
                optionName: ['optionName', 'optionName', {unique: true}],
                value: ['value', 'value'],
                lastModified: ['lastModified','lastModified'],
            },
            keyPathNameList: ['optionName'],
            pkAutoIncrement: false
        })

        this.#dbOpenPromise = this.#indexedDBHandler.open();

        this.#dbOpenPromise.then(() => {
            this.#indexedDBHandler.getItem('componentOption').then(dbRequest=>{
                if( ! dbRequest.result){
                    this.#componentOption = 'responsive'
                    return;
                }
                this.#componentOption = dbRequest.result.value;
                if(this.#componentOption == 'nomal'){
                    document.body.parentElement.style.fontSize = '100%';
                }else{
                    document.body.parentElement.style.fontSize = '';
                }
            })
        })
        */

        let simpleMemory = {};
        
        window.myAPI.event.electronEventTrigger.addElectronEventListener('workspacePermitRequestAccept', (event)=>{
            
            if( ! this.#isAdmin) return;

            let {content = event} = event;
            console.log(content);
            let {attendRequest} = this.#attendRequestObject
            let item = Object.assign(document.createElement('li'),{
                className: 'attend_request_item',
                innerHTML:`
                    <div class="attend_request_item_container">
                        <div class="attend_request_item_emain">
                            <span>${content.email}</span>
                        </div>
                        <div class="attend_request_item_name">
                            <span>${content.fullName}</span>
                        </div>
                        <div class="attend_request_item_position">
                            <span>${content.jobGrade}</span>
                            <span>${content.department}</span>
                        </div>
                    </div>
                    <div class="attend_request_item_button_wrapper">
                        <button class="attend_request_item_permit" value="PERMIT">permit</button>
                        <button class="attend_request_tiem_reject" value="REJECT">reject</button>
                    </div>
                `
            })
            let [permit, reject] = item.querySelectorAll('.attend_request_item_permit, .attend_request_tiem_reject');
            [permit, reject].forEach(e=>{
                e.onclick = () => {
                    if( ! this.#isAdmin) return;
                    window.myAPI.workspace.createPermitWokrspaceInAccount({
                        id:content.id,
                        workspaceId:content.workspaceId,
                        permitType:e.value,
                        accountName: content.accountName
                    })
                }
            })
            if( ! simpleMemory[content.workspaceId]){
                simpleMemory[content.workspaceId] = {};
            }

            simpleMemory[content.workspaceId][content.accountName] = item

            if(_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId == content.workspaceId){
                //console.log(Object.values(simpleMemory[content.workspaceId]))
                attendRequest.replaceChildren(
                    ...Object.values(simpleMemory[content.workspaceId])
                )
            }

        })
        window.myAPI.event.electronEventTrigger.addElectronEventListener('workspacePermitResultAccept', (event)=>{
            if( ! this.#isAdmin) return;
            let {content = event} = event;

            if(_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId == content.workspaceId){
                let {attendRequest} = this.#attendRequestObject
                delete simpleMemory[content.workspaceId][content.accountName];
                attendRequest.replaceChildren(
                    ...Object.values(simpleMemory[content.workspaceId])
                )
            }
        })
        //console.log(workspaceHandler.workspaceId);
        _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].addWorkspaceIdChangedListener = {
            name: 'simpleOptuon',
            callBack: () => {
                window.myAPI.workspace.getIsAdmin({workspaceId : _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId}).then(result => {
                    if(result.code == 0){
                        this.#isAdmin = result.data;
                    }else{
                        //alert('admin authentication failed, ::: ' + result.message);
                    }
                    if(this.#isAdmin){
                        window.myAPI.workspace.searchPermitRequestList({workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId}).then(result=>{
                            console.log('result >>> ', result);
                        });
                    }
                    if(this.#wrap.isConnected) this.open();
                });
                
            },
            runTheFirst: false
        }

        this.#giveAdminView.onOpenCloseCallback = (status) => {
            this.#giveAdminView.reset();
			if(status == 'open'){
				this.#giveAdminView.callData(this.#giveAdminView.page, this.#giveAdminView.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId, this.#giveAdminView.form.fullName.value)
				.then(data => {
					this.#giveAdminView.createPage(data).then(liList => {
						this.#giveAdminView.addListItemVisibleEvent(liList);
					})
				})
			}
        }
    }

    #createComponentOption(){
        let li = Object.assign(document.createElement('li'), {

        });
        
        let title = Object.assign(document.createElement('span'), {
            textContent: 'Component Option'
        })

        let optionContainer = Object.assign(document.createElement('div'), {
            className: 'component_option_container',
            innerHTML: `
                <div>
                    <label for="component_option_responsive">Responsive</label>
                    <input type="radio" name="component_option" id="component_option_responsive" value="responsive" ${this.#componentOption == "responsive" ? 'checked' : ''}/>
                        
                </div>
                <div>
                    <label for="component_option_nomal">Nomal</label>
                    <input type="radio" name="component_option" id="component_option_nomal" value="nomal" ${this.#componentOption == "nomal" ? 'checked' : ''}/>
                </div>
            `
        })

        optionContainer.onchange = (event) => {
            if(event.target.type != 'radio'){
                return;
            }
            this.componentOption = event.target.value;

            window.myAPI.setOption({name : 'componentOption', value : this.#componentOption});

            this.open();

            /* 멀티 윈도우에서 동시에 동일한 데이터베이스를 바라볼 수 없어서 주석 처리 20231214
            this.#indexedDBHandler.addItem({
                optionName: 'componentOption',
                value: event.target.value,
                lastModified: new Date().getTime()
            })
            */
        }

        li.onmouseenter = () => {
            li.append(optionContainer)
        }

        li.onmouseleave = () => {
            optionContainer.remove();
        }

        li.append(title);

        return li;
    }

    #createPermitRequest(){
        let li = Object.assign(document.createElement('li'), {

        });
        let title = Object.assign(document.createElement('span'),{
            textContent: 'Attend Request'
        })
        


        let attendRequest = Object.assign(document.createElement('ul'), {
            className: 'attend_request_container',
        });

        li.append(title);
        li.onmouseenter = () => {
            li.append(attendRequest)
        }

        li.onmouseleave = () => {
            attendRequest.remove();
        }
        return {li, title, attendRequest};
    }

    #createGiveAdmin(){
        
        let li = Object.assign(document.createElement('li'), {
            className: 'pointer'
        });
        let title = Object.assign(document.createElement('span'),{
            textContent: 'Give Admin'
        })

        li.append(title);
        li.onclick = () => {
            this.#giveAdminView.open();
        }

        return {li, title};
    }
    
    #createSimpleProfile(){
        if( ! _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo) return '';
        console.log(_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo);

        let li = Object.assign(document.createElement('li'), {

        });
        let title = Object.assign(document.createElement('span'), {
            textContent: 'Edit Profile'
        });
        li.append(title);
        let simpleProfileContainer = Object.assign(document.createElement('form'), {
            id : 'simple_profile_container',
            innerHTML : `
            <div class="simple_profile_input_container">
                <label for="simple_profile_full_name">Full Name</label>
                <input type="text" id="simple_profile_full_name" name="fullName" value="${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo?.fullName || ''}"/>
            </div>
            <div class="simple_profile_input_container">
                <label for="simple_profile_job_grade">Job Grade</label>
                <input type="text" id="simple_profile_job_grade" name="jobGrade" value="${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo?.jobGrade || ''}"/>
            </div>
            <div class="simple_profile_input_container">
                <label for="simple_profile_department">Department</label>
                <input type="text" id="simple_profile_department" name="department" value="${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo?.department || ''}"/>
            </div>
            <br/>
            <div class="simple_profile_button_container">
                <button type="submit" id="simple_profile_apply_button">apply</button>
                <button type="button" id="simple_profile_cancel_button">cancel</button>
            </div>
            `,
        });

        simpleProfileContainer.onsubmit = (event)=>{
            event.preventDefault();
            let fullName = simpleProfileContainer.simple_profile_full_name.value;
            let jobGrade = simpleProfileContainer.simple_profile_job_grade.value;
            let department = simpleProfileContainer.simple_profile_department.value;
            
            if(
                _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo.fullName == fullName &&
                _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo.jobGrade == jobGrade &&
                _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo.fullName == department
            ){
                return;
            }

            window.myAPI.account.updateSimpleAccountInfo({
                fullName, jobGrade, department
            }).then(result => {
                console.log('result updateSimpleAccountInfo ::: ', result);
                if(_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.accountInfo.fullName != fullName){
                    window.myAPI.room.createMySelfRoom({workspaceId : _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId});
                }
                _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_2__.accountHandler.searchAccountInfo();
            })

        }
        simpleProfileContainer.simple_profile_cancel_button.onclick = () => {
            simpleProfileContainer.remove();
        }
        li.append(title);
        li.onmouseenter = () => {
            li.append(simpleProfileContainer)
        }

        li.onmouseleave = () => {
            simpleProfileContainer.remove();
        }
        return li;
    }
    set componentOption(option){
        this.#componentOption = option;
        if(this.#componentOption == 'nomal'){
            document.body.parentElement.style.fontSize = '100%';
        }else{
            document.body.parentElement.style.fontSize = '';
        }
    }
    get componentOption(){return this.#componentOption;}

    async open(){
        document.body.append(this.#wrap);
        this.#wrap.append(this.#container)
        let contentList = [this.#createComponentOption(), this.#createSimpleProfile()];
        if(_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_3__["default"].workspaceId && this.#isAdmin){
            contentList.push(this.#attendRequestObject.li);
            contentList.push(this.#giveAdminObject.li);
        }
        this.#container.replaceChildren(...contentList)
    }

    close(){
        this.#wrap.remove();
    }

    get wrap(){
        return this.#wrap;
    }
}


/***/ }),

/***/ "./view/js/component/room/RoomContainer.js":
/*!*************************************************!*\
  !*** ./view/js/component/room/RoomContainer.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _room_item_RoomMenuList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./room_item/RoomMenuList */ "./view/js/component/room/room_item/RoomMenuList.js");
/* harmony import */ var _room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./room_item/RoomFavoritesList */ "./view/js/component/room/room_item/RoomFavoritesList.js");
/* harmony import */ var _room_item_RoomList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./room_item/RoomList */ "./view/js/component/room/room_item/RoomList.js");
/* harmony import */ var _room_item_RoomMessengerList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./room_item/RoomMessengerList */ "./view/js/component/room/room_item/RoomMessengerList.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomContainer{

	#contentList 
	#wrap = (()=>{
		let wrap = Object.assign(document.createElement('div'),{
			id:'room_wrapper',
			innerHTML: '<div class="content"></div>'
		})
		wrap.dataset.is_resize = true;
		wrap.dataset.grow = 0.55;
		return wrap;
	})();
	#container = (() => {
		let roomContainer = Object.assign(document.createElement('flex-layout'), {

		});
		roomContainer.dataset.direction = 'column'
		return roomContainer;
	})();
	constructor(){
		_room_item_RoomMenuList__WEBPACK_IMPORTED_MODULE_0__["default"].element.dataset.is_resize = true;
		_room_item_RoomMenuList__WEBPACK_IMPORTED_MODULE_0__["default"].element.dataset.grow = 0;

		_room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_1__["default"].element.dataset.is_resize = true;
		//roomFavoritesList.element.dataset.grow = 0;

		_room_item_RoomList__WEBPACK_IMPORTED_MODULE_2__["default"].element.dataset.is_resize = true;
		//roomList.element.dataset.grow = 0;

		_room_item_RoomMessengerList__WEBPACK_IMPORTED_MODULE_3__["default"].element.dataset.is_resize = true;
		//roomMessengerList.element.dataset.grow = 0;

		this.#contentList = [_room_item_RoomMenuList__WEBPACK_IMPORTED_MODULE_0__["default"].element, _room_item_RoomFavoritesList__WEBPACK_IMPORTED_MODULE_1__["default"].element, _room_item_RoomList__WEBPACK_IMPORTED_MODULE_2__["default"].element, _room_item_RoomMessengerList__WEBPACK_IMPORTED_MODULE_3__["default"].element]

		this.#container.replaceChildren(...this.#contentList)
		this.#wrap.querySelector('.content').append(this.#container);
		
		this.#contentList.forEach(wrap => {
			//document에 connect되지 않아서 minHeight가 무조건 0인 현상 수정 //20231005
			let connectedAwait = setInterval(()=>{
				if( ! wrap.isConnected){
					return;
				}
				clearInterval(connectedAwait);
				let flexLayout = wrap.closest('flex-layout');

				let [
					roomSticky, roomContentList, scrollbar
				] = wrap.querySelectorAll('.room_sticky, .room_content_list, .room_scrollbar'); 

				let roomContainerListScroll = wrap.querySelector('.list_scroll')
				let customDetailsTitle = wrap.querySelector('[data-bind_name="customDetailsTitle"]')
				let customDetails = wrap.querySelector('.custom_details');
				let customDetailsSummary = customDetails.closest('.custom_details_summary')

				let minHeight = customDetailsSummary.getBoundingClientRect().height;

				wrap.style.minHeight = minHeight + 'px';
				wrap.ontransitionend = () => {
					wrap.style.transition = '';
				}
				customDetailsTitle.onclick = () => customDetails.click();
				customDetails.onclick = () => {
					let isOpen = customDetails.hasAttribute('data-is_open');
					
					if(isOpen){
						customDetails.textContent = customDetails.dataset.close_status;
						customDetails.dataset.previous_flex = wrap.style.flex;
						//wrap.style.transition = 'flex 0.5s';
						minHeight = customDetailsSummary.getBoundingClientRect().height;
						wrap.style.minHeight = minHeight + 'px';
						//wrap.style.flex = '0 1 0%';
						//wrap.dataset.grow = 0;
						flexLayout.closeFlex(wrap, {isResize : true});
						roomContainerListScroll.style.overflow = 'hidden';
						customDetails.removeAttribute('data-is_open');
					}else{
						customDetails.textContent = customDetails.dataset.open_status;
						//wrap.style.transition = 'flex 0.5s';
						wrap.style.flex = customDetails.dataset.previous_flex;
						//wrap.style.flex = '1 1 0%';
						//wrap.dataset.grow = 1;
						flexLayout.openFlex(wrap, {isResize : true});
						roomContainerListScroll.style.overflow = '';
						customDetails.setAttribute('data-is_open', '');
					}
				}
				window.addEventListener('resize', () => {
					minHeight = customDetailsSummary.getBoundingClientRect().height;
					wrap.style.minHeight = minHeight + 'px';
				})
				new IntersectionObserver((entries, observer) => {
					entries.forEach(entry =>{
						let wrapRect = wrap.getBoundingClientRect();
						if(! entry.isIntersecting){
							if(wrapRect.height <= minHeight){
								customDetails.removeAttribute('data-is_open', '');
								customDetails.textContent = customDetails.dataset.close_status;
								roomContainerListScroll.style.overflow = 'hidden';
							}
						}else{
							if(wrapRect.height > minHeight){
								customDetails.setAttribute('data-is_open', '');
								customDetails.textContent = customDetails.dataset.open_status;
								roomContainerListScroll.style.overflow = '';
							}
						}
					});
				}, {
					threshold: 0.01,
					root: wrap
				}).observe(customDetailsSummary.nextElementSibling);

			},100);
		})
	}

	get container(){
		return this.#container;
	}

	get wrap(){
		return this.#wrap;
	}
}());

/***/ }),

/***/ "./view/js/component/room/room_item/CreateMessengerView.js":
/*!*****************************************************************!*\
  !*** ./view/js/component/room/room_item/CreateMessengerView.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CreateMessengerView)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @component/LayerPopupTemplate */ "./view/js/component/LayerPopupTemplate.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");






class CreateMessengerView extends _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_1__["default"]{

	#layerContent = Object.assign(document.createElement('div'),{
		innerHTML: `
			<style>
				form#create_messenger_view{
					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					text-align: center;
					gap: 2vh;
					position: relative;
				}
				#create_messenger_view_account_list{
					width: 80%;
					height: 50vh;
					overflow-y: auto;
					max-height: 1%;
				}

				#create_messenger_view_account_list::-webkit-scrollbar{
					display: none;
				}
				#create_messenger_view_account_list:hover::-webkit-scrollbar{
					display: initial;
					width: 8px;
				}
				#create_messenger_view_account_list::-webkit-scrollbar-track{
					background: #00000000;
				}
				#create_messenger_view_account_list::-webkit-scrollbar-thumb {
					background: #d8a1b6;
					border-radius: 100px;
					box-shadow: inset 0 0 5px #000000;
				}
				#create_messenger_view_account_list::-webkit-scrollbar-thumb:hover {
					/*background: #44070757;*/
					background: #893e3e
				}

				#create_messenger_view_account_list > li{
					border-top: outset 1px;
					position: relative;
					display: flex;
					align-items: center;
					justify-content: center;
				}
				#create_messenger_view_account_list > li > input.add_account_check{
				}
				#create_messenger_view_account_list > li .create_room_view_department, 
				#create_messenger_view_account_list > li .create_room_view_job_grade,
				#create_messenger_view_account_list > li .create_room_view_account_name{
					color: #b1b1b1;
				}
				#create_messenger_view_account_list > li .create_room_view_department,
				#create_messenger_view_account_list > li .create_room_view_account_name{
					font-weight: lighter;
				}
				#create_messenger_view_account_list > li .create_room_view_separator{
					color: #6937a16b;
				}
				/*#create_messenger_view_account_list > li .create_room_view_job_grade,*/
				#create_messenger_view_account_list > li .create_room_view_full_name,
				#create_messenger_view_account_list > li .create_room_view_separator{
					font-weight: bold;
				}
				#create_messenger_view_account_list > li .create_room_view_full_name{
					color: #789bb9b8;
				}
				#create_messenger_view_account_list > li .create_room_view_account_info{
					width: 100%
				}
			</style>
			<form id="create_messenger_view">
				<div>
					<label for="create_messenger_view_search_user">Please enter the users you want to invite.</label>
					<input type="search" id="create_messenger_view_search_user" name="fullName"/>
				</div>
				<ul id="create_messenger_view_account_list">
				</ul>
				<div>
					<button type="button" id="create_messenger_view_button">Create</button>
				</div>
			</from>
		`
	})

	/**
	 * full 네임으로 검색 ex) ${fullName}(${accountName}) 형식
	 */
	#accountInviteRoomViewAccountList = this.#layerContent.querySelector('#create_messenger_view_account_list');
	page = 0;
	size = 10;
	#liList = [];
	form = this.#layerContent.querySelector('#create_messenger_view');

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.page += 1;
				let roomName = this.form.fullName.value;
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, roomName).then(data=>{
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
					if(this.page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#inviteAccountMapper = {};

	constructor(owner){
		super(owner);
		super.container.append(this.#layerContent)
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'createMessengerView',
			callBack: (handler) => {
				this.workspaceId = handler.workspaceId;
			},
			runTheFirst: true
		}
		this.form.onsubmit = (event) => {
			//console.log(event);
			event.preventDefault();
			/*let fullName = this.form.create_room_search_user.value;
			this.reset();
			this.callData(this.page, this.size, this.#workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});*/
		};
		this.form.create_messenger_view_search_user.onkeydown = (event) => {
			if(event.key != 'Enter'){
				return;
			}
			let fullName = this.form.create_messenger_view_search_user.value;
			this.reset();
			this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});
		}
		this.form.create_messenger_view_search_user.oninput = (event) => {
			if(this.form.create_messenger_view_search_user.value == ''){
				this.reset();
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId).then(data => {
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
				});
			}
		}
		
		this.form.create_messenger_view_button.onclick = (event) => {
			let inviteAccountList = Object.values(this.#inviteAccountMapper);
			let createRoomParam = {
				roomName : [
					...inviteAccountList.map(e=>e.full_name),
					_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.fullName
				].sort((a,b)=> a.localeCompare(b)).join(','),
				workspaceId : _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomType : 'MESSENGER',
				inviteAccountList: inviteAccountList.map(e=>e.account_name)
			}
			window.myAPI.room.createRoom(createRoomParam).then((createRoomEvent)=>{
				console.log(createRoomEvent);
				if(createRoomEvent.code == 0){
					_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_2__["default"].roomId = createRoomEvent.data.id;
					super.close();
					window.myAPI.room.createRoomInAccount(
						inviteAccountList.map(e=>{	
							return {
								roomId: createRoomEvent.data.id,
								accountName: e.account_name,
								fullName: e.full_name,
								workspaceId: e.workspace_id,
								jobGrade: e.job_grade,
								department: e.department,
								roomType: 'MESSENGER',
							};
						})
					).then(()=>{
						this.#inviteAccountMapper = {};
					})
					return;
				}
				alert(createRoomEvent.message);
			});
		}
	}
	
	callData(page, size, workspaceId, fullName){
		return window.myAPI.workspace.searchWorkspaceInAccount({
			page, size, workspaceId, fullName
		}).then((data = {}) =>{
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
			}

			let liList = content.map(item => {
				let {
					accountName,
					fullName,
					workspaceId,
					jobGrade,
					department
				} = item;
				
				let departmentHtml = department ? `<small class="create_room_view_department">${department}</small>` : '';
				let separatorHtml = department && jobGrade ? `<span class="create_room_view_separator">/&nbsp</span>` : '';
				let jobGradeHtml = jobGrade ? `${separatorHtml}<small class="create_room_view_job_grade">${jobGrade}</small>` : '';

				let li = Object.assign(document.createElement('li'), {
					className: 'pointer',
					innerHTML: `
						<div class="create_room_view_account_info">
							<div>
								<span class="create_room_view_full_name">${fullName}</span>
								<span class="create_room_view_account_name">(${accountName})</span>
							</div>
							<div>
								${departmentHtml}
								${jobGradeHtml}
							</div>
						</div>
						<input type="checkbox" name="add_account_check" class="add_account_check pointer" ${this.#inviteAccountMapper.hasOwnProperty(accountName) ? 'checked' : ''}/>
					`
				});
				Object.assign(li.dataset,{
					account_name: accountName,
					full_name: fullName,
					workspace_id: workspaceId,
					job_grade: jobGrade,
					department
				});
				this.#addItemEvent(li);
				return li;
			})

			this.#liList.push(...liList);
			this.#accountInviteRoomViewAccountList.replaceChildren(...this.#liList);
			resolve(liList);
		});
	}

	addListItemVisibleEvent(liList){
		return new  Promise(resolve => {
			if(liList.length == 0){
				resolve(liList);
			}
			this.#lastItemVisibleObserver.disconnect();
			this.#lastItemVisibleObserver.observe(liList.at(-1));
			resolve(liList);
		})
	}
	#addItemEvent(li){
		return new Promise(resolve => {
			let checkbox = li.querySelector('[name="add_account_check"]');
			li.onclick = (event) => {
				if(event.target === checkbox){
					return;
				}
				checkbox.click();
			}
			checkbox.onchange = (event) => {
				if(checkbox.checked){
					this.#inviteAccountMapper[li.dataset.account_name] = Object.assign({}, li.dataset)
				}else{
					delete this.#inviteAccountMapper[li.dataset.account_name]
				}
			}
			resolve(li);
		});
	}
	reset(){
		this.page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#accountInviteRoomViewAccountList.replaceChildren();
	}

}

/***/ }),

/***/ "./view/js/component/room/room_item/CreateRoomView.js":
/*!************************************************************!*\
  !*** ./view/js/component/room/room_item/CreateRoomView.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CreateRoomView)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @component/LayerPopupTemplate */ "./view/js/component/LayerPopupTemplate.js");




class CreateRoomView extends _component_LayerPopupTemplate__WEBPACK_IMPORTED_MODULE_2__["default"]{

	#layerContent = Object.assign(document.createElement('div'),{
		innerHTML: `
			<style>
				form#create_room_view{
					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					text-align: center;
					gap: 2vh;
					position: relative;
				}
				label[for="room-is-private"]{
					display: flex;
    				align-items: center;
				}
				#create_room_view_account_list{
					width: 80%;
					height: 30vh;
					overflow-y: auto;
					max-height: 1%;
				}

				#create_room_view_account_list::-webkit-scrollbar{
					display: none;
				}
				#create_room_view_account_list:hover::-webkit-scrollbar{
					display: initial;
					width: 8px;
				}
				#create_room_view_account_list::-webkit-scrollbar-track{
					background: #00000000;
				}
				#create_room_view_account_list::-webkit-scrollbar-thumb {
					background: #d8a1b6;
					border-radius: 100px;
					box-shadow: inset 0 0 5px #000000;
				}
				#create_room_view_account_list::-webkit-scrollbar-thumb:hover {
					/*background: #44070757;*/
					background: #893e3e
				}

				#create_room_view_account_list > li{
					border-top: outset 1px;
					position: relative;
					display: flex;
					align-items: center;
					justify-content: center;
				}
				#create_room_view_account_list > li > input.add_account_check{
				}
				#create_room_view_account_list > li .create_room_view_department, 
				#create_room_view_account_list > li .create_room_view_job_grade,
				#create_room_view_account_list > li .create_room_view_account_name{
					color: #b1b1b1;
				}
				#create_room_view_account_list > li .create_room_view_department,
				#create_room_view_account_list > li .create_room_view_account_name{
					font-weight: lighter;
				}
				#create_room_view_account_list > li .create_room_view_separator{
					color: #6937a16b;
				}
				/*#create_room_view_account_list > li .create_room_view_job_grade,*/
				#create_room_view_account_list > li .create_room_view_full_name,
				#create_room_view_account_list > li .create_room_view_separator{
					font-weight: bold;
				}
				#create_room_view_account_list > li .create_room_view_full_name{
					color: #789bb9b8;
				}
				#create_room_view_account_list > li .create_room_view_account_info{
					width: 100%
				}
			</style>
			<form id="create_room_view">
				<div>
					<div>
						<label for="create_room_name">your room name</label>
					</div>
					<input name="roomName" id="create_room_name" />
				</div>
				<div>
					<label for="create_room_search_user">Please enter the users you want to invite.</label>
					<input type="search" id="create_room_search_user" name="fullName"/>
				</div>
				<ul id="create_room_view_account_list">
				</ul>
				<div>
					<label for="room-is-private" class="pointer">room is private?
						<input type="checkbox" id="room-is-private" name="roomType" class="pointer"/>
					</label>
				</div>
				<div>
					<button type="button" id="create_room_view_button">Create</button>
				</div>
			</from>
		`
	})

	/**
	 * full 네임으로 검색 ex) ${fullName}(${accountName}) 형식
	 */
	#createRoomviewAccountList = this.#layerContent.querySelector('#create_room_view_account_list');
	page = 0;
	size = 10;
	#liList = [];
	form = this.#layerContent.querySelector('#create_room_view');

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.page += 1;
				let roomName = this.form.fullName.value;
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, roomName).then(data=>{
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
					if(this.page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#inviteAccountMapper = {};

	constructor(owner){
		super(owner);
		super.container.append(this.#layerContent)
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'createRoomView',
			callBack: (handler) => {
				this.reset();
				let fullName = this.form.create_room_search_user.value;
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, fullName).then(data => {
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
				});
			},
			runTheFirst: true
		}
		this.form.onsubmit = (event) => {
			//console.log(event);
			event.preventDefault();
			/*let fullName = this.form.create_room_search_user.value;
			this.reset();
			this.callData(this.page, this.size, this.#workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});*/
		};
		this.form.create_room_search_user.onkeydown = (event) => {
			if(event.key != 'Enter'){
				return;
			}
			let fullName = this.form.create_room_search_user.value;
			this.reset();
			this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, fullName).then(data => {
				this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
			});
		}
		this.form.create_room_search_user.oninput = (event) => {
			if(this.form.create_room_search_user.value == ''){
				this.reset();
				this.callData(this.page, this.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId).then(data => {
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
				});
			}
		}
		
		this.form.create_room_view_button.onclick = (event) => {
			let inviteAccountList = Object.values(this.#inviteAccountMapper);
			let createRoomParam = {
				roomName : this.form.roomName.value,
				workspaceId : _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomType : this.form.roomType.checked ? 'ROOM_PRIVATE' : 'ROOM_PUBLIC',
			}
			window.myAPI.room.createRoom(createRoomParam).then((createRoomEvent)=>{
				console.log(createRoomEvent);
				if(createRoomEvent.code == 0){
					_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId = createRoomEvent.data.id;
					super.close();
					window.myAPI.room.createRoomInAccount(
						inviteAccountList.map(e=>{	
							return {
								roomId: createRoomEvent.data.id,
								accountName: e.account_name,
								fullName: e.fullName,
								workspaceId: e.workspace_id,
								jobGrade: e.jobGrade,
								department: e.department,
								roomType: this.form.roomType.checked ? 'ROOM_PRIVATE' : 'ROOM_PUBLIC'	
							};
						})
					).then(()=>{
						this.#inviteAccountMapper = {};
					})
					return;
				}
				alert(createRoomEvent.message);
			});
		}
	}
	
	callData(page, size, workspaceId, fullName){
		return window.myAPI.workspace.searchWorkspaceInAccount({
			page, size, workspaceId, fullName
		}).then((data = {}) =>{
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
			}

			let liList = content.map(item => {
				let {
					accountName,
					fullName,
					workspaceId,
					jobGrade,
					department
				} = item;
				
				let departmentHtml = department ? `<small class="create_room_view_department">${department}</small>` : '';
				let separatorHtml = department && jobGrade ? `<span class="create_room_view_separator">/&nbsp</span>` : '';
				let jobGradeHtml = jobGrade ? `${separatorHtml}<small class="create_room_view_job_grade">${jobGrade}</small>` : '';
				
				let li = Object.assign(document.createElement('li'), {
					className: 'pointer',
					innerHTML: `
						<div class="create_room_view_account_info">
							<div>
								<span class="create_room_view_full_name">${fullName}</span>
								<span class="create_room_view_account_name">(${accountName})</span>
							</div>
							<div>
								${departmentHtml}
								${jobGradeHtml}
							</div>
						</div>
						<input type="checkbox" name="add_account_check" class="add_account_check pointer" ${this.#inviteAccountMapper.hasOwnProperty(accountName) ? 'checked' : ''}/>
					`
				});
				Object.assign(li.dataset,{
					account_name: accountName,
					full_name: fullName,
					workspace_id: workspaceId,
					job_grade: jobGrade,
					department
				});
				this.#addItemEvent(li);
				return li;
			})

			this.#liList.push(...liList);
			this.#createRoomviewAccountList.replaceChildren(...this.#liList);
			resolve(liList);
		});
	}

	addListItemVisibleEvent(liList){
		return new  Promise(resolve => {
			if(liList.length == 0){
				resolve(liList);
			}
			this.#lastItemVisibleObserver.disconnect();
			this.#lastItemVisibleObserver.observe(liList.at(-1));
			resolve(liList);
		})
	}
	#addItemEvent(li){
		return new Promise(resolve => {
			let checkbox = li.querySelector('[name="add_account_check"]');
			li.onclick = (event) => {
				if(event.target === checkbox){
					return;
				}
				checkbox.click();
			}
			checkbox.onchange = (event) => {
				if(checkbox.checked){
					this.#inviteAccountMapper[li.dataset.account_name] = Object.assign({}, li.dataset)
				}else{
					delete this.#inviteAccountMapper[li.dataset.account_name]
				}
			}
			resolve(li);
		});
	}
	reset(){
		this.page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#createRoomviewAccountList.replaceChildren();
	}

}

/***/ }),

/***/ "./view/js/component/room/room_item/RoomFavoritesList.js":
/*!***************************************************************!*\
  !*** ./view/js/component/room/room_item/RoomFavoritesList.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomFavoritesList{

	#memory = {};

	#page = 0;
	#size = 10;
	#element = Object.assign(document.createElement('div'), {
		id: 'room-favorites-wrapper',
		innerHTML: `
			<div class="room_container list_scroll list_scroll-y" data-bind_name="roomContainer">
				<div class="room_sticky">
					<div class="custom_details_summary" data-bind_name="customDetailsSummary">
						<div class="custom_details_wrapper">
							<button class="custom_details" data-open_status="▼" data-close_status="▶" data-is_open="" data-bind_name="customDetails">▼</button>	
							<b class="pointer custom_details_title" data-bind_name="customDetailsTitle"><i>Favorites</i></b>
						</div>
					</div>
					<div class="room_functions" data-bind_name="roomFunctions">
						<form id="menu_search" data-bind_name="menuSearch">
							<input type="search" placeholder="Press Enter Key" class="search_name" name="searchName" data-bind_name="searchName">
						</form>
					</div>
				</div>
				<ul class="room_content_list" data-bind_name="roomContentList">
				</ul>
			</div>
		` 
	})

	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();
	#positionChanger;

	#liList = [];

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.#page += 1;
				let promise;
				let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId]?.[this.#page] || {});
				if(this.#elementMap.searchName.value == '' && memory && memory.length != 0){
					promise = Promise.resolve(
						memory
					);
				}else{
					promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
					then(data => 
						this.createPage(data)
						.then(liList => {        
							if(this.#page >= data.totalPages){
								this.#lastItemVisibleObserver.disconnect();
							}
							return liList;
						})
					)
				}
				promise.then(liList => {
					this.#liList.push(...liList);
					this.#liList = Object.values(this.#liList.reduce((total, item)=>{
						if(total.hasOwnProperty(item.dataset.room_id)){
							return total;	
						}
						total[item.dataset.room_id] = item;
						return total;
					}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
					this.#elementMap.roomContentList.replaceChildren(...this.#liList);
					this.#lastItemVisibleObserver.disconnect();
					if(liList.length == 0){
						return;
					}
					let lastVisibleTarget = this.#liList.at(-1);
					if(lastVisibleTarget){
						this.#lastItemVisibleObserver.observe(lastVisibleTarget)
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});


	constructor(){
		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomFavoritesListMemory = this.#memory;
		this.#positionChanger = new _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__["default"]({wrapper: this.#elementMap.roomContentList});
		this.#positionChanger.onDropEndChangePositionCallback = (changeList) => {
			console.log(changeList);
			console.log([...new Set(changeList)])
			window.myAPI.room.updateRoomFavorites(changeList.map(e=>{
				return {
					id: e.dataset.id, 
					roomId: e.dataset.room_id, 
					orderSort: e.dataset.order_sort,
				}
			})).then(data=>{
				console.log(data);
			})
		}
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'roomFavoritesList',
			callBack: (handler) => {
				this.refresh();
			},
			runTheFirst: true
		};
		this.#positionChanger.onDropDocumentOutCallback = ({target, event}) => {
			window.myAPI.createSubWindow({
				workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomId: target.dataset.room_id,
				width: parseInt(window.outerWidth * 0.7),
				height: parseInt(window.outerHeight * 0.7),
				x: event.x,
				y: event.y,
				pageName: 'multipleChattingView',
				pageId : target.dataset.room_id,
				title : _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName
			})
		}


		this.#elementMap.menuSearch.onsubmit = (event) => {
			event.preventDefault();
			this.refresh();
		}
		this.#elementMap.searchName.oninput = (event) => {
			if(this.#elementMap.searchName.value == ''){
				this.refresh();
			}
		}

		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].addRoomIdChangeListener = {
			name: 'roomFavoritesList',
			callBack: (handler) => {
				console.log(handler.roomId);
				new Promise(resolve => {
					this.#liList.forEach((item) => {
						let itemRoomId = Number(item.dataset.room_id);
						if(isNaN(itemRoomId)){
							//resolve();
							return;
						}
						item.style.fontWeight = '';
					});
					resolve();
				})
				let targetRoom = this.#liList.find(e=> e.dataset.room_id == handler.roomId);
				if(! targetRoom){
					this.#elementMap.searchName.value = '';
					this.refresh();
					return;
				}
				targetRoom.style.fontWeight = 'bold';
				document.head.querySelector('title').textContent = handler.room.roomName + ' - Grease Lightning Chat';
			},
			runTheFirst: false
		}
	}

	callData(page, size, workspaceId, roomName){
		return window.myAPI.room.searchRoomFavoritesList({
			page, size, workspaceId, roomName
		}).then((data = {}) =>{
			console.log(data)
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
				return;
			}
			return Promise.all(content.map(item => 
                this.createItemElement(item)
            )).then((liList = [])=>{
				if(liList.length == 0){
                    resolve(liList);
                }
				this.#liList.push(...liList);
				this.#elementMap.roomContentList.replaceChildren(...this.#liList);
				if(roomName == ''){
					this.#positionChanger.addPositionChangeEvent(this.#liList);
				}
               resolve(liList);
            });
		});
	}
	createItemElement(item){
		let {
			id,
			roomId,
			orderSort,
			roomCode,
			roomName,
			isEnabled,
			workspaceId,
			roomType
		} = item;
		return new Promise(resolve=>{
			let roomTypeMark = `
			<svg width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" clip-rule="evenodd" d="M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7Z" fill="currentColor"/>
				<path d="M16 15C16 14.4477 15.5523 14 15 14H9C8.44772 14 8 14.4477 8 15V21H6V15C6 13.3431 7.34315 12 9 12H15C16.6569 12 18 13.3431 18 15V21H16V15Z" fill="currentColor"/>
			</svg>
			`;
			if(roomType == 'ROOM_PUBLIC'){
				roomTypeMark = `
				<svg class="room_public" style="transform: rotate(-3deg);" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M8 4V8H4V10H8V14H4V16H8V20H10V16H14V20H16V16H20V14H16V10H20V8H16V4H14V8H10V4H8ZM14 14V10H10V14H14Z" fill="currentColor"/>
				</svg>
				`;
			}else if(roomType == 'ROOM_PRIVATE'){
				roomTypeMark = `
				<svg class="room_private" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M18 10.5C19.6569 10.5 21 11.8431 21 13.5V19.5C21 21.1569 19.6569 22.5 18 22.5H6C4.34315 22.5 3 21.1569 3 19.5V13.5C3 11.8431 4.34315 10.5 6 10.5V7.5C6 4.18629 8.68629 1.5 12 1.5C15.3137 1.5 18 4.18629 18 7.5V10.5ZM12 3.5C14.2091 3.5 16 5.29086 16 7.5V10.5H8V7.5C8 5.29086 9.79086 3.5 12 3.5ZM18 12.5H6C5.44772 12.5 5 12.9477 5 13.5V19.5C5 20.0523 5.44772 20.5 6 20.5H18C18.5523 20.5 19 20.0523 19 19.5V13.5C19 12.9477 18.5523 12.5 18 12.5Z" fill="currentColor"/>
				</svg>
				`;
			}else if(roomType == 'MESSENGER'){
				let roomNameList = roomName.split(',');
				let targetIndex = roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.fullName);
				if(targetIndex != -1){
					roomNameList.splice(roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_3__.accountHandler.accountInfo.fullName), 1);
				}
				roomName = roomNameList.sort((a,b)=> a.localeCompare(b)).join(', ')
			}else{ // ROOM_TYPE == SELF
				roomName = '나';
			}
			let li = Object.assign(document.createElement('li'), {
				className: 'room_container_item pointer',
				innerHTML: `
					<div class="room_container_item_container">
						<span>${roomTypeMark}</span>
						<span>${roomName}</span>
					</div>
				`
			});
			if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId && roomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId){
				let appendAwait = setInterval(()=>{
					if( ! li.isConnected) return;
					clearInterval(appendAwait);
					if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId == roomId){
						li.style.fontWeight = 'bold';
					}
				},50)
			}
			Object.assign(li.dataset, {
				id,
				room_id: roomId,
				prev_order_sort: orderSort,
				order_sort: orderSort,
				room_code: roomCode,
				room_name: roomName,
				is_enabled: isEnabled,
				workspace_id: workspaceId,
				room_type: roomType
			});
			li.draggable = true;
			this.#addMemory(li, roomId);
			this.#addItemEvent(li);
			resolve(li);
		});
	}
	#addItemEvent(li){
		return new Promise(resolve => {
			li.onclick = () => {
				if(li.dataset.room_id == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId) return;
				_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId = li.dataset.room_id;
			}
			resolve(li);
		});
	}

	#addMemory(data, roomId){
		if( ! this.#memory.hasOwnProperty(_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId)){
			this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId] = {};
		}
		if( ! this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId].hasOwnProperty(this.#page)){
			this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId][this.#page] = {};
		}
		if( ! data || ! roomId){
			return ;
		}
		this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId][this.#page][roomId] = data;
    }
	
	refresh(){
		this.reset();
		let promise;
		let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId] || {});
		if(this.#elementMap.searchName.value == '' && memory && memory.length != 0){
			this.#page = memory.length - 1;
			promise = Promise.resolve(
				memory.flatMap(e=>Object.values(e))
			);
		}else{
			promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
			then(data => 
				this.createPage(data)
				.then(liList => {        
					if(this.#page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
					return liList;
				})
			)
		}
		promise.then(liList => {
			this.#liList.push(...liList);
			this.#liList = Object.values(this.#liList.reduce((total, item)=>{
				if(total.hasOwnProperty(item.dataset.room_id)){
					return total;	
				}
				total[item.dataset.room_id] = item;
				return total;
			}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
			this.#elementMap.roomContentList.replaceChildren(...this.#liList);
			this.#lastItemVisibleObserver.disconnect();
			if(liList.length == 0){
				return;
			}
			let lastVisibleTarget = this.#liList.at(-1);
			if(lastVisibleTarget){
				this.#lastItemVisibleObserver.observe(lastVisibleTarget)
			}
		})
	}

	reset(){
		this.#page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#elementMap.roomContentList.replaceChildren();
	}
	
	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}

	get memory(){
		return this.#memory;
	}
		
	get liList(){
		return this.#liList;
	}
	
});


/***/ }),

/***/ "./view/js/component/room/room_item/RoomList.js":
/*!******************************************************!*\
  !*** ./view/js/component/room/room_item/RoomList.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _CreateRoomView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CreateRoomView */ "./view/js/component/room/room_item/CreateRoomView.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomList{
	#memory = {}

	#page = 0;
	#size = 10;
	#element = Object.assign(document.createElement('div'), {
		id: 'room_list_wrapper',
		innerHTML: `
			<div class="room_container list_scroll list_scroll-y" data-bind_name="roomContainer">
				<div class="room_sticky" data-bind_name="roomSticky">
					<div class="custom_details_summary" data-bind_name="customDetailsSummary">
						<div class="custom_details_wrapper">
							<button class="custom_details" data-open_status="▼" data-close_status="▶" data-is_open="" data-bind_name="customDetails">▼</button>
							<b class="pointer custom_details_title" data-bind_name="customDetailsTitle"><i>Room</i></b>
						</div>
						<div class="add_button_wrapper">
							<button class="add_button" data-bind_name="addButton">╊</button>
						</div>
					</div>
					<div class="room_functions" data-bind_name="roomFunctions">
						<form id="menu_search" data-bind_name="menuSearch">
							<input type="search" placeholder="Press Enter Key" class="search_name" name="searchName" data-bind_name="searchName">
						</form>
					</div>
				</div>
				<ul class="room_content_list" data-bind_name="roomContentList">
				</ul>
			</div>
		` 
	})

	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();

	#liList = [];

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.#page += 1;
				let promise;
				let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId]?.[this.#page] || {});
				if(this.#elementMap.searchName.value == '' && memory && memory.length != 0){
					promise = Promise.resolve(
						memory
					);
				}else{
					promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
					then(data => 
						this.createPage(data)
						.then(liList => {        
							if(this.#page >= data.totalPages){
								this.#lastItemVisibleObserver.disconnect();
							}
							return liList;
						})
					)
				}
				promise.then(liList => {
					this.#liList.push(...liList);
					this.#liList = Object.values(this.#liList.reduce((total, item)=>{
						if(total.hasOwnProperty(item.dataset.room_id)){
							return total;	
						}
						total[item.dataset.room_id] = item;
						return total;
					}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
					this.#elementMap.roomContentList.replaceChildren(...this.#liList);
					this.#lastItemVisibleObserver.disconnect();
					if(liList.length == 0){
						return;
					}
					let lastVisibleTarget = this.#liList.at(-1);
					if(lastVisibleTarget){
						this.#lastItemVisibleObserver.observe(lastVisibleTarget)
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#positionChanger;
	#createRoomView;
	constructor(){
		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomListMemory = this.#memory;
		this.#positionChanger = new _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__["default"]({wrapper: this.#elementMap.roomContentList});
		this.#positionChanger.onDropEndChangePositionCallback = (changeList) => {
			window.myAPI.room.updateRoomInAccoutOrder(changeList.map(e=>{
				return {
					id: e.dataset.id, 
					roomId: e.dataset.room_id, 
					orderSort: e.dataset.order_sort,
				}
			})).then(data=>{
				console.log(data);
			})
		}

		this.#positionChanger.onDropDocumentOutCallback = ({target, event}) => {
			window.myAPI.createSubWindow({
				workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomId: target.dataset.room_id,
				width: parseInt(window.outerWidth * 0.7),
				height: parseInt(window.outerHeight * 0.7),
				x: event.x,
				y: event.y,
				pageName: 'multipleChattingView',
				pageId : target.dataset.room_id,
				title : _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName
			})
		}

		this.#createRoomView = new _CreateRoomView__WEBPACK_IMPORTED_MODULE_3__["default"](this);
		
		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'roomList',
			callBack: (handler) => {
				this.refresh();
			},
			runTheFirst: true
		}

		this.#elementMap.menuSearch.onsubmit = (event) => {
			event.preventDefault();
			this.refresh()
		}
		this.#elementMap.searchName.oninput = (event) => {
			if(this.#elementMap.searchName.value == ''){
				this.refresh()
			}
		}

		this.#createRoomView.onOpenCloseCallback = (status) => {
			this.#createRoomView.reset();
			if(status == 'open'){
				this.#createRoomView.callData(this.#createRoomView.page, this.#createRoomView.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#createRoomView.form.fullName.value)
				.then(data => {
					this.#createRoomView.createPage(data).then(liList => {
						this.#createRoomView.addListItemVisibleEvent(liList);
					})
				})
			}
		}

		this.#elementMap.addButton.onclick = () =>{
			this.#createRoomView.open();
		}

		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].addRoomIdChangeListener = {
			name: 'roomList',
			callBack: (handler) => {
				new Promise(resolve => {
					this.#liList.forEach((item) => {
						let itemRoomId = Number(item.dataset.room_id);
						if(isNaN(itemRoomId)){
							resolve();
							return;
						}else if(handler.roomId == itemRoomId){
							resolve();
							return;
						}
						item.style.fontWeight = '';
					})
					resolve();
				})
				let targetRoom = this.#elementMap.roomContentList.querySelector(`[data-room_id="${handler.roomId}"]`);
				if(! targetRoom){
					this.#elementMap.searchName.value = '';
					this.refresh();
					return;
				}
				targetRoom.style.fontWeight = 'bold';
				document.head.querySelector('title').textContent = handler.room.roomName + ' - Grease Lightning Chat';
			},
			runTheFirst: false
		}
		window.myAPI.event.electronEventTrigger.addElectronEventListener('roomAccept', event => {
			let {content} = event;
			if( ! ['ROOM_PUBLIC','ROOM_PRIVATE'].some(e=> e == content.roomType)){
				return;
			}
			//this.refresh();
			this.createItemElement(content)
			.then(li => {
				Object.entries(this.#memory[content.workspaceId] || {}).forEach(([page, obj]) => {
					if( ! obj.hasOwnProperty(event.roomId)){
						return;
					}
					this.#memory[content.workspaceId][page][content.roomId] = li;
				})
				this.refresh()
			})
		});
	}

	callData(page, size, workspaceId, roomName){
		return window.myAPI.room.searchMyJoinedRoomList({
			page, size, workspaceId, roomName, roomType: ['ROOM_PUBLIC','ROOM_PRIVATE']
		}).then((data = {}) =>{
			console.log(data)
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
				return;
			}
			return Promise.all(content.map(item => 
                this.createItemElement(item)
            )).then((liList = [])=>{
				if(liList.length == 0){
                    resolve(liList);
                }
				this.#liList.push(...liList);
				this.#elementMap.roomContentList.replaceChildren(...this.#liList);
				if(roomName == ''){
					this.#positionChanger.addPositionChangeEvent(this.#liList);
				}
               resolve(liList);
            });
		});
	}

	createItemElement(item){
		let {
			id,
			roomId,
			orderSort,
			roomCode,
			roomName,
			isEnabled,
			workspaceId,
			roomType
		} = item;
		return new Promise(resolve=>{
			let roomTypeMark;
			if(roomType == 'ROOM_PUBLIC'){
				roomTypeMark = `
				<svg class="room_public" style="transform: rotate(-3deg);" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M8 4V8H4V10H8V14H4V16H8V20H10V16H14V20H16V16H20V14H16V10H20V8H16V4H14V8H10V4H8ZM14 14V10H10V14H14Z" fill="currentColor"/>
				</svg>
				`;
			}else if(roomType == 'ROOM_PRIVATE'){
				roomTypeMark = `
				<svg class="room_private" width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M18 10.5C19.6569 10.5 21 11.8431 21 13.5V19.5C21 21.1569 19.6569 22.5 18 22.5H6C4.34315 22.5 3 21.1569 3 19.5V13.5C3 11.8431 4.34315 10.5 6 10.5V7.5C6 4.18629 8.68629 1.5 12 1.5C15.3137 1.5 18 4.18629 18 7.5V10.5ZM12 3.5C14.2091 3.5 16 5.29086 16 7.5V10.5H8V7.5C8 5.29086 9.79086 3.5 12 3.5ZM18 12.5H6C5.44772 12.5 5 12.9477 5 13.5V19.5C5 20.0523 5.44772 20.5 6 20.5H18C18.5523 20.5 19 20.0523 19 19.5V13.5C19 12.9477 18.5523 12.5 18 12.5Z" fill="currentColor"/>
				</svg>
				`;
			}
			let li = Object.assign(document.createElement('li'), {
				className: 'room_container_item pointer',
				innerHTML: `
					<div class="room_container_item_container">
						<span>${roomTypeMark}</span>
						<span>${roomName}</span>
					</div>
				`
			});
			if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId && roomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId){
				li.style.fontWeight = 'bold';
			}
			Object.assign(li.dataset, {
				id,
				room_id: roomId,
				prev_order_sort: orderSort,
				order_sort: orderSort,
				room_code: roomCode,
				room_name: roomName,
				is_enabled: isEnabled,
				workspace_id: workspaceId,
				room_type: roomType
			});
			li.draggable = true;
			this.#addMemory(li, workspaceId, roomId);
			this.#addItemEvent(li);
			resolve(li);
		})
	}

	#addItemEvent(li){
		return new Promise(resolve => {
			li.onclick = () => {
				if(li.dataset.room_id == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId) return;
				_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId = li.dataset.room_id;
			}
			resolve(li);
		});
	}

	#addMemory(data, workspaceId, roomId){
		if( ! this.#memory.hasOwnProperty(workspaceId)){
			this.#memory[workspaceId] = {};
		}
		if( ! this.#memory[workspaceId].hasOwnProperty(this.#page)){
			this.#memory[workspaceId][this.#page] = {};
		}
		if( ! data || ! roomId){
			return ;
		}
		this.#memory[workspaceId][this.#page][roomId] = data;
    }

	refresh(){
		this.reset();
		let promise;
		let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId] || {});
		if(memory && memory.length != 0 && this.#elementMap.searchName.value == ''){
			this.#page = memory.length - 1;
			promise = Promise.resolve(
				memory.flatMap(e=>Object.values(e))
			);
		}else{
			promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
			then(data => 
				this.createPage(data)
				.then(liList => {        
					if(this.#page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
					return liList;
				})
			)
		}
		promise.then(liList => {
			this.#liList.push(...liList);
			this.#liList = Object.values(this.#liList.reduce((total, item)=>{
				if(total.hasOwnProperty(item.dataset.room_id)){
					return total;	
				}
				total[item.dataset.room_id] = item;
				return total;
			}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
			this.#elementMap.roomContentList.replaceChildren(...this.#liList);
			this.#lastItemVisibleObserver.disconnect();
			if(liList.length == 0){
				return;
			}
			let lastVisibleTarget = this.#liList.at(-1);
			if(lastVisibleTarget){
				this.#lastItemVisibleObserver.observe(lastVisibleTarget)
			}
		})
	}

	reset(){
		this.#page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#elementMap.roomContentList.replaceChildren();
	}

	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}

	get liList(){
		return this.#liList;
	}
});


/***/ }),

/***/ "./view/js/component/room/room_item/RoomMenuList.js":
/*!**********************************************************!*\
  !*** ./view/js/component/room/room_item/RoomMenuList.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _CreateRoomView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CreateRoomView */ "./view/js/component/room/room_item/CreateRoomView.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomMenuList{
	#page = 0;
	#size = 10;
	#element = Object.assign(document.createElement('div'), {
		id: 'room_menu_list_wrapper',
		innerHTML: `
			<div class="room_container list_scroll list_scroll-y" data-bind_name="roomContainer">
				<div class="room_sticky" data-bind_name="roomSticky">
					<div class="custom_details_summary" data-bind_name="customDetailsSummary">
						<div class="custom_details_wrapper">
							<button class="custom_details" data-open_status="▼" data-close_status="▶" data-is_open="" data-bind_name="customDetails">▼</button>
							<b class="pointer custom_details_title" data-bind_name="customDetailsTitle"><i>Menu</i></b>
						</div>
						<div class="add_button_wrapper">
							<button class="add_button" data-bind_name="addButton">╊</button>
						</div>
					</div>
					<div class="room_functions" data-bind_name="roomFunctions">
						<form id="menu_search" data-bind_name="menuSearch">
							<input type="search" placeholder="Press Enter Key" class="search_name" name="searchName" data-bind_name="searchName">
						</form>
					</div>
				</div>
				<ul class="room_content_list" data-bind_name="roomContentList">
					<li class="pointer">최근 메시지</li>
					<li class="pointer">스크랩</li>
					<li class="pointer">반응 및 댓글</li>
					<li class="pointer">즐겨찾기</li>
					<li class="pointer">최근 메시지</li>
					<li class="pointer">스크랩</li>
					<li class="pointer">반응 및 댓글</li>
					<li class="pointer">즐겨찾기</li>
					<li class="pointer">최근 메시지</li>
					<li class="pointer">스크랩</li>
					<li class="pointer">반응 및 댓글</li>
					<li class="pointer">즐겨찾기</li>
				</ul>
			</div>
		` 
	})

	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();
	#positionChanger;

	#liList = [];

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.#page += 1;
				let roomName = this.#elementMap.searchName.value;
				/*
				this.callData(this.#page, this.#size, workspaceId, roomName).then(data=>{
					this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
					if(this.page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
				})
				*/
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});


	constructor(){
		/*
		this.#positionChanger = new PositionChanger({wrapper: this.#elementMap.roomContentList});

		this.#workspaceId = workspaceId;
		this.callData(this.#page, this.#size, this.#workspaceId).then(data => {
			this.createPage(data).then(liList=>this.addListItemVisibleEvent(liList));
		})

		this.#elementMap.menuSearch.onsubmit = (event) => {
			event.preventDefault();
			let roomName = this.#elementMap.searchName.value;
			this.reset();
			this.callData(this.#page, this.#size, this.#workspaceId, roomName).then(data => {
				this.createPage(data).then(liList=> this.addListItemVisibleEvent(liList))
			});
		}
		this.#elementMap.searchName.oninput = (event) => {
			if(this.#elementMap.searchName.value == ''){
				this.reset();
				this.callData(this.#page, this.#size, this.#workspaceId, undefined).then(data => {
					this.createPage(data).then(liList=> this.addListItemVisibleEvent(liList))
				});
			}
		}
		*/
	}

	callData(page, size, workspaceId, roomName){
		return window.myAPI.room.searchMyJoinedRoomList({
			page, size, workspaceId, roomName, roomType: ['ROOM_PUBLIC','ROOM_PRIVATE']
		}).then((data = {}) =>{
			console.log(data)
			return data.data;
		});
	}

	createPage(data, roomName = ''){
		return new Promise(resolve => {
			console.log(data);
			console.log(data.content)
			let {content = []} = data || {};
			console.log(content);
			if(content.length == 0){
				return;
			}
			let liList = content.map(item => {
				let {
					id,
					roomId,
					orderSort,
					roomCode,
					roomName,
					isEnabled,
					workspaceId,
					roomType
				} = item;
				let roomTypeMark;
				if(roomType == 'ROOM_PUBLIC'){
					roomTypeMark = '@';
				}else if(roomTypeMark == 'ROOM_PRIVATE'){
					roomTypeMark = '#';
				}
				let li = Object.assign(document.createElement('li'), {
					className: 'pointer',
					innerHTML: `
						<div>
							<span>${roomTypeMark}</span>
							<span>${roomName}</span>
						</div>
					`
				});
				Object.assign(li.dataset, {
					id,
					room_id: roomId,
					prev_order_sort: orderSort,
					order_sort: orderSort,
					room_code: roomCode,
					room_name: roomName,
					is_enabled: isEnabled,
					workspace_id: workspaceId,
					room_type: roomType
				});
				this.#addItemEvent(li);
				return li;
			});
			this.#liList.push(...liList);
			this.#elementMap.roomContentList.replaceChildren(...this.#liList);
			if(roomName == ''){
				this.#positionChanger.addPositionChangeEvent(this.#liList);
			}else{
				this.#liList.forEach(async (e)=>{
					new Promise(resolve=>{
						e.draggable = true;
						resolve();
					})
				})
			}
			resolve(liList);
		});
	}

	#addItemEvent(li){
		return new Promise(resolve => {
			li.onclick = () => {
				this.roomId = li.dataset.room_id;
			}
			resolve(li);
		});
	}

	addListItemVisibleEvent(liList){
		return new  Promise(resolve => {
			if(liList.length == 0){
				resolve(liList);
			}
			this.#lastItemVisibleObserver.disconnect();
			this.#lastItemVisibleObserver.observe(liList.at(-1));
			resolve(liList);
		})
	}

	reset(){
		this.#page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#elementMap.roomContentList.replaceChildren();
	}

	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}
});


/***/ }),

/***/ "./view/js/component/room/room_item/RoomMessengerList.js":
/*!***************************************************************!*\
  !*** ./view/js/component/room/room_item/RoomMessengerList.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @handler/PositionChangeer */ "./view/js/handler/PositionChangeer.js");
/* harmony import */ var _CreateMessengerView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CreateMessengerView */ "./view/js/component/room/room_item/CreateMessengerView.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomMessengerList{

	#memory = {};

	#page = 0;
	#size = 10;
	#element = Object.assign(document.createElement('div'), {
		id: 'room_messenger_wrapper',
		innerHTML: `
			<div class="room_container list_scroll list_scroll-y" data-bind_name="roomContainer">
				<div class="room_sticky" data-bind_name="roomSticky">
					<div class="custom_details_summary" data-bind_name="customDetailsSummary">
					<div class="custom_details_wrapper">
						<button class="custom_details" data-open_status="▼" data-close_status="▶" data-is_open="" data-bind_name="customDetails">▼</button>
						<b class="pointer custom_details_title" data-bind_name="customDetailsTitle"><i>Messenger</i></b>
					</div>
					<div class="add_button_wrapper">
						<button class="add_button" data-bind_name="addButton">╊</button>
					</div>
					</div>
					<div class="room_functions" data-bind_name="roomFunctions">
						<form id="menu_search" data-bind_name="menuSearch">
							<input type="search" placeholder="Press Enter Key" class="search_name" name="searchName" data-bind_name="searchName">
						</form>
					</div>
				</div>
				<ul class="room_content_list" data-bind_name="roomContentList">
				</ul>
			</div>
		` 
	})

	#elementMap = (()=>{
		return 	[...this.#element.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
			total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();
	#positionChanger;

	#liList = [];

	#lastItemVisibleObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry =>{
			if (entry.isIntersecting){
				this.#page += 1;
				let promise;
				let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId]?.[this.#page] || {});
				if(this.#elementMap.searchName.value == '' && memory && memory.length != 0){
					promise = Promise.resolve(
						memory
					);
				}else{
					promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
					then(data => 
						this.createPage(data)
						.then(liList => {        
							if(this.#page >= data.totalPages){
								this.#lastItemVisibleObserver.disconnect();
							}
							return liList;
						})
					)
				}
				promise.then(liList => {
					this.#liList.push(...liList);
					this.#liList = Object.values(this.#liList.reduce((total, item)=>{
						if(total.hasOwnProperty(item.dataset.room_id)){
							return total;	
						}
						total[item.dataset.room_id] = item;
						return total;
					}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
					this.#elementMap.roomContentList.replaceChildren(...this.#liList);
					this.#lastItemVisibleObserver.disconnect();
					let lastVisibleTarget = liList.at(-1);
					if(lastVisibleTarget){
						this.#lastItemVisibleObserver.observe(lastVisibleTarget)
					}
				})
			}
		})
	}, {
		threshold: 0.1,
		root: document//this.#elementMap.roomContentList
	});

	#createMessengerView;
	constructor(){
		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomMessengerListMemory = this.#memory;
		this.#positionChanger = new _handler_PositionChangeer__WEBPACK_IMPORTED_MODULE_2__["default"]({wrapper: this.#elementMap.roomContentList});
		this.#positionChanger.onDropEndChangePositionCallback = (changeList) => {
			window.myAPI.room.updateRoomInAccoutOrder(changeList.map(e=>{
				return {
					id: e.dataset.id, 
					roomId: e.dataset.room_id, 
					orderSort: e.dataset.order_sort,
				}
			})).then(data=>{
				console.log(data);
			})
		}
		this.#positionChanger.onDropDocumentOutCallback = ({target, event}) => {
			window.myAPI.createSubWindow({
				workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId,
				roomId: target.dataset.room_id,
				width: parseInt(window.outerWidth * 0.7),
				height: parseInt(window.outerHeight * 0.7),
				x: event.x,
				y: event.y,
				pageName: 'multipleChattingView',
				pageId : target.dataset.room_id,
				title : _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].room.roomName
			})
		}

		this.#createMessengerView = new _CreateMessengerView__WEBPACK_IMPORTED_MODULE_3__["default"](this);

		_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].addWorkspaceIdChangedListener = {
			name: 'roomMessengerList',
			callBack: (handler) => {
				this.refresh();
			},
			runTheFirst: true
		};

		this.#elementMap.menuSearch.onsubmit = (event) => {
			event.preventDefault();
			this.refresh();
		}
		this.#elementMap.searchName.oninput = (event) => {
			if(this.#elementMap.searchName.value == ''){
				this.refresh();
			}
		}

		this.#createMessengerView.onOpenCloseCallback = (status) => {
			this.#createMessengerView.reset();
			if(status == 'open'){
				this.#createMessengerView.callData(this.#createMessengerView.page, this.#createMessengerView.size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#createMessengerView.form.fullName.value)
				.then(data => {
					this.#createMessengerView.createPage(data).then(liList => {
						this.#createMessengerView.addListItemVisibleEvent(liList);
					})
				})
			}
		}

		this.#elementMap.addButton.onclick = () =>{
			this.#createMessengerView.open();
		}

		_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].addRoomIdChangeListener = {
			name: 'roomMessengerList',
			callBack: (handler) => {
				/*if(this.#roomId == handler.roomId){
					return;
				}*/
				new Promise(resolve => {
					this.#liList.forEach((item) => {
						let itemRoomId = Number(item.dataset.room_id);
						if(isNaN(itemRoomId)){
							resolve();
							return;
						}else if(handler.roomId == itemRoomId){
							resolve();
							return;
						}
						item.style.fontWeight = '';
					})
					resolve();
				})
				let targetRoom = this.#elementMap.roomContentList.querySelector(`[data-room_id="${handler.roomId}"]`);
				if(! targetRoom){
					this.#elementMap.searchName.value = '';
					this.refresh();
					return;
				}
				targetRoom.style.fontWeight = 'bold';
				document.head.querySelector('title').textContent = handler.room.roomName + ' - Grease Lightning Chat';
			},
			runTheFirst: false
		}

		/*window.myAPI.event.electronEventTrigger.addElectronEventListener('roomInAccountAccept', event => {
			console.log(event);
		})*/
		window.myAPI.event.electronEventTrigger.addElectronEventListener('roomAccept', event => {
			console.log('roomAccept ::: ',event);
			let {content} = event;
			if( ! ['SELF','MESSENGER'].some(e=> e == content.roomType)){
				return;
			}
			//this.refresh();
			this.createItemElement(content)
			.then(li => {
				//this.#liList.push(li);
				Object.entries(this.#memory[content.workspaceId] || {}).forEach(([page, obj]) => {
					if( ! obj.hasOwnProperty(event.roomId)){
						return;
					}
					this.#memory[content.workspaceId][page][content.roomId] = li;
				})
				this.refresh()
			})
		});
	}

	callData(page, size, workspaceId, roomName){
		return window.myAPI.room.searchMyJoinedRoomList({
			page, size, workspaceId, roomName, roomType: ['SELF','MESSENGER']
		}).then((data = {}) =>{
			return data.data;
		});
	}

	createPage(data){
		return new Promise(resolve => {
			let {content = []} = data || {};
			if(content.length == 0){
				resolve(content);
				return;
			}
			return Promise.all(content.map(item => 
                this.createItemElement(item)
            )).then((liList = [])=>{
				if(liList.length == 0){
                    resolve(liList);
                }
				this.#liList.push(...liList);
				this.#elementMap.roomContentList.replaceChildren(...this.#liList);
				if(this.#elementMap.searchName.value == ''){
					this.#positionChanger.addPositionChangeEvent(this.#liList);
				}
               resolve(liList);
            });
		});
	}

	createItemElement(item){
		let {
			id,
			roomId,
			orderSort,
			roomCode,
			roomName,
			isEnabled,
			workspaceId,
			roomType
		} = item;
		return new Promise(resolve=>{
			let roomTypeMark = `
			<svg width="1rem" height="1rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" clip-rule="evenodd" d="M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7Z" fill="currentColor"/>
				<path d="M16 15C16 14.4477 15.5523 14 15 14H9C8.44772 14 8 14.4477 8 15V21H6V15C6 13.3431 7.34315 12 9 12H15C16.6569 12 18 13.3431 18 15V21H16V15Z" fill="currentColor"/>
			</svg>
			`;
			/*
			if(roomType == 'ROOM_PUBLIC'){
				roomTypeMark = '@';
			}else if(roomTypeMark == 'ROOM_PRIVATE'){
				roomTypeMark = '#';
			}
			*/
			if(roomType == 'MESSENGER'){
				let roomNameList = roomName.split(',');
				let targetIndex = roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_4__.accountHandler.accountInfo.fullName);
				if(targetIndex != -1){
					roomNameList.splice(roomNameList.findIndex(e=> e == _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_4__.accountHandler.accountInfo.fullName), 1);
				}
				roomName = roomNameList.sort((a,b)=> a.localeCompare(b)).join(', ');
			}else{
				roomName = `나 (${roomName})`; 
			}
			let li = Object.assign(document.createElement('li'), {
				className: 'room_container_item pointer',
				innerHTML: `
					<div class="room_container_item_container">
						<span>${roomTypeMark}</span>
						<span>${roomName}</span>
					</div>
				`
			});
			if(_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId && roomId == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId){
				li.style.fontWeight = 'bold';
			}
			Object.assign(li.dataset, {
				id,
				room_id: roomId,
				prev_order_sort: orderSort,
				order_sort: orderSort,
				room_code: roomCode,
				room_name: roomName,
				is_enabled: isEnabled,
				workspace_id: workspaceId,
				room_type: roomType
			});
			li.draggable = true;
			this.#addMemory(li, workspaceId, roomId);
			this.#addItemEvent(li);
			resolve(li);
		});
	}

	#addItemEvent(li){
		return new Promise(resolve => {
			li.onclick = () => {
				if(li.dataset.room_id == _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId) return;
				_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_1__["default"].roomId = li.dataset.room_id;
			}
			resolve(li);
		});
	}

	#addMemory(data, workspaceId, roomId){
		if( ! this.#memory.hasOwnProperty(workspaceId)){
			this.#memory[workspaceId] = {};
		}
		if( ! this.#memory[workspaceId].hasOwnProperty(this.#page)){
			this.#memory[workspaceId][this.#page] = {};
		}
		if( ! data || ! roomId){
			return ;
		}
		this.#memory[workspaceId][this.#page][roomId] = data;
    }

	refresh(){
		this.reset();
		let promise;
		let memory = Object.values(this.#memory[_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId] || {});
		if(memory && memory.length != 0 && this.#elementMap.searchName.value == ''){
			this.#page = memory.length - 1;
			promise = Promise.resolve(
				memory.flatMap(e=>Object.values(e))
				.sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
			);
		}else{
			promise = this.callData(this.#page, this.#size, _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_0__["default"].workspaceId, this.#elementMap.searchName.value).
			then(data => 
				this.createPage(data)
				.then(liList => {        
					if(this.#page >= data.totalPages){
						this.#lastItemVisibleObserver.disconnect();
					}
					return liList;
				})
			)
		}
		promise.then(liList => {
			this.#liList.push(...liList);
			this.#liList = Object.values(this.#liList.reduce((total, item)=>{
				if(total.hasOwnProperty(item.dataset.room_id)){
					return total;	
				}
				total[item.dataset.room_id] = item;
				return total;
			}, {})).sort((a,b) => Number(b.dataset.order_sort) - Number(a.dataset.order_sort))
			this.#elementMap.roomContentList.replaceChildren(...this.#liList);
			this.#lastItemVisibleObserver.disconnect();
			let lastVisibleTarget = liList.at(-1);
			if(lastVisibleTarget){
				this.#lastItemVisibleObserver.observe(lastVisibleTarget)
			}
		})
	}

	reset(){
		this.#page = 0;
		this.#liList = [];
		this.#lastItemVisibleObserver.disconnect();
		this.#elementMap.roomContentList.replaceChildren();
	}

	get element(){
		return this.#element;
	}
	
	get elementMap(){
		return this.#elementMap;
	}
	
	get liList(){
		return this.#liList;
	}
});


/***/ }),

/***/ "./view/js/handler/IndexedDBHandler.js":
/*!*********************************************!*\
  !*** ./view/js/handler/IndexedDBHandler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ IndexedDBHandler)
/* harmony export */ });
/**
 * indexedDB 템플릿 (미완성)
 * @author mou123
 * @constructor
 */
class IndexedDBHandler{
	/**
	 * indexed db에서 사용할 db 식별 명칭
	 */
	#dbName;

	/**
	 * indexed db의 store에서 사용 할 컬럼 정보
	 */
	#columnInfo;

	/**
	 * store 식별 명칭
	 */
	#storeName;

	#db;

	isOpen = false;

	#container;

	#keyPathNameList

	#pkAutoIncrement

	/**
	 * 생성자
	 * @author mozu123
	 * @example 	
	#columnInfo = {
		boTempId:['boTempId','boTempId',{unique : true}],
		boTempName:['boTempName','boTempName'],
		boTempInsertTime:['boTempInsertTime','boTempInsertTime'],
		boTempData:['boTempData','boTempData']
	};
	 */
	constructor({
		dbName = undefined,
		columnInfo = undefined,
		storeName = undefined,
		keyPathNameList = [],
		pkAutoIncrement = true
	}){
		if( ! dbName ){
			throw new Error('dbName is undefined');
		}else if( ! columnInfo ){
			throw new Error('columnInfo is undefined');
		}else if( ! storeName ){
			throw new Error('storeName is undefined')
		}else if( keyPathNameList.length == 0 ){
			throw new Error('keyPathName is undefined')
		}else if(keyPathNameList.filter(e=>columnInfo[e]).length != keyPathNameList.length){
			throw new Error('invalid key path name')
		}else if(pkAutoIncrement == true && keyPathNameList.length > 1){
			throw new Error('multiple key not use autoIncrement : true');
		}
		else{
			this.#dbName = dbName;
			this.#columnInfo = columnInfo;
			this.#storeName = storeName;	
			this.#container = JSON.stringify(
				Object.entries(columnInfo).reduce((obj, [k,v], idx) => {
					obj[k] = undefined;
					return obj;
				}, {})
			)
			this.#keyPathNameList = keyPathNameList;
			this.#pkAutoIncrement = pkAutoIncrement;
		}
	}

	open(){
		return new Promise( (resolve, reject) => {

			const dbOpenRequest = indexedDB.open(this.DB_NAME);
			/**
			 * db open시 기존 버전 정보를 비교하였을 때, 업그레이드가 필요한 경우 동작하는 이벤트를 정의한다.
			 * @author mozu123
			 * @param {Event} e 
			 * @returns 
			 * @see this.upgradeneeded()
			 */
			dbOpenRequest.onupgradeneeded = (e) => this.upgradeneeded(e,{});
			
			/**
			 * db open시 동작하는 이벤트를 정의한다.
			 * @param {Event} e 
			 */
			dbOpenRequest.onsuccess = (e) => {

				this.isOpen = true;
				this.#db = e.target.result;
				let storeName = Object.entries(this.#db.objectStoreNames).find(([idx, storeName]) => storeName == this.DB_STORE_NAME)
				let isNewAddStore = ! storeName;

				let isNeedChangeIndex = false;

				if( ! isNewAddStore){
					let store = this.#db.transaction(this.DB_STORE_NAME, 'readwrite').objectStore(this.DB_STORE_NAME);
					let indexNamesMapper = Object.entries(store.indexNames).reduce((t,[idx,indexName])=>{
						t[indexName]=idx
						return t;
					},{});
					isNeedChangeIndex = 
						Object.entries(indexNamesMapper).findIndex(([name,idx]) => ! this.#columnInfo[name] ) != -1 ||
						Object.entries(this.#columnInfo).findIndex(([k,v])=> ! indexNamesMapper[k] ) != -1
				}

				if( isNewAddStore || isNeedChangeIndex ){
					
					let newVersion = Number(this.#db.version) + 1;
					console.log(this.#storeName, newVersion);
					// 기존 버전과 비교하였을 때 변경사항이 있어서 업그레이드(기존 정보 마이그레이션)가 필요 한 경우
					console.log(dbOpenRequest);
					this.close().then( closeResult => {
						const secondOpenRequest = indexedDB.open(this.DB_NAME, newVersion);
						console.log(secondOpenRequest)
						/**
						 * DB에 변동사항이 생겨 업그레이드가 필요하다면, 기존 db를 닫은 후 다시 열어서 신규 정보를 업그레이드 하는 이벤트가 동작하도록 한다.
						 * @author mozu123
						 * @param {Event} event 
						 * @returns 
						 */
						secondOpenRequest.onupgradeneeded = (event) => this.upgradeneeded(event, {isNewAddStore:isNewAddStore});
						
						/**
						 * 위에 입력된 로직에 따라 업그레이드가 완료된 경우 이 이벤트가 동작한다.
						 * @author mozu123
						 * @param {Event} event 
						 */
						secondOpenRequest.onsuccess = (event) => {
							this.isOpen = true;
							this.#db = event.target.result;
							resolve(this.isOpen);
						}
						secondOpenRequest.onblocked = (e) => {
							console.error(e);
						}
					});
					
				}else{
					resolve(this.isOpen);
				}
			}
			dbOpenRequest.onblocked = (e) => {
				console.log(e);
			}
			/**
			 * db open시 어떤 이유로 인해 오류가 발생할 때 동작하는 이벤트
			 * @param {Event} e 
			 */
			dbOpenRequest.onerror = (e) => {
				console.log(e);
				this.isOpen = false;
				if(e.target.error.name == 'VersionError'){
					//error code
					reject(new Error('VersionError: DB 버전을 수동으로 입력해선 안됩니다.'));
				}else{
					//error code
					console.error(e);
					reject(new Error(`unknownError ${e}`))
				}
			}
		})
	}

	close(){
		return new Promise( resolve => {
			if( ! this.#db || ! this.isOpen){
				resolve(false)
			}
			this.#db.onabort = (e) => console.log(e)
			this.#db.onerror = (e) => console.log(e);
			this.#db.close();
			this.isOpen = false;
			this.#db.onclose = (event) => {
				this.isOpen = false;
				resolve(true)
			}
			resolve(true);
		})
	}

	/**
	 * DB NAME을 가져오는 getter
	 * @author mou123
	 */
	get DB_NAME(){
		return this.#dbName;
	}

	/**
	 * @author mou123
	 */
	get DB_STORE_NAME(){
		return this.#storeName;
	}

	get COLUMN_INFO(){
		return this.#columnInfo;
	}

	get template(){
		return JSON.parse(this.#container);
	}

	/**
	 * indexed DB를 open 할 때 업그레이드 필요 여부에 따라 동작하는 함수를 정의한다.
	 * @author mou123
	 * @param {Event} event 
	 * @param {Object} isNewAddStore : 새롭게 등록되어야 할 store인지 여부 
	 */
	upgradeneeded(event,{isNewAddStore=false}){

		let objectStore;
		// newVersion이 oldVersion과 같지 않고 && oldVersion이 0이 아니며 *(최초 오픈시 0임) && 신규 store를 등록하는 것이 아니라면
		if(event.newVersion != event.oldVersion && event.oldVersion != 0 && ! isNewAddStore){
			objectStore = event.target.transaction.objectStore(this.DB_STORE_NAME);
			let indexNameList = Object.entries(objectStore.indexNames);
			let oldIndexCheckMapper = indexNameList.reduce((t,[idx,indexName])=>{
				t[indexName]=idx
				return t;
			},{});
			
			Object.entries(this.#columnInfo).forEach(([indexName, column])=>{
				if( ! oldIndexCheckMapper[ column[0] ]){
					objectStore.createIndex(...column);
				}
			});

			indexNameList.forEach(([k,indexName])=>{
				if( ! this.#columnInfo[indexName]){
					objectStore.deleteIndex(indexName);
				}
			})
		}else{
			//let keyPath = Object.values(this.#columnInfo).find(column => column.some(e=>e.unique))[0];
			let keyPath = this.#pkAutoIncrement || this.#keyPathNameList.length == 1 ? this.#keyPathNameList[0] : this.#keyPathNameList
			objectStore = event.target.result.createObjectStore(this.DB_STORE_NAME, { keyPath , autoIncrement : this.#pkAutoIncrement });
			Object.entries(this.#columnInfo).forEach( ([indexName, column]) => objectStore.createIndex(...column) );
		}
	}

	/**
	 * indexed db에 데이터를 저장하는 함수
	 * @param {Object} data : indexed db에 저장할 데이터 
	 * @returns {Promise}
	 */
	addItem(data = this.#container){
		return new Promise( (resolve, reject ) => {
			if( ! this.isOpen || ! this.#db){
				reject(new Error('indexedDB가 열려있지 않습니다.'));
			}
			let transaction = this.#db.transaction(this.DB_STORE_NAME, 'readwrite')
			let store = transaction.objectStore(this.DB_STORE_NAME);
			let request = store.put(data);
			request.onsuccess = (e) => {
				transaction.commit();
			}
			request.onerror = (e) => {
				console.log(e)
			}
			transaction.oncomplete = (e)=>{
				if(e.type == 'complete'){
					//alert('임시 저장을 완료하였습니다.');
					//console.log(e.type);
				}
				resolve(e);
			}
			transaction.onerror = (e)=>{
				//error code
				console.log(e)
				reject(new Error('commit error'))
			}
			//return resolve();
		});
	}

	/**
	 * 임시 저장 버튼 클릭시 동작할 함수
	 * @author mozu123
	 * @param {Object} data 
	 */
	/*tempSaveButtonClickEvent(data){
		if( ! data){
			throw new Error('임시 저장 할 데이터가 비어 있습니다.');
		}
		let boTempName = window.prompt('임시 저장 내용을 식별할 명칭을 지정해주세요.\n입력하지 않을시 현재 시간으로 저장됩니다.', new Date().toLocaleString());
		this.addTempItem(data, boTempName);
	}*/

	/**
	 * 임시 저장 목록에서 특정 조건을 만족하는 데이터만 추출할 떄 사용 할 함수 -> 미완성 (안만듬)
	 * @param {Object} param0 : 필터 검색 조건 데이터 
	 * @returns 
	 */
	//getTempFilterList({boTempId, boTempName, boTempInsertTime, pageNum=1, pageSize=5, startDateTime, endDateTime}){}
	
	getItem(key){
		return new Promise( (resolve, reject) => {
			let transaction = this.#db.transaction(this.DB_STORE_NAME, 'readonly');
			let objectStore = transaction.objectStore(this.DB_STORE_NAME);
			let request = objectStore.get(key);
			request.onerror = (event) => {
				console.error(event);
				reject(request);
			}

			request.onsuccess = (event) => {
				resolve(request);
			}
		})
	}

	/**
	 * 임시 저장 목록을 불러오는 함수 pageNum의 기본값은 1, pageSize의 기본값은 5
	 * @author mozu123
	 * @param {Object} param0 : 페이지 정보를 가지고 있는 객체
	 */
	getList({pageNum=1, pageSize=5, callback, readOption = 'readonly'} = {}){
		return new Promise((resolve, reject) => {

			let start = (pageSize * (pageNum - 1));
			let isEnableAdvanced = start != 0; 
			let count = 0;
			let transaction = this.#db.transaction(this.DB_STORE_NAME, readOption)
			let store = transaction.objectStore(this.DB_STORE_NAME);
			let result = {
				data:[],
				event:undefined
			};
			let cursorRequest = store.openCursor()
			cursorRequest.onsuccess = (event) => {
				const cursor = event.target.result;
				if( ! cursor ){
					return ;
				}else if(isEnableAdvanced){
					isEnableAdvanced = ! isEnableAdvanced
					cursor.advance(start);
					return;
				}
				if(callback instanceof Function){
					callback(cursor);
				}
				let value = cursor.value;
				result.data.push(value);
				count += 1;
				
				if(count >= pageSize){
					return;
				}else{
					cursor.continue();
				}
			};
			transaction.oncomplete = (event) => {
				result.event = event;
				return resolve(result);
			}
			transaction.onerror = (e) => reject(e);
			transaction.onabort = (e) => reject(e);
		});
	}

	/**
	 * 임시 저장 목록 중 특정 row를 삭제하는 함수
	 * @author mozu123
	 * @param  {...String} idList : 삭제 할 id 목록
	 * @returns {Promise} result : 삭제 몇건 했는지 count 한 정보를 담은 Object
	 */
	deleteList(...idList){
		if(idList.length == 0){
			return Promise.resolve()
		}
		return new Promise((resolve, reject) => {
			let transaction = this.#db.transaction(this.DB_STORE_NAME, 'readwrite')
			let store = transaction.objectStore(this.DB_STORE_NAME);
			let result = {successCount:0, failedCount:0};
			idList.forEach(id=>{
				let request = store.delete([id]);
				request.onsuccess = (e)=>{
					result.successCount += 1;
					transaction = e.target.transaction;
				}
				request.onerror = (e)=>{
					result.failedCount += 1;
				}
			});
			transaction.commit();
			transaction.oncomplete = (event) => {
				result.event = event;
				return resolve(result);
			}
			transaction.onerror = (e) => reject(e);
			transaction.onabort = (e) => reject(e);
		})
	}

	deleteDatabase(dbName){
		return new Promise( (resolve, reject) => {
			
			let deleteReuqest = indexedDB.deleteDatabase(dbName);
			deleteReuqest.onerror = (event) => {
				console.error(event);
				reject(event);
			}
			deleteReuqest.onsuccess = (event) => {
				console.log(event);
				resolve(event);
			}
		})
	}

}

/***/ }),

/***/ "./view/js/handler/PositionChangeer.js":
/*!*********************************************!*\
  !*** ./view/js/handler/PositionChangeer.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PositionChanger)
/* harmony export */ });
class PositionChanger{
	#wrapper;
	#targetItem;
	#childList = [];
	#onDropEndChangePositionCallback = (changeList) => {};
	#onDropDocumentOutCallback = (target) => {console.log('out!!', target)}; 
	#onIfCancelCallback = (target) => {return false;};
	constructor({wrapper}){
		if( ! wrapper){
			throw new Error('wrapper is undefined');
		}/*else if(childList.length == 0){
			throw new Error('child list is empty');
		}*/
		this.#wrapper = wrapper;
	}

	addPositionChangeEvent(child, wrapper){
		if(child.length == 0){
			throw new Error('child is empty');
		}else if(child.some(e=>Number(e.dataset.order_sort) == undefined || isNaN(Number(e.dataset.order_sort)))){
			console.error(child);
			throw new Error('data-order_sort is not defined or is not number')
		}
		let parent = wrapper || this.#wrapper;
		parent.dataset.is_position_change = '';
		let pointerEventTargetList = [];
		return new Promise(resolve => {
			
			let lastItem = [...parent.children].filter(e=>e.hasAttribute('data-order_sort')).pop() // or at(-1)
			child.forEach((item, index)=>{
				item.draggable = true;
				item.ondragstart = (event) => {
					event.stopPropagation();
					//event.preventDefault();
					this.#targetItem = item;
					//this.#targetItem = event.target;
					child.forEach(async e => {
						[...e.children].forEach((ee)=>{
							if(ee.hasAttribute('data-is_position_change')) {
								return;
							}
							ee.style.pointerEvents = 'none';
							ee.dataset.is_pointer_target = ''
						})
					})
				}
				item.ondragend = (event) => {
					event.stopPropagation();
					//event.preventDefault();
					if(
						event.x < 0 || event.y < 0 ||
						window.outerWidth < event.x || window.outerHeight < event.y
					){
						this.#onDropDocumentOutCallback({
							target:item,
							event
						});
					}
					this.#targetItem = undefined;
					
					new Promise(res => {
						document.querySelectorAll('[data-is_pointer_target]').forEach(e=>{
							e.style.pointerEvents = '';
							e.removeAttribute('data-is_pointer_target');
						})
						res();
					})
					if(item.__dragendCallback){
						item.__dragendCallback();
					}
				}
				item.ondragover = (event) => {
					event.stopPropagation();
					event.preventDefault();
				}
				item.ondragenter = (event) => {
					event.stopPropagation();
					event.preventDefault();
					event.target.style.borderTop = 'solid #0000009c';
				}
				item.ondragleave = (event) => {
					event.stopPropagation();
					event.preventDefault();
					event.target.style.borderTop = '';
				}
				item.ondrop = (event) => {
					event.stopPropagation();
					event.preventDefault();
					event.target.style.borderTop = '';

					if(! this.#targetItem){
						return;
					}
					//return;
					let target = this.#targetItem;
					let cancle = this.onIfCancelCallback(target, item)
					if((typeof cancle) != 'boolean'){
						throw new Error('onIfCancelCallback is only return Boolean');
					}else if(cancle){
						return;
					}
					//item.before(target);
					event.target.closest('[data-order_sort]').before(target);
					this.#targetItem = undefined;
					new Promise(res=>{
						let nowLastItem = [...parent.children].filter(e=>e.hasAttribute('data-order_sort')).pop(); // or at(-1)
						//let nowLastItem = [...target.closest('ul').children].filter(e=>e.hasAttribute('data-order_sort')).pop(); // or at(-1)
						//this.#wrapper.querySelector('[data-order_sort]:last-child');
						if( ! lastItem){
							lastItem = nowLastItem;
						}
						let prevOrderSort = Number(lastItem.dataset.order_sort);
						if(target == lastItem && lastItem != nowLastItem){
							nowLastItem.dataset.order_sort = lastItem.dataset.order_sort;
							prevOrderSort = Number(lastItem.dataset.order_sort);
							//prevOrderSort -= 1;
						}
						lastItem = nowLastItem
						let prevItem = lastItem?.previousElementSibling;
						while(prevItem){
							prevOrderSort += 1;
							prevItem.dataset.prev_order_sort = prevItem.dataset.order_sort
							prevItem.dataset.order_sort = prevOrderSort ;
							if(prevItem.previousElementSibling === prevItem){
								break;
							}
							prevItem = prevItem.previousElementSibling;
						}
						res();
					}).then(()=>{
						this.#onDropEndChangePositionCallback(
							[...new Set([...child.filter(e=>e.dataset.order_sort != e.dataset.prev_order_sort && e != target), target])],
							{item, target, parent}
						)
					})
				}
			})
			resolve();
		});
	}

	set onDropEndChangePositionCallback(callBack){
		this.#onDropEndChangePositionCallback = callBack;
	}
	get onDropEndChangePositionCallback(){
		return this.#onDropEndChangePositionCallback;
	}

	set onDropDocumentOutCallback(callBack){
		this.#onDropDocumentOutCallback = callBack;
	}
	get onDropDocumentOutCallback(){
		return this.#onDropDocumentOutCallback;
	}

	set onIfCancelCallback(callBack){
		this.#onIfCancelCallback = callBack
	}
	get onIfCancelCallback(){
		return this.#onIfCancelCallback;
	}

}

/***/ }),

/***/ "./view/js/handler/S3EncryptionUtil.js":
/*!*********************************************!*\
  !*** ./view/js/handler/S3EncryptionUtil.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s3EncryptionUtil: () => (/* binding */ s3EncryptionUtil)
/* harmony export */ });

const s3EncryptionUtil = new class S3EncryptionUtil{

	encoder = new TextEncoder();
	decoder = new TextDecoder();

	signAlgorithm = {
		name: "RSASSA-PKCS1-v1_5",
		// Consider using a 4096-bit key for systems that require long-term security
		modulusLength: 2048,
		publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
		hash: "SHA-256",
	}

	secretAlgorithm = {
		name: "RSA-OAEP",
		modulusLength: 2048,
		publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
		hash: "SHA-256",
	}

	async generateKeyPair(algorithm, keyUsages){
		return window.crypto.subtle.generateKey(
			algorithm,
			true,
			keyUsages//["sign", "verify"]
		);
	}

	async keySign(data, privateKey){
		let message = this.encoder.encode(data);
		return window.crypto.subtle.sign(this.signAlgorithm.name, privateKey, message).then(signature=>{
			return {message, signature};
		})
	}

	async decryptMessage(privateKey, ciphertext, algorithm) {
		return window.crypto.subtle.decrypt(
			{ name: algorithm.name },
			privateKey,
			ciphertext,
		).catch(err=>{
			console.error(err.message);
			console.error(err.stack);
		});
	}

	
	async convertBase64ToBuffer(base64){
		return fetch(`data:application/octet-binary;base64,${base64}`)
		.then(res=>res.arrayBuffer())
		.then(buffer=>new Uint8Array(buffer))
	}

	async exportKey(exportType, key){
		return window.crypto.subtle.exportKey(exportType, key).then(exportKey => {
			return new Promise( resolve => resolve(String.fromCharCode(...new Uint8Array(exportKey))) );
		}).then(exportKeyString => {
			return new Promise( resolve => resolve(window.btoa(exportKeyString)) );
		});
	}
	async callS3PresignedUrl(callFunction, signData, callFunctionParam = {} ){//,fileName, accountName){
		console.log('callFunctionParam !!! ',callFunctionParam);
		return Promise.all( [this.generateKeyPair(this.signAlgorithm, ["sign", "verify"]), this.generateKeyPair(this.secretAlgorithm, ["encrypt", "decrypt"])] )
		.then( ([signKeyPair, encDncKeyPair]) => {
			return Promise.all( [
				this.exportKey('spki', signKeyPair.publicKey),
				this.exportKey('spki', encDncKeyPair.publicKey), 
				Promise.resolve(encDncKeyPair), 
				Promise.resolve(signKeyPair)
			] )		
		}).then( async ([exportSignKey, exportEncKey, encDncKeyPair, signKeyPair]) => {

			let sign = await this.keySign(
				`${signData}:${exportEncKey}`, 
				signKeyPair.privateKey
			)
			
			let result = await callFunction(Object.assign(callFunctionParam, {
				data: window.btoa(String.fromCodePoint(...sign.message)), 
				dataKey: exportSignKey, 
				sign: window.btoa( String.fromCodePoint(...new Uint8Array(sign.signature)) ), 
			}))

			let {code, data} = result;
			
			if(code != 0){
				return ;
			}
			
			return {data, encDncKeyPair};
		})
	}

	async fetchPutObject(putUrl, key, md5, fileData){
		return fetch(putUrl, {
			method:"PUT",
			headers: {
				'Content-Encoding' : 'base64',
				'Content-Type' : 'application/octet-stream',
				'x-amz-server-side-encryption-customer-algorithm': 'AES256',
				'x-amz-server-side-encryption-customer-key': key,
				'x-amz-server-side-encryption-customer-key-md5': md5,
			},
			body: fileData
		})
	}
}

/***/ }),

/***/ "./view/js/handler/account/AccountHandler.js":
/*!***************************************************!*\
  !*** ./view/js/handler/account/AccountHandler.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   accountHandler: () => (/* binding */ accountHandler)
/* harmony export */ });
const accountHandler = new class AccountHandler{
    #accountInfo = this.searchAccountInfo();
    constructor(){

    }

    async searchAccountInfo(){
        this.#accountInfo = await window.myAPI.account.getAccountInfo().then(result => {
            return result.data;
        });
        return this.#accountInfo;
    }

    get accountInfo(){
        return this.#accountInfo;
    }
};

/***/ }),

/***/ "./view/js/handler/chatting/ChattingHandler.js":
/*!*****************************************************!*\
  !*** ./view/js/handler/chatting/ChattingHandler.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class ChattingHandler{
	#lastChattingId;
	#lastChatting;
    #addChattingEventListener = {};
    constructor(){
		window.myAPI.event.electronEventTrigger.addElectronEventListener('chattingAccept', data => {
			let {content} = data;
			//let {id, accountId, accountName, chatting, createAt, createBy, roomId, updateAt, updateBy} = data.content;
			this.#lastChattingId = content.id;
			this.#lastChatting = content;
			/*
			data:"{\"id\":null,\"accountId\":null,\"accountName\":\"test\",\"roomId\":null,\"chatting\":\"[{\\\"type\\\":1,\\\"name\\\":\\\"Line\\\",\\\"data\\\":{},\\\"cursor_offset\\\":\\\"10\\\",\\\"cursor_type\\\":\\\"3\\\",\\\"cursor_index\\\":\\\"0\\\",\\\"cursor_scroll_x\\\":null,\\\"cursor_scroll_y\\\":\\\"0\\\",\\\"childs\\\":[{\\\"type\\\":3,\\\"name\\\":\\\"Text\\\",\\\"text\\\":\\\"qweasdxzxc\\\"}]}]\",\"createAt\":null,\"createBy\":null,\"updateAt\":null,\"updateBy\":null}"
			lastEventId: ""
			origin: "http://localhost:8079"
			type: "message"
			*/
			
			Object.values(this.#addChattingEventListener).forEach(async callBack => {
                new Promise(res => {
                    callBack(content);
                    res();
                })
            });
		});
    }

    set addChattingEventListener({name, callBack}){
        this.#addChattingEventListener[name] = callBack;
    }

    get addChattingEventListener(){
        return this.#addChattingEventListener;
    }

	get lastChattingId(){
		return Number(this.#lastChattingId);
	}

	get lastChatting(){
		return Number(this.#lastChatting);
	}

});


/***/ }),

/***/ "./view/js/handler/editor/FreeWillEditor.js":
/*!**************************************************!*\
  !*** ./view/js/handler/editor/FreeWillEditor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FreeWillEditor)
/* harmony export */ });
/* harmony import */ var _component_Line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component/Line */ "./view/js/handler/editor/component/Line.js");
/* harmony import */ var _module_FreeWiilHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module/FreeWiilHandler */ "./view/js/handler/editor/module/FreeWiilHandler.js");
/* harmony import */ var _fragment_UndoManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fragment/UndoManager */ "./view/js/handler/editor/fragment/UndoManager.js");
/* harmony import */ var _tools_Strong__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tools/Strong */ "./view/js/handler/editor/tools/Strong.js");
/* harmony import */ var _tools_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tools/Color */ "./view/js/handler/editor/tools/Color.js");
/* harmony import */ var _tools_Background__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools/Background */ "./view/js/handler/editor/tools/Background.js");
/* harmony import */ var _tools_Strikethrough__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tools/Strikethrough */ "./view/js/handler/editor/tools/Strikethrough.js");
/* harmony import */ var _tools_Underline__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/Underline */ "./view/js/handler/editor/tools/Underline.js");
/* harmony import */ var _tools_FontFamily__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tools/FontFamily */ "./view/js/handler/editor/tools/FontFamily.js");
/* harmony import */ var _tools_Quote__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tools/Quote */ "./view/js/handler/editor/tools/Quote.js");
/* harmony import */ var _tools_NumericPoint__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tools/NumericPoint */ "./view/js/handler/editor/tools/NumericPoint.js");
/* harmony import */ var _tools_BulletPoint__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tools/BulletPoint */ "./view/js/handler/editor/tools/BulletPoint.js");
/* harmony import */ var _tools_Sort__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tools/Sort */ "./view/js/handler/editor/tools/Sort.js");
/* harmony import */ var _tools_FontSize__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tools/FontSize */ "./view/js/handler/editor/tools/FontSize.js");
/* harmony import */ var _tools_Italic__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tools/Italic */ "./view/js/handler/editor/tools/Italic.js");
/* harmony import */ var _tools_Image__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tools/Image */ "./view/js/handler/editor/tools/Image.js");
/* harmony import */ var _tools_Video__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tools/Video */ "./view/js/handler/editor/tools/Video.js");
/* harmony import */ var _tools_Resources__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tools/Resources */ "./view/js/handler/editor/tools/Resources.js");
/* harmony import */ var _tools_Code__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tools/Code */ "./view/js/handler/editor/tools/Code.js");
/* harmony import */ var _tools_Hyperlink__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tools/Hyperlink */ "./view/js/handler/editor/tools/Hyperlink.js");






















class FreeWillEditor extends _module_FreeWiilHandler__WEBPACK_IMPORTED_MODULE_1__["default"] {
	
	static componentsMap = {};
	static toolsMap = {};

	static LineBreakMode = class LineBreakMode{
		static #LineBreakModeEnum = class LineBreakModeEnum{
			value;
			constructor(value){
				this.value = value;
				Object.freeze(this);
			}
		}
		static NO_CHANGE = new this.#LineBreakModeEnum(1)
		static NEXT_LINE_FIRST = new this.#LineBreakModeEnum(2);
		static NEXT_LINE_LAST = new this.#LineBreakModeEnum(3);
	}

	#isLoaded = false;
	components;
	tools;
	#placeholder;
	#undoManager;
	isDefaultStyle = true;
	#toolButtonObserver = new MutationObserver( (mutationList, observer) => {
		mutationList.forEach((mutation) => {
			//if(mutation.oldValue == mutation.mutation.target.dataset.tool_status){
				// 동일한 동작이 수행되지 않도록 추가 2023 05 25
			//	return;
			//}
			if(this.contentEditable == 'false'){
				//observer.disconnect();
				return;
			}
			let selection = window.getSelection();
			/*if( ! selection.containsNode(this, true)){
				console.log(222)
				return;
			}*/
			let focusNode = selection.focusNode;
			let Tool = mutation.target.__Tool;
			if(mutation.target.dataset.tool_status == 'active' && mutation.oldValue != 'active' && Tool.prototype.isPrototypeOf(focusNode.parentElement) == false){
				this.#renderingTools(Tool);
			}else if(mutation.target.dataset.tool_status == 'cancel' && mutation.oldValue != 'cancel'){// && window.getSelection().isCollapsed == false){
				this.#removerTools(Tool);
			}
		});
	});
	constructor(
		tools = [
			_tools_Strong__WEBPACK_IMPORTED_MODULE_3__["default"],
			_tools_Color__WEBPACK_IMPORTED_MODULE_4__["default"],
			_tools_Background__WEBPACK_IMPORTED_MODULE_5__["default"],
			_tools_Strikethrough__WEBPACK_IMPORTED_MODULE_6__["default"],
			_tools_Underline__WEBPACK_IMPORTED_MODULE_7__["default"],
			_tools_FontFamily__WEBPACK_IMPORTED_MODULE_8__["default"],
			_tools_Quote__WEBPACK_IMPORTED_MODULE_9__["default"],
			_tools_NumericPoint__WEBPACK_IMPORTED_MODULE_10__["default"],
			_tools_BulletPoint__WEBPACK_IMPORTED_MODULE_11__["default"],
			_tools_Sort__WEBPACK_IMPORTED_MODULE_12__["default"],
			_tools_FontSize__WEBPACK_IMPORTED_MODULE_13__["default"],
			_tools_Italic__WEBPACK_IMPORTED_MODULE_14__["default"],
			_tools_Image__WEBPACK_IMPORTED_MODULE_15__["default"],
			_tools_Video__WEBPACK_IMPORTED_MODULE_16__["default"],
			_tools_Resources__WEBPACK_IMPORTED_MODULE_17__["default"],
			_tools_Code__WEBPACK_IMPORTED_MODULE_18__["default"],
			_tools_Hyperlink__WEBPACK_IMPORTED_MODULE_19__["default"],
		],
		{isDefaultStyle = true} = {}
	){
		super();
		if(isDefaultStyle){
			_module_FreeWiilHandler__WEBPACK_IMPORTED_MODULE_1__["default"].createDefaultStyle();
		}
		new Promise(resolve => {
			this.isDefaultStyle = isDefaultStyle;
			this.components = {
				'free-will-editor-line' : _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"]
			};
			this.tools = tools;
			this.classList.add('free-will-editor');

			Object.entries(this.components).forEach( ([className, Component]) => {
				if(className.includes(' ')){
					throw new DOMException(`The token provided ('${className}') contains HTML space characters, which are not valid in tokens.`);
				}
				if(FreeWillEditor.componentsMap[Component.name]){
					return;
				}
				Component.toolHandler.defaultClass = className;
				if( ! window.customElements.get(className)){
					window.customElements.define(className, Component, Component.toolHandler.extendsElement && Component.toolHandler.extendsElement != '' ? {extends:Component.toolHandler.extendsElement} : undefined);
				}	
				FreeWillEditor.componentsMap[Component.name] = Component;
			});
			
			this.tools.forEach( (Tool) => {
				if(FreeWillEditor.toolsMap[Tool.name]){
					return;
				}
				if(this.isDefaultStyle){
					Tool.createDefaultStyle();
				}
				Tool.toolHandler.toolButton.__Tool = Tool;
				// attribute에 value가 없어서 oldvalue가 ''이 나옵니다.
				// oldvalue로 구분할 수 있게 합시다.
				this.#toolButtonObserver.observe(Tool.toolHandler.toolButton, {
					attributeFilter:['data-tool_status'],
					attributeOldValue:true
				})
				
				if( ! window.customElements.get(Tool.toolHandler.defaultClass)){
					window.customElements.define(Tool.toolHandler.defaultClass, Tool, Tool.toolHandler.extendsElement && Tool.toolHandler.extendsElement != '' ? {extends:Tool.toolHandler.extendsElement} : undefined);
				}
				FreeWillEditor.toolsMap[Tool.name] = Tool;
			})
			
			

			let observer = new MutationObserver( (mutationList, observer) => {
				mutationList.forEach((mutation) => {
					//if(this.contentEditable == 'false'){
					//	return;
					//}
					
					if(this.childElementCount == 0){
						this.startFirstLine();
					}
					if( ! this.firstElementChild.line){
						new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](this.firstElementChild.line);
					}
					
					this.querySelectorAll('[data-placeholder]').forEach(async e => {
						e.removeAttribute('data-placeholder')
					})
					if(this.isEmpty){
						this.placeholder = this.#placeholder;
						//this.firstElementChild.dataset.placeholder = this.#placeholder
					}else{
						this.firstElementChild.setAttribute('data-placeholder', '');
					}
					//console.log(mutation.target);
					mutation.addedNodes.forEach(async element=>{
						new Promise(resolve=>{
							if(element.nodeType != Node.ELEMENT_NODE) return;
							/*
							let sty = window.getComputedStyle(element);
							
							if(sty.visibility == 'hidden' || sty.opacity == 0){
								return;
							}
							*/
							if(element.classList.contains(_component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].toolHandler.defaultClass)){
								if( ! element.line){
									new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](element);
								}
								if(element.innerText.length == 0 || (element.innerText.length == 1 && element.innerText.charAt(0) == '\n')){
									element.innerText = '\n';
									window.getSelection().setPosition(element, 1)
									element.focus();
								}
							}
							resolve();
						})
					})
					/*mutation.removedNodes.forEach(element=>{

					})*/
				})
			});
			observer.observe(this, {
				childList:true,
				subtree: true
			})
			resolve();
		});
	}

	connectedCallback(){
		this.#undoManager = new _fragment_UndoManager__WEBPACK_IMPORTED_MODULE_2__["default"](this);
		if( ! this.#isLoaded){
            this.#isLoaded = true;
			if(this.contentEditable == 'inherit' || this.contentEditable == true){
				this.contentEditable = true;
				this.tabIndex = 1;
				this.focus()
				if(this.isEmpty){
					this.startFirstLine();
				}
			}
		}
	}
	disconnectedCallback(){
		this.#undoManager = null;
        this.#isLoaded = false;
		//this.contentEditable = false;
		this.#toolButtonObserver.disconnect();
    }

	startFirstLine(){
		let lineElement = super.createLine();
		lineElement.line.isFirstLine = true;
		this.placeholder = this.#placeholder;
		return lineElement;
	}

	#removeAfterSelectionMove(targetElement){
		let selection = document.getSelection()
		let range =  new Range();//document.createRange()
		let targetLine = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(targetElement);
		range.setStartAfter(targetLine)
		range.setEnd(targetLine, targetElement.textContent.length - 1);
		selection.removeAllRanges()
		selection.addRange(range) 
	}

	#addAfterSelectionMove(targetElement){
		let selection = document.getSelection()
		let range =  new Range();//document.createRange()
		if( ! targetElement){
		//	return;
		}
		if(targetElement && targetElement.nodeType == Node.ELEMENT_NODE && targetElement.textContent.length == 0){
			//let emptyElement = document.createTextNode('\u200B')
			//targetElement.textContent = '\u200B'; //.append(emptyElement)
		}
		
		range.selectNodeContents(targetElement)
		range.setStart(targetElement, targetElement.length);
		range.setEnd(targetElement, targetElement.length);
		selection.removeAllRanges()
		selection.addRange(range)
		targetElement.removeAttribute('tabIndex');
		//cursor
		/*
		let observer = new MutationObserver( (mutationList, observer) => {
			mutationList.forEach((mutation) => {
				if(mutation.target.textContent.includes('\u200B')){
					if(targetElement.toolHandler && targetElement.toolHandler.toolButton ? true: false){
						targetElement.toolHandler.toolButton.setAttribute('data-is_alive', '');
					}
					mutation.target.textContent = mutation.target.textContent.replace('\u200B', '');
					console.log('146 :: targetElement.isConnected',targetElement.isConnected);
					console.log('147 :: targetElement',targetElement);
					if(targetElement.isConnected){
						selection.modify('move', 'forward', 'line')
					}
					targetElement.removeAttribute('tabIndex');
					observer.disconnect();
				}else{
					targetElement.removeAttribute('tabIndex');
					observer.disconnect();
				}
			});
		})

		observer.observe(targetElement, {
			characterData: true,
			characterDataOldValue: true,
			childList:true,
			subtree: true
		})
		*/
	}

	#renderingTools(TargetTool){
		let selection = window.getSelection();
		//if( ! anchorNodeLine || ! focusNodeLine){
		//	return;
		//}
		
		super.getLineRange(selection)
		.then(({startLine, endLine}) => { 
			if( ! startLine){
				startLine = endLine
			}
			if( ! startLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](startLine);
			}
			if( ! endLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](endLine);
			}
			return startLine.line.applyTool(TargetTool, selection.getRangeAt(0), endLine)
		})
		.then(lastApplyTool=> {
			if( ! this.#undoManager){
				this.#undoManager = new _fragment_UndoManager__WEBPACK_IMPORTED_MODULE_2__["default"](this);
			}
			this.#undoManager.addUndoRedo(true);
			let applyToolAfterSelection = window.getSelection(), range = applyToolAfterSelection.getRangeAt(0);
			let scrollTarget;
			if(range.endContainer.nodeType == Node.TEXT_NODE){
				scrollTarget = range.endContainer.parentElement
			}else{
				scrollTarget = range.endContainer;
			}
			scrollTarget.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
			applyToolAfterSelection.setPosition(scrollTarget, scrollTarget.childNodes.length - 1);
			//selection.setPosition(lastApplyTool, 0)
		})
		/*
		.then(tool=>{
			this.querySelectorAll(`.${TargetTool.toolHandler.defaultClass}`).forEach(async e =>{
				await new Promise(resolve=>{
					resolve();
				})
			})
			//this.#addAfterSelectionMove(tool);
		});
		*/
	}

	#removerTools(TargetTool){
		let selection = window.getSelection();
		let {isCollapsed, anchorNode, focusNode} = selection;
		/*
		// 범위 선택 x인 경우 넘어가기
		if(isCollapsed){
			return;
		}*/
		super.getLineRange(selection).then(({startLine, endLine})=> {
			console.log(endLine);
			if( ! startLine){
				startLine = endLine
			}
			if( ! startLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](startLine);
			}
			if( ! endLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](endLine);
			}
			startLine.line.cancelTool(TargetTool, selection, endLine);
		}).then(()=>{
			this.#undoManager.addUndoRedo(true);
			/*[...this.children]
			.filter(e=>e.classList.contains(`${Line.toolHandler.defaultClass}`))
			.forEach(lineElement=>{
				if(lineElement.line.isLineEmpty()){
					//lineElement.line = undefined;
					//lineElement.remove();
				}
			})*/
		})
	}
	
	async lineBreak(LineBreakMode = FreeWillEditor.LineBreakMode.NEXT_LINE_FIRST){
		let selection = window.getSelection();
		return super.getLineRange(selection)
		.then(({startLine, endLine}) => { 
			if( ! startLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](startLine);
			}
			if( ! endLine.line){
				new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](endLine);
			}
			let range = selection.getRangeAt(0);
			let {startOffset, endOffset, startContainer,endContainer} = range;
			let lastItem = startLine.lastChild
			let lastItemEndOffset = lastItem.nodeType == Node.TEXT_NODE ? lastItem.length : lastItem.childNodes.length;
			range.setStart(startContainer, startOffset);
			range.setEnd(lastItem, lastItemEndOffset);
			let lineElement = super.createLine();
			lineElement.append(range.extractContents());
			startLine.after(lineElement);
			if(LineBreakMode == FreeWillEditor.LineBreakMode.NEXT_LINE_FIRST){
				window.getSelection().setPosition(lineElement, 0);
			}else if(LineBreakMode == FreeWillEditor.LineBreakMode.NEXT_LINE_LAST){
				lineElement.line.lookAtMe();
			}

		})
	}

	async getLowDoseJSON(targetElement = this, {afterCallback = (json)=> {}} = {}){
		console.log(targetElement)
		return Promise.all([...targetElement.childNodes]
			.map(async (node, index)=>{
				return new Promise(resolve =>{
					if(targetElement == this && node.nodeType == Node.TEXT_NODE){
						resolve(undefined);
					}
					resolve( this.#toJSON(node, {afterCallback}) )
				})
			})).then(jsonList=>jsonList.filter(e=>e != undefined).map(e=> {
				delete e.node;
				return e;
			}))
	}

	async #toJSON(node, {afterCallback}){
		return new Promise(resolve=>{
			let obj = {};
			if(node.nodeType == Node.TEXT_NODE && node.textContent != '' && node.textContent){
				obj.type = Node.TEXT_NODE;
				obj.name = node.constructor.name;
				obj.text = node.textContent
				obj.node = node;
				afterCallback(obj);
				resolve(obj);
			}else if(node.nodeType == Node.ELEMENT_NODE){
				obj.type = Node.ELEMENT_NODE;
				obj.name = node.constructor.name;
				obj.tagName = node.localName;
				obj.data = Object.assign({}, node.dataset);
				obj.node = node;
				if(node.hasAttribute('is_cursor')){
					obj.cursor_offset = node.getAttribute('cursor_offset');
					obj.cursor_type = node.getAttribute('cursor_type');
					obj.cursor_index = node.getAttribute('cursor_index');
					obj.cursor_scroll_x = node.getAttribute('cursor__scroll_x');
					obj.cursor_scroll_y = node.getAttribute('cursor_scroll_y');
				}
				this.getLowDoseJSON(node, {afterCallback})
				.then(jsonList => {
					obj.childs = jsonList.filter(e=> e != undefined)
					afterCallback(obj);
					resolve(obj);
				})
			}else{
				//afterCallback(undefined)
				resolve(undefined);
			}
			
		})
	}

	async parseLowDoseJSON(json, {beforeCallback = (json) => {}, afterCallback = (node)=> {}} = {}){
		return new Promise(resolve => {
			let jsonObj = json;
			if(typeof json == 'string'){
				jsonObj = JSON.parse(json);
			}

			if(jsonObj instanceof Array){
				resolve(
					Promise.all(this.#toHTML(jsonObj, {beforeCallback, afterCallback}))
					.then(htmlList => {
						this.replaceChildren(...htmlList.filter(e=> e != undefined))
					})
				);
			}
			resolve(undefined);
		})
	}

	#toHTML(objList, {beforeCallback, afterCallback}){
		return objList.filter(e=>e!=undefined).map(async jsonNode => {
			return new Promise(resolve => {
				beforeCallback(jsonNode);
				let node = undefined;
				if(jsonNode.type == Node.TEXT_NODE){
					node = document.createTextNode(jsonNode.text);
				}else if(jsonNode.type == Node.ELEMENT_NODE){
					let EditorTarget = FreeWillEditor.componentsMap[jsonNode.name] || FreeWillEditor.toolsMap[jsonNode.name]
					if(EditorTarget){
						node = new EditorTarget(jsonNode.data);
					}else if(jsonNode.data.hasOwnProperty('is_line')){
						let line = new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"](document.createElement(jsonNode.tagName));
						node = line.lineElement;
						Object.assign(node.dataset, jsonNode.data);
					}else{
						//node = document.createElement(jsonNode.name.replaceAll(/HTML|Element/g, '').toLowerCase());
						node = document.createElement(jsonNode.tagName);
						Object.assign(node.dataset, jsonNode.data);
					}
					afterCallback(node)
					if(jsonNode.childs.length != 0){
						Promise.all(this.#toHTML(jsonNode.childs, {beforeCallback, afterCallback})).then(childList => {
							node.append(...childList);
						})
					}
				}
				resolve(node);
			})
		})
	}

	set placeholder(placeholder){
		this.#placeholder = placeholder;
		if(this.firstElementChild && this.contentEditable != false){
			this.firstElementChild.setAttribute('data-placeholder', this.#placeholder);
		}
	}

	get firstLine(){
		return this.firstElementChild;
	}

	get isEmpty(){
		return _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].isElementTextEmpty(this) && ! [...this.querySelectorAll('*')].some(e=>this.tools.hasOwnProperty(e.localName));
	}

	get isLoaded(){
		return this.#isLoaded;
	}
}


/***/ }),

/***/ "./view/js/handler/editor/component/EmoticonBox.js":
/*!*********************************************************!*\
  !*** ./view/js/handler/editor/component/EmoticonBox.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EmoticonBox)
/* harmony export */ });
/* harmony import */ var _module_emoticon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/emoticon */ "./view/js/handler/editor/module/emoticon.js");


class EmoticonBox{

    #style = Object.assign(document.createElement('style'), {
        id: 'free-will-editor-emoticon-box'
    })

    #emoticonBox = Object.assign(document.createElement('div'), {
        className: 'emoticon-box-wrap',
        innerHTML: `
            <div class="emoticon-box-search-container">
                <input type="search" list="emoticon-box-search-list" id="emoticon-box-search" data-bind_name="emoticonSearch" placeholder="search emoticon"/>
                <datalist id="emoticon-box-search-list" data-bind_name="emoticonSearchList"></datalist>
            </div>
            <div class="emoticon-box-content-wrapper">
                <div class="emoticon-box-group-container">
                    <ul class="emoticon-box-group-list" data-bind_name="emoticonGroupList">
                    </ul>
                </div>
                <div class="emoticon-box-subgroup-container">
                    <ul class="emoticon-box-subgroup-list" data-bind_name="emoticonSubgroupList">
                    </ul>
                </div>
            </div>
            <div class="emoticon-box-emoticon-container">
                <ul class="emoticon-box-emoticon-list" data-bind_name="emoticonList">
                </ul>
            </div>
        `
    })
    
    #elementMap = (()=>{
		return 	[...this.#emoticonBox.querySelectorAll('[data-bind_name]')].reduce((total, element) => {
            total[element.dataset.bind_name] = element;
			return total;
		}, {})
	})();

    #applyCallback = () => {}

    constructor(){
        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }
        new Promise(resolve => {

            resolve();
        })
    }

    createGroupList(){
        return new Promise(resolve => {
            let liList = ['All',..._module_emoticon__WEBPACK_IMPORTED_MODULE_0__.groupKind].map((e, i)=>{
                let li = Object.assign(document.createElement('li'),{
                    className: 'emoticon-group-item'
                });
                let isAll = e == 'All';
                let input = Object.assign(document.createElement('input'), {
                    className: 'emoticon-group-input',
                    name : 'emoticon-group-input',
                    id: `emoticon-group-${i}`,
                    type: 'radio',
                    checked: isAll,
                    onchange : (event) => {
                        let isPrevChecked = this.#elementMap.emoticonSubgroupList.querySelector(`[data-subgroup_name]:not([data-subgroup_name="All"]) .emoticon-subgroup-input:checked`)
                        let subgroupTitle = isPrevChecked?.closest('[data-subgroup_name]').dataset.subgroup_name;
                        this.createSubGroupList(isAll ? undefined : e);
                        if( ! subgroupTitle){
                            this.createEmoticonList(isAll ? undefined : e, undefined);
                        }else{
                            let [groupTitle] = Object.entries(_module_emoticon__WEBPACK_IMPORTED_MODULE_0__.subgroupKind).find(( [k,v] ) => v.some(e=>e==subgroupTitle))
                            this.createEmoticonList(groupTitle, subgroupTitle);
                        }
                        
                    }
                });
                let label = Object.assign(document.createElement('label'), {
                    for: `emoticon-group-${i}`,
                    textContent: e
                })
                label.prepend(input)
                li.append(label);
                return li;
            });
            this.#elementMap.emoticonGroupList.replaceChildren(...liList);
            resolve(liList);
        })
    }

    createSubGroupList(groupTitle){
        return new Promise(resolve=>{
            let targetGroup = _module_emoticon__WEBPACK_IMPORTED_MODULE_0__.subgroupKind[groupTitle] || Object.values(_module_emoticon__WEBPACK_IMPORTED_MODULE_0__.subgroupKind).flatMap(e=>e)
            let liList = ['All', ...targetGroup].map((e, i)=>{
                let isAll = e == 'All';
                let isPrevChecked = this.#elementMap.emoticonSubgroupList.querySelector(`[data-subgroup_name="${e}"] .emoticon-subgroup-input:checked`) != undefined;
                
                let li = Object.assign(document.createElement('li'),{
                    className: 'emoticon-subgroup-item'
                });
                let input = Object.assign(document.createElement('input'), {
                    className: 'emoticon-subgroup-input',
                    name : 'emoticon-subgroup-input',
                    id: `emoticon-subgroup-${i}`,
                    type: 'radio',
                    checked: isAll || isPrevChecked,
                    onchange : (event) => this.createEmoticonList(groupTitle, isAll ? undefined : e)
                });
                let label = Object.assign(document.createElement('label'), {
                    for: `emoticon-subgroup-${i}`,
                    textContent: e
                })
                label.prepend(input);
                li.append(label);
                li.dataset.subgroup_name = e;
                if(isAll || isPrevChecked){
                    let appendAwait = setInterval(()=>{
                        if( ! li.isConnected){
                            return;
                        }
                        clearInterval(appendAwait);
                        li.scrollIntoView({ behavior: "instant", block: "start", inline: "nearest" });
                        this.createEmoticonList(groupTitle, isAll ? undefined : e)
                    },50)
                    
                }
                return li;
            });
            this.#elementMap.emoticonSubgroupList.replaceChildren(...liList);
            resolve(liList);
        })
    }

    createEmoticonList(groupTitle, subgroupTitle, toneType){
        return new Promise(resolve => {
            let targetGroup;
            console.log(groupTitle, subgroupTitle)
            if( ! groupTitle && subgroupTitle){
                targetGroup = Object.values(_module_emoticon__WEBPACK_IMPORTED_MODULE_0__.emoticon).find(e=> e[subgroupTitle])?.[subgroupTitle] || [];
            }else if( groupTitle && ! subgroupTitle){
                targetGroup = Object.values(_module_emoticon__WEBPACK_IMPORTED_MODULE_0__.emoticon[groupTitle]).flatMap(e=>e)
            }else if( ! groupTitle && ! subgroupTitle){
                targetGroup = Object.values(_module_emoticon__WEBPACK_IMPORTED_MODULE_0__.emoticon).flatMap(e=> Object.values(e).flatMap(ee=>ee));
            }else{
                targetGroup = _module_emoticon__WEBPACK_IMPORTED_MODULE_0__.emoticon[groupTitle][subgroupTitle];
            }
            let datalistOptions = [];
            let liList = targetGroup.map(e=>{
                if( ! toneType && e.toneType.length != 0){
                    return;
                }
                let li = Object.assign(document.createElement('li'),{
                    className: 'emoticon-item'
                });
                let button = Object.assign(document.createElement('li'), {
                    textContent: e.emoticon,
                    onclick: (event) => {
                        this.#applyCallback(e);
                    },
                    title: e.description
                })
                li.append(button);
                let option = Object.assign(document.createElement('option'),{
                    value: e.emoticon,
                    textContent: e.description
                })
                datalistOptions.push(option);
                return li;
            }).filter(e=>e);
            this.#elementMap.emoticonList.replaceChildren(...liList);
            this.#elementMap.emoticonSearchList.replaceChildren(...datalistOptions);
            resolve(liList);
        });
    }

    open(openTarget){
		if(openTarget){
            openTarget.append(this.#emoticonBox);
        }else{
            document.body.append(this.#emoticonBox);
        }
        this.#elementMap.emoticonGroupList.replaceChildren();
        this.#elementMap.emoticonSubgroupList.replaceChildren();
        this.createGroupList();
        this.createSubGroupList();
        this.createEmoticonList();
        this.#elementMap.emoticonSearch.value = '';
    }

    close(){
        this.#emoticonBox.remove();
    }

    set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

    get emoticonBox(){
        return this.#emoticonBox;
    }

    createStyle(){
        this.#style.textContent = `
            .emoticon-box-wrap{
                position: fixed;
                width: 47vw;
                height: 39vh;
                color: white;
                min-width: 100px;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                display: flex;
                align-content: center;
                justify-content: space-around;
                align-items: center;
                justify-items: center;
                z-index: 999;
                flex-direction: column;
            }
            .emoticon-box-wrap .emoticon-box-search-container{
                padding : 0.9% 0.9% 0 0.9%;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper{
                padding : 0 0.9% 0 0.9%;
            }
            .emoticon-box-wrap .emoticon-box-emoticon-container{
                padding : 0 0.9% 0.9% 0.9%;
            }
            .emoticon-box-wrap .emoticon-box-search-container,
            .emoticon-box-wrap .emoticon-box-content-wrapper,
            .emoticon-box-wrap .emoticon-box-emoticon-container
            {
                background: #343434
            }
            .emoticon-box-wrap label{
                color: white;
                font-size: 0.9rem;
            }
            .emoticon-box-wrap .emoticon-box-search-container{
                width: 100%;
                height: auto;
                align-self: center;
                text-align: center;
            }
            .emoticon-box-wrap .emoticon-box-search-container #emoticon-box-search{
                font-size: 0.8rem;
                height: 100%;
                width: 100%;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper{
                display: flex;
                height: 50%;
                width: 100%;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-group-container,
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-subgroup-container,
            .emoticon-box-wrap .emoticon-box-emoticon-container{
                overflow-y: auto;
                width: 100%;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-group-container::-webkit-scrollbar,
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-subgroup-container::-webkit-scrollbar,
            .emoticon-box-wrap .emoticon-box-emoticon-container::-webkit-scrollbar{
                display: none;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-group-container:hover::-webkit-scrollbar,
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-subgroup-container:hover::-webkit-scrollbar,
            .emoticon-box-wrap .emoticon-box-emoticon-container:hover::-webkit-scrollbar{
            	display: initial;
                width: 7px;
                height: 7px;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-group-container::-webkit-scrollbar-thumb,
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-subgroup-container::-webkit-scrollbar-thumb,
            .emoticon-box-wrap .emoticon-box-emoticon-container::-webkit-scrollbar-thumb{
                background: #0c0c0c38;
                border-radius: 100px;
                box-shadow: inset 0 0 5px #000000;
            }
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-group-container:hover::-webkit-scrollbar-thumb,
            .emoticon-box-wrap .emoticon-box-content-wrapper .emoticon-box-subgroup-container:hover::-webkit-scrollbar-thumb,
            .emoticon-box-wrap .emoticon-box-emoticon-container:hover::-webkit-scrollbar-thumb{
                background: #34000075; 
            }
            
            .emoticon-box-wrap .emoticon-box-group-list li,
            .emoticon-box-wrap .emoticon-box-subgroup-list li{
                margin-bottom: 0.2vh;
            }
            .emoticon-box-wrap .emoticon-box-group-list li input.emoticon-group-input,
            .emoticon-box-wrap .emoticon-box-subgroup-list li input.emoticon-subgroup-input{
                width: 0.6rem;
                height: 0.6rem;
                margin-top: 0;
            }
            .emoticon-box-wrap .emoticon-box-emoticon-container{
                height: inherit;
                width: 100%;
                overflow-y: auto;
            }
            .emoticon-box-wrap .emoticon-box-emoticon-container .emoticon-box-emoticon-list{
                overflow-wrap: anywhere;
                display: flex;
                flex-wrap: wrap;
            }
            .emoticon-box-wrap .emoticon-box-emoticon-container .emoticon-box-emoticon-list .emoticon-item{
                padding: 0.2rem;
                transition: background-color 0.7s;
            }
            .emoticon-box-wrap .emoticon-box-emoticon-container .emoticon-box-emoticon-list .emoticon-item:hover{
                background-color: #6a6a6a;
            }
        `
        return this.#style;
    }
}

/***/ }),

/***/ "./view/js/handler/editor/component/FontFamilyBox.js":
/*!***********************************************************!*\
  !*** ./view/js/handler/editor/component/FontFamilyBox.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FontFamilyBox)
/* harmony export */ });
class FontFamilyBox {
    
    #style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-font-family-box'
	});

    #fontFamilyBoxVw = 20;

    #fontList = [];
    #fontFamilyBox = Object.assign(document.createElement('div'), {
        className: 'font-box-wrap',
    })
    #fontFamilyBoxContainer = Object.assign(document.createElement('ul'), {
        className: 'font-box-container'
    })
    /*
    #searchInputText = Object.assign(document.createElement('input'), {
        autocomplete: 'off',
        placeholder: 'search font',
        type: 'text',
        name: 'font-box-search',
        className: 'font-box-search'
    })
    */
    #fontElementList = [];
    #selectedFont;

    #defaultSampleText = '가나 다라 ab cd'
    #sampleText = this.#defaultSampleText;

    #applyCallback = () => {}

    constructor(fontList){
        if( ! fontList){
            throw new Error('fontList is undefined');
        }
        this.#fontList = fontList;

        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }

        /*
        let searchWrap = Object.assign(document.createElement('div'),{
            className: 'font-box-search-wrap'
        });
        searchWrap.append(this.#searchInputText);
        
        this.#fontFamilyBox.append(searchWrap, this.#fontFamilyBoxContainer);
        */
        this.#fontFamilyBox.append(this.#fontFamilyBoxContainer);

    }

    searchInputTextEvent(event){
        
    }

    #addFontItemEvent(item){
        return new Promise(res=>{
            item.onclick = (event) => {
                this.#selectedFont = item;
                this.applyCallback(event);
            }
            res(item);
        })
    }

    #createFontElementList(sampleText){
        return new Promise(resolve=> {
            const createFontItem = () => {
                let li = Object.assign(document.createElement('li'),{
                    className: 'font-family-item',
                });
                if(sampleText.nodeType && sampleText.nodeType == Node.ELEMENT_NODE){
                    li.innerHTML = sampleText.innerHTML;
                }else{
                    li.textContent = sampleText;
                }
                this.#addFontItemEvent(li)
                return li;
            }
            this.#fontElementList = this.#fontList.map(fontFamily=>{
                let li = createFontItem();
                li.style.fontFamily = fontFamily;
                return li;
            });

            let defaultFont = createFontItem();
            this.#fontElementList.push(defaultFont)

            resolve(this.#fontElementList);
        })
    }

    async open(){
        let selection = window.getSelection();
        if(selection.rangeCount != 0 && selection.isCollapsed == false){
            let range = selection.getRangeAt(0)
            let aticle = document.createElement('aticle');
            let rangeClone = range.cloneContents();
            aticle.append(rangeClone);
            this.#sampleText = aticle;
        }
        this.#sampleText = this.#sampleText == '' ? this.#defaultSampleText : this.#sampleText;
    
        document.body.append(this.#fontFamilyBox);

        return await this.#createFontElementList(this.#sampleText).then(fontElementList => {
            this.#fontFamilyBoxContainer.replaceChildren(...fontElementList);
            return this.#fontFamilyBoxContainer;
        });
        
    }
    close(){
        this.#fontFamilyBox.remove();
    }

    set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

    get fontFamilyBox(){
        return this.#fontFamilyBox;
    }

    get selectedFont(){
        return this.#selectedFont;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}


    createStyle(){
        this.#style.textContent = `
            .font-box-wrap{
                background: #000000bf;
                position: fixed;
				padding: 0.9%;
				width: ${this.#fontFamilyBoxVw}vw;
                height: 25vh;
				color: white;
				font-size: 13px;
				min-width: 300px;
                overflow-y: auto;
				-webkit-user-select:none;
				-moz-user-select:none;
				-ms-user-select:none;
				user-select:none;
                z-index: 999;
            }
            .font-box-wrap .font-box-container{
                list-style-type: none;
                padding: 0;
                margin: 0;
            }
            .font-box-wrap .font-family-item{
                margin-bottom: 1%;
            }
            .font-box-wrap .font-family-item:hover{
                background-color: #747474;
                cursor: pointer;
            }

        `
        return this.#style;
    }
}

/***/ }),

/***/ "./view/js/handler/editor/component/FontSizeBox.js":
/*!*********************************************************!*\
  !*** ./view/js/handler/editor/component/FontSizeBox.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FontSizeBox)
/* harmony export */ });
class FontSizeBox {
    
    #style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-font-size-box'
	});

    #fontSizeBoxVw = 30;

    #min
    
    #max

    #fontSizeBox = Object.assign(document.createElement('div'), {
        className: 'font-size-wrap',
    })
    #fontSizeBoxContainer = Object.assign(document.createElement('ul'), {
        className: 'font-size-container'
    })
    
    #searchInputText = Object.assign(document.createElement('input'), {
        autocomplete: 'off',
        placeholder: 'searching your font size',
        type: 'number',
        name: 'font-size-search',
        className: 'font-size-search',
        oninput: (event) => this.#searchInputTextEvent(event),
        onkeyup: (event) => {
            if(event.key == 'Enter' && this.#searchInputText.value != ''){
                let item = this.#fontSizeBoxContainer.querySelector(`[data-size="${this.#searchInputText.value}"]`);
                this.#apply(item, event);
            }
        },
    })

    #selectedFont;

    #defaultSampleText = '가나 다라 ab cd'
    #sampleText = this.#defaultSampleText;

    #applyCallback = () => {}

    #lastSelectionRange;

    constructor({min, max}){
        if( ! min || ! max){
            throw new Error('font size is undefined');
        }
        this.#min = min;
        this.#max = max;

        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }

        
        let searchWrap = Object.assign(document.createElement('div'),{
            className: 'font-size-search-wrap'
        });
        searchWrap.append(this.#searchInputText);
        
        this.#fontSizeBox.append(searchWrap, this.#fontSizeBoxContainer);
        
        this.#fontSizeBox.append(this.#fontSizeBoxContainer);

    }

    #searchInputTextEvent(event){
        let number = Number(this.#searchInputText.value);
        if( ! this.#searchInputText.value || this.#searchInputText.value == '') {     
            this.#createFontElementList(this.#sampleText).then(fontElementList => {
                this.#fontSizeBoxContainer.replaceChildren(...fontElementList);
            });
            return;
        }else if(isNaN(number) || this.#min > number || this.#max < number){
            this.#fontSizeBoxContainer.replaceChildren();
            return;
        }

        let li = Object.assign(document.createElement('li'),{
            className: 'font-size-item',
        });
        if(this.#sampleText.nodeType && this.#sampleText.nodeType == Node.ELEMENT_NODE){
            li.innerHTML = this.#sampleText.innerHTML;
        }else{
            li.textContent = this.#sampleText;
        }
        li.style.fontSize = number + 'px';
        li.dataset.size = number;
        this.#addFontItemEvent(li);
        this.#fontSizeBoxContainer.replaceChildren(li);
        this.#searchInputText.focus();
    }

    #addFontItemEvent(item){
        return new Promise(res=>{
            item.onclick = (event) => this.#apply(item, event);
            res(item);
        });
    }

    #apply(item, event){
        this.#selectedFont = item;
        if(this.#lastSelectionRange){
            let selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(this.#lastSelectionRange);
        }
        this.applyCallback(event);
    }

    #createFontElementList(sampleText){
        return new Promise(resolve=> {
            let list = [];
            for(let i = this.#min, len = this.#max + 1 ; i < len ; i += 1){
                let li = Object.assign(document.createElement('li'),{
                    className: 'font-size-item',
                });
                if(sampleText.nodeType && sampleText.nodeType == Node.ELEMENT_NODE){
                    li.innerHTML = sampleText.innerHTML;
                }else{
                    li.textContent = sampleText;
                }
                li.style.fontSize = i + 'px';
                this.#addFontItemEvent(li);
                list.push(li);
            }
            resolve(list);
        })
    }

    async open(){
        let selection = window.getSelection();
        if(selection.rangeCount != 0 && selection.isCollapsed == false){
            let range = selection.getRangeAt(0);
            this.#lastSelectionRange = range.cloneRange();
            let aticle = document.createElement('aticle');
            let rangeCloneContent = range.cloneContents();
            aticle.append(rangeCloneContent);
            this.#sampleText = aticle;
        }
        this.#sampleText = this.#sampleText == '' ? this.#defaultSampleText : this.#sampleText;
    
        document.body.append(this.#fontSizeBox);

        return await this.#createFontElementList(this.#sampleText).then(fontElementList => {
            this.#fontSizeBoxContainer.replaceChildren(...fontElementList);
            return this.#fontSizeBoxContainer;
        });
    }

    close(){
        this.#fontSizeBox.remove();
    }

    set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

    get fontSizeBox(){
        return this.#fontSizeBox;
    }

    get selectedFont(){
        return this.#selectedFont;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}


    createStyle(){
        this.#style.textContent = `
            .font-size-wrap{
                background: #000000bf;
                position: fixed;
				padding: 0.9%;
				width: ${this.#fontSizeBoxVw}vw;
				height: 25vh;
				color: white;
                min-width: 200px;
                overflow-y: auto;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                overflow-x: hidden;
                z-index: 999;
            }

            .font-size-wrap .font-size-search-wrap{
                margin-bottom: 2%;
                overflow-x: hidden;
            }
            .font-size-wrap .font-size-search-wrap [name="font-size-search"]{
                outline: none;
                -moz-appearance: textfield;
            }
            .font-size-wrap .font-size-search-wrap [name="font-size-search"]::-webkit-outer-spin-button,
            .font-size-wrap .font-size-search-wrap [name="font-size-search"]::-webkit-inner-spin-button{
                -webkit-appearance: none;
                margin: 0;
            }

            .font-size-wrap .font-size-container{
                list-style-type: none;
                padding: 0;
                margin: 0;
            }
            .font-size-wrap .font-size-container .font-size-item{
                margin-bottom: 1%;
                transition: all 0.5s;
                overflow-x: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }
            .font-size-wrap .font-size-container .font-size-item:hover{
                background-color: #666666;
                cursor: pointer;
                background-color: #666666;
                padding: 2px 0 3px 0;
            }

        `
        return this.#style;
    }
}

/***/ }),

/***/ "./view/js/handler/editor/component/HyperlinkBox.js":
/*!**********************************************************!*\
  !*** ./view/js/handler/editor/component/HyperlinkBox.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HyperlinkBox)
/* harmony export */ });
class HyperlinkBox{
	#style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-hyperlink-box'
	});

	#hyperlinkBox = Object.assign(document.createElement('div'),{
		className: 'hyperlink-box-wrap'
	});

	#hyperlinkBoxVw = 20;

	#urlInputText = Object.assign(document.createElement('input'), {
        autocomplete: 'off',
        placeholder: 'Please enter your link ',
        type: 'url',
        name: 'hyperlink-url-input',
        className: 'hyperlink-url-input',
		required: false,
        /*
		oninput: (event) => this.#searchInputTextEvent(event),
        onkeyup: (event) => {
            if(event.key == 'Enter' && this.#searchInputText.value != ''){
                let item = this.#fontSizeBoxContainer.querySelector(`[data-size="${this.#searchInputText.value}"]`);
                this.#apply(item, event);
            }
        },
		*/
    });

	#invalidUrlMessage = Object.assign(document.createElement('span'), {

	})

	#applyCallback = () => {}
	
    #lastSelectionRange;

	#lastUrl;

	constructor(){
		let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }
		let urlInputTextWrapper = Object.assign(document.createElement('div'), {
			//id: 'url-input-text-wrapper',
			className: 'url-input-text-wrapper',
			/*onsubmit : (event) => {
				event.preventDefault();
				applyButton.click();
			}*/
		})
		urlInputTextWrapper.append(this.#urlInputText);
		this.#urlInputText.oninput = (event) => {
			if(this.#invalidUrlMessage.isConnected){
				this.#invalidUrlMessage.remove();
			}
		}
		this.#urlInputText.onkeydown = (event) => {
			if(event.key == 'Enter'){
				event.preventDefault();
				applyButton.onclick();
			}

		}

		let cancelButton = Object.assign(document.createElement('button'), {
			className: 'cancel-button',
			type: 'button',
			textContent: 'cancel'
		})
		cancelButton.onclick = () => {
			this.close();
		}
		let applyButton = Object.assign(document.createElement('button'), {
			className: 'apply-button',
			type: 'button',
			textContent: 'apply'
		})
		applyButton.onclick = (event) => {
			if( ! this.#urlInputText.checkValidity()){
				let prevValue = this.#urlInputText.value
				this.#urlInputText.value = `https://${this.#urlInputText.value}`;
				if(! this.#urlInputText.checkValidity()){
					this.#urlInputText.value = prevValue;
					return;
				}
			}
			this.lastUrl = this.#urlInputText.value;
			this.#urlInputText.value = '';
			if(this.#lastSelectionRange){
				let selection = window.getSelection();
				selection.removeAllRanges();
				selection.addRange(this.#lastSelectionRange);
			}
			this.applyCallback(event);
		}
		let buttonWrapeer = Object.assign(document.createElement('div'), {
			className: 'button-wrap',
		})
		buttonWrapeer.append(cancelButton, applyButton);
		this.#hyperlinkBox.append(urlInputTextWrapper, buttonWrapeer)
	}

    async open(){
		let selection = window.getSelection();
		if(selection.rangeCount != 0 && selection.isCollapsed == false){
			let range = selection.getRangeAt(0);
			this.#lastSelectionRange = range.cloneRange();
		}
		document.body.append(this.#hyperlinkBox);
		this.#urlInputText.focus();
    }

    close(){
        this.#hyperlinkBox.remove();
    }
    
	set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

	get hyperlinkBox(){
		return this.#hyperlinkBox;
	}

	createStyle(){
		this.#style.textContent = `
			.hyperlink-box-wrap{
				background: #343434;
				position: fixed;
				padding: 0.9%;
				width: ${this.#hyperlinkBoxVw}vw;
				height: auto;
				color: white;
				min-width: 100px;
				overflow-y: auto;
				-webkit-user-select: none;
				-moz-user-select: none;
				-ms-user-select: none;
				user-select: none;
				overflow-x: hidden;
				display: grid;
				gap: 1vh;
				align-content: center;
				justify-content: space-around;
				align-items: center;
				justify-items: center;
                z-index: 999;
			}
			.hyperlink-box-wrap .url-input-text-wrapper{
				width: inherit;
			}
			.hyperlink-box-wrap .url-input-text-wrapper .hyperlink-url-input{
				width: -webkit-fill-available;
				background-color: #ffffff00;
				color: #b9b9b9;
				border-bottom: solid 1px #4c4c4c;
				border-left: solid 1px #4c4c4c;
			}
			.hyperlink-box-wrap .button-wrap{
				display: flex;
				justify-content: space-around;
				width: inherit;
			}
			.hyperlink-box-wrap .button-wrap .apply-button,
			.hyperlink-box-wrap .button-wrap .cancel-button {
				background: none;
				border: revert;
				color: #b9b9b9;
				border-color: #464646;
			}
		`
		return this.#style;
	}
}

/***/ }),

/***/ "./view/js/handler/editor/component/ImageBox.js":
/*!******************************************************!*\
  !*** ./view/js/handler/editor/component/ImageBox.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ImageBox)
/* harmony export */ });

class ImageBox {
    
    #style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-image-box'
	});

    #imageBox = Object.assign(document.createElement('div'), {
        className: 'image-box-wrap',
        
        innerHTML:`
            <div class="image-resize-container">
                <div>
                    <label class="image-box-resize-label" for="image-box-resize-width">width </label>
                    <input list="image-box-resize-datalist" class="image-box-resize-input" id="image-box-resize-width" type="number" autocomplete="off"/>
                    <div>
                        <label class="image-box-resize-label-error-message" for="image-box-resize-width"></label>
                    </div>
                </div>
                <div>
                    <label class="image-box-resize-label" for="image-box-resize-height">height(auto) </label>
                    <input list="image-box-resize-datalist" class="image-box-resize-input" id="image-box-resize-height" type="number" autocomplete="off" disabled/>
                </div>
            </div>
            <div class="image-key-description-container" style="display:none;">
                <kbd>Ctrl</kbd><kbd>Wheel</kbd>OR<kbd>Shift</kbd><kbd>Wheel</kbd>
            </div>
            <div class="image-button-container">
                <a href="javascript:void(0);" class="download" download>
                    <svg style="zoom:125%;" class="download-css-gg-push-down"
                        width="1rem"
                        height="1rem"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        d="M11.0001 1H13.0001V15.4853L16.2428 12.2427L17.657 13.6569L12.0001 19.3137L6.34326 13.6569L7.75748 12.2427L11.0001 15.4853V1Z"
                        fill="#00000073"
                        />
                        <path d="M18 20.2877H6V22.2877H18V20.2877Z" fill="#00000073" />
                    </svg>
                </a>
                <a href="javascript:void(0);" class="new-window">
                    <svg style="zoom: 150%;" class="new-window-css-gg-expand"
                        width="1rem"
                        height="1rem"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        d="M12.3062 16.5933L12.2713 18.593L5.2724 18.4708L5.39457 11.4719L7.39426 11.5068L7.33168 15.092L15.2262 7.46833L11.6938 7.40668L11.7287 5.40698L18.7277 5.52915L18.6055 12.5281L16.6058 12.4932L16.6693 8.85507L8.72095 16.5307L12.3062 16.5933Z"
                        fill="#00000073"
                        />
                    </svg>
                </a>
                <span class="image-editor">
                    <svg class="image-editor-css-gg-pen"
                        width="1rem"
                        height="1rem"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z"
                        fill="#00000073"
                        />
                        <path
                        d="M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z"
                        fill="#00000073"
                        />
                    </svg>
                </span>
            </div>
        `
        /* 리사이즈 있는 버전 주석처리 20230821
        innerHTML: `
            <div class="image-resize-container">
                <div>
                    <label class="image-box-resize-label" for="image-box-resize-width">width : </label>
                    <input list="image-box-resize-datalist" class="image-box-resize-input" id="image-box-resize-width" type="number" autocomplete="off"/>
                </div>
                <div>
                    <label class="image-box-resize-label" for="image-box-resize-height">height(auto) : </label>
                    <input list="image-box-resize-datalist" class="image-box-resize-input" id="image-box-resize-height" type="number" autocomplete="off" disabled/>
                </div>
            </div>
            <div class="image-button-container">
                <a href="javascript:void(0);" class="download-css-gg-push-down" download></a>
                <a href="javascript:void(0);" class="new-window-css-gg-path-trim"></a>
            </div>
        `
        */
    });

    /*
    #removeEventPromiseResolve;
    #removeEventPromise = new Promise(resolve=>{
		this.#removeEventPromiseResolve = resolve;
	});
    */
    #image;
    #resizeRememberTarget;

    constructor(){
        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }

        document.addEventListener('keydown',(event)=>{
            if(this.#imageBox.hasAttribute('data-is_shft')){
                return;
            }
            let {key} = event;
            if(key === 'Shift'){
                this.#imageBox.dataset.is_shft = '';
            }
        })

        document.addEventListener('keyup', (event)=>{
            if( ! this.#imageBox.hasAttribute('data-is_shft')){
                return;
            }    
            let {key} = event;
            if(key === 'Shift'){
                this.#imageBox.removeAttribute('data-is_shft');
            }
        })
        
        this.#imageBox.onwheel = (event) => {
            if(this.#imageBox.hasAttribute('data-is_shft')){
                return;
            }
            event.preventDefault();
            let {deltaY} = event;
            
            this.#imageBox.scrollTo(
                this.#imageBox.scrollLeft + deltaY, undefined
            );
        }
       
        let [width, height] = this.#imageBox.querySelectorAll('#image-box-resize-width, #image-box-resize-height');
        
        window.addEventListener('keyup', (event) => {
            if( ! this.image || ! this.resizeRememberTarget || ! width.hasAttribute('data-is_ctrl') || ! this.image.parentElement.matches(':hover')){//|| this.image.getRootNode()?.activeElement != width){
                return;
            }
            width.removeAttribute('data-is_ctrl');
        })

        window.addEventListener('keydown', (event) => {
            
            let eventPath = event.composedPath()

            if( ! this.image || ! this.resizeRememberTarget || eventPath[0] == width || ! this.image.parentElement.matches(':hover')){//|| this.image.getRootNode()?.activeElement != width){
                return;
            }
            if(event.ctrlKey){
                width.dataset.is_ctrl = '';
            }else{
                width.removeAttribute('data-is_ctrl');
            }
        })
        
        /**
         * @see https://www.chromestatus.com/feature/6662647093133312
         */
        window.addEventListener('wheel', (event) => {
            
            if( ! this.image || ! this.resizeRememberTarget || ! this.image.parentElement.hasAttribute('data-is_resize_click') || event.composedPath()[0] == width || ! this.image.parentElement.matches(':hover')){// || this.image.getRootNode()?.activeElement != width){
                return;
            }
            if(width.hasAttribute('data-is_ctrl')){
                width.value = Number(width.value) + (event.deltaY * -1)
            }else{
                width.value = Number(width.value) + ((event.deltaY * -1) / 100)
            }
            this.oninputEvent(this.image, width, width, height, this.resizeRememberTarget);
        })
    }

    /**
     * 
     * @param {HTMLImageElement} image 
     */
    addImageHoverEvent(image, resizeRememberTarget){
        //image.parentElement.onmouseover = () => {
        let keyDescription = this.#imageBox.querySelector('.image-key-description-container')   
        image.parentElement.onmouseenter = () => {
            if(! image.src || image.src == '' || image.hasAttribute('data-error')){
                return;
            }
             let root = image.getRootNode();
            if(root != document){
                root.append(this.#style);
            }else{
                document.head.append(this.#style);
            }

            if(image.parentElement && (image.parentElement !== this.#imageBox.parentElement || ! this.#imageBox.classList.contains('start'))){
                image.parentElement.append(this.#imageBox);

                this.#addRresizeEvent(image, resizeRememberTarget)
                this.#addButtonIconEvent(image)
                let appendAwait = setInterval(()=>{
                    if(this.#imageBox.isConnected && image.complete && image.parentElement === this.#imageBox.parentElement && ! this.#imageBox.classList.contains('start')){
                        this.#imageBox.classList.add('start');
                        this.image = image;
                        this.resizeRememberTarget = resizeRememberTarget;
                        image.parentElement.onclick = (event) => {
                            if(! image.src || image.src == '' || event.composedPath()[0] != image || image.hasAttribute('data-error')){
                                return;
                            }
                            this.#imageBox.classList.add('start');
                            image.parentElement.toggleAttribute('data-is_resize_click');
                            this.falsh(image.parentElement);
                            if(image.parentElement.hasAttribute('data-is_resize_click')){
                                keyDescription.style.display = '';
                            }else {
                                keyDescription.style.display = 'none';
                            }
                        }
                        clearInterval(appendAwait);
                    }
                }, 50)
            }
        }
        image.parentElement.onmouseleave = () => {
            this.#imageBox.classList.remove('start');
            if(image.parentElement.hasAttribute('data-is_resize_click')){
                keyDescription.style.display = 'none';
                this.falsh(image.parentElement);
            }
            image.parentElement.removeAttribute('data-is_resize_click');
            /*if(this.#imageBox.isConnected && image.parentElement === this.#imageBox.parentElement){
                
                this.#imageBox.classList.remove('start');
                this.#imageBox.ontransitionend = () => {
                    if(this.#imageBox.isConnected){
                        this.#imageBox.remove();
                    }
                }
                
            }*/
        }
    }

    falsh(target){
        return new Promise(resolve => {
            let flash = document.createElement('div');
            Object.assign(flash.style, {
                position: 'absolute',top: '0px',left: '0px',
                width: '100%',height: '100%', background: 'rgba(255, 255, 255, 0.4)',
                transition: 'opacity 0.2s ease 0s', opacity: 0
            })
            target.append(flash);
            let flashAwait = setInterval(()=>{
                if( ! flash.isConnected){
                    return; 
                }
                clearInterval(flashAwait);
                flash.style.opacity = 1;
                flash.ontransitionend = () => {
                    flash.style.opacity = 0;
                    flash.ontransitionend = () => {
                        flash.remove();
                        resolve();
                    }
                }
            }, 50)
        });
    }

    /**
     * 
     * @param {HTMLImageElement} image 
     */
    //리사이즈 있는 버전 주석 처리 20230821
    #addRresizeEvent(image, resizeRememberTarget){
        return new Promise(resolve => {
            let [width, height] = this.#imageBox.querySelectorAll('#image-box-resize-width, #image-box-resize-height');
            width.value = image.width, height.value = image.height;
            
            width.labels[0].textContent = 'width : ';
            width.labels[1].textContent = '';
            
            this.prevValue = undefined;

            width.oninput = (event) => this.oninputEvent(image, event.target, width, height, resizeRememberTarget);
            width.onkeydown = (event) => {
                if(event.ctrlKey){
                    width.dataset.is_ctrl = '';
                }else{
                    width.removeAttribute('data-is_ctrl');
                }
            }
            width.onkeyup = (event) => {
                width.removeAttribute('data-is_ctrl');
            }
            width.onblur = () => {
                width.removeAttribute('data-is_ctrl');
            }
            width.onwheel = (event) => {
                event.preventDefault();
                if(width.hasAttribute('data-is_ctrl')){
                    width.value = Number(width.value) + (event.deltaY * -1)
                }else{
                    width.value = Number(width.value) + ((event.deltaY * -1) / 100)
                }
                this.oninputEvent(image, event.target, width, height, resizeRememberTarget);
            }
            //height.oninput = (event) => oninputEvent(event);
            resolve({width, height});
        });
    }
    oninputEvent(image, target, width, height, resizeRememberTarget) {
        if(isNaN(Number(target.value))){
            target.value = target.value.replace(/\D/g, '');
            return;
        }else if(Number(target.value) < 50){
            width.labels[1].textContent = '(min 50)';
            target.value = 50;
        }else{
            width.labels[1].textContent = '';
        }
        let sizeName = target.id.includes('width') ? 'width': 'height';
        image[sizeName] = target.value;

        let imageRect = image.getBoundingClientRect();

        //width.value = image.width, height.value = image.height;
        if(this.prevValue && parseInt(this.prevValue) == parseInt(imageRect.width)){
            width.value = parseInt(this.prevValue);
            width.labels[1].textContent = `(max ${parseInt(this.prevValue)}) : `
        }
        this.prevValue = imageRect.width;
        resizeRememberTarget.dataset.width = width.value;
    }
    #addButtonIconEvent(image){
        return new Promise(resolve => {
            let [download, newWindow] = [...this.#imageBox.querySelectorAll('.download-css-gg-push-down, .new-window-css-gg-expand')]
                .map(e=>e.parentElement)
            download.href = image.src, newWindow.href = image.src
            download.download = image.dataset.image_name;
            newWindow.target = '_blank';
            resolve({download, newWindow});
        })
    }

    get imageBox(){
        return this.#imageBox;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}
    
    set image(image){
        this.#image = image; 
    }

    get image(){
        return this.#image;
    }
    set resizeRememberTarget(resizeRememberTarget){
        this.#resizeRememberTarget = resizeRememberTarget;
    }
    get resizeRememberTarget(){
        return this.#resizeRememberTarget;
    }

    createStyle(){
        this.#style.textContent = `
            .image-box-wrap{
                position: absolute;
                display: flex;
                justify-content: space-between;
                width: 100%;
                background: linear-gradient(to bottom, #ff8787 -73%, #ffffffcf 115%);
                color: white;
                top:-20%;
                opacity: 0;
                transition: all 1s;
                white-space: nowrap;
                overflow-y: clip;
                overflow-x: auto;
            }
            .image-box-wrap::-webkit-scrollbar{
                display: none;
            }
            .image-box-wrap:hover::-webkit-scrollbar{
                display: initial;
                width: 7px;
                height: 7px;
            }
            .image-box-wrap:hover::-webkit-scrollbar-track{
                background: #00000040;
                border-radius: 100px;
                box-shadow: inset 0 0 5px #000000fc;
            }
            .image-box-wrap:hover::-webkit-scrollbar-thumb {
                background: #0c0c0c38;
                border-radius: 100px;
                box-shadow: inset 0 0 5px #000000;
            }
            .image-box-wrap:hover::-webkit-scrollbar-thumb:hover {
                /*background: #44070757;*/
                background: #34000075; 
            }
            .image-box-wrap.start{
                top: 0;
                opacity: 1;
                transition: all 0.5s;
            }
            .image-box-wrap .image-button-container,
            .image-box-wrap .image-resize-container, 
            .image-box-wrap .image-key-description-container{
                display: flex;
                gap: 1.5vw;
                padding: 1.7%;
                align-items: center;
            }
            .image-box-wrap .image-resize-container .image-box-resize-label{
                background: linear-gradient(to right, #e50bff, #004eff);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }
            .image-box-wrap .image-resize-container .image-box-resize-input{
                outline: none;
                border: none;
                background-image: linear-gradient(#fff1f1d4, #ffffffeb), linear-gradient(to right, #a189890d 0%,  #ed89b275 100%);
                background-origin: border-box;
                background-clip: content-box, border-box;
                background-color: #00000000; 
                width: 3.2rem;
                height: 100%;
                color: #ffb6b6;
                font-size: 0.9rem;
                text-align: center;
            }
            .image-box-wrap .image-button-container .new-window,
            .image-box-wrap .image-button-container .download,
            .image-box-wrap .image-button-container .image-editor{
                display: flex;
                align-items: center;
                border: none;
                background:none;
                position:relative;
                cursor: pointer;
            }

            .image-box-wrap kbd {
                background-color: #eee;
                border-radius: 3px;
                border: 1px solid #b4b4b4;
                box-shadow:
                0 1px 1px rgba(0, 0, 0, 0.2),
                0 2px 0 0 rgba(255, 255, 255, 0.7) inset;
                color: #333;
                display: inline-block;
                font-size: 0.85em;
                font-weight: 700;
                line-height: 1;
                padding: 2px 4px;
                white-space: nowrap;
                height: fit-content;
            }
        `
        return this.#style;
    }
}

/***/ }),

/***/ "./view/js/handler/editor/component/Line.js":
/*!**************************************************!*\
  !*** ./view/js/handler/editor/component/Line.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Line)
/* harmony export */ });
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");


class Line {
	#isLoaded = false;
	#prevParent;

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_0__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-line'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-line';
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = ``
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	/**
	 * 
	 * @param {HTMLElement} element 
	 * @returns {HTMLElement} 
	 */
	static getLine(element){
		let line = undefined;
		if( ! element.parentElement){
			return line;
		}else if(element.classList?.contains(Line.toolHandler.defaultClass)){
			return element;
		}else if(element.parentElement.classList.contains(Line.toolHandler.defaultClass)){
			line = element.parentElement;
		}else{
			line = element.parentElement.closest(`.${Line.toolHandler.defaultClass}`);
		}
		return line;
	}
	static getTool(element, TargetTool){
		let tool = undefined;
		
		if( ! element.parentElement){
			return tool;
		}else if(element.classList?.contains(TargetTool.toolHandler.defaultClass)){
			return element
		}else if(element.parentElement.classList.contains(TargetTool.toolHandler.defaultClass)){
			tool = element.parentElement;
		}else{
			tool = element.parentElement.closest(`.${TargetTool.toolHandler.defaultClass}`);
		}

		if(! tool){
			tool = element.parentElement.querySelector(`.${TargetTool.toolHandler.defaultClass}`);
		}
		return tool;
	}
	
	static isElementTextEmpty(element){
        let sty = window.getComputedStyle(element);
		if(sty.visibility == 'hidden' || sty.opacity == 0){
			return false;
		}
		//let emptyString = (element.innerText.replace(/\n+/g, '\n') == '\n' || element.innerText.replace(/\u200B+/g, '\u200B') == '\u200B');
        return element.innerText.length == 0 || (element.innerText.length == 1 && (element.innerText == '\n' || element.innerText == '\u200B'));
    }

	lineElement

	constructor(div){
		//super();
		if( ! div){
			this.lineElement = Object.assign(document.createElement('div'),{
				className : Line.toolHandler.defaultClass
			})
		}else{
			this.lineElement = div;
			this.lineElement.classList.add(Line.toolHandler.defaultClass);
		}
		this.lineElement.dataset.is_line = '';
		/*
		Object.getOwnPropertyNames(Object.getPrototypeOf(this)).forEach(functionName=>{
			if(functionName == 'constructor') return;
			this.lineElement[functionName] = this[functionName];
		});
		*/
		this.lineElement.line = this;
		/*
		this.onkeyup = (event) => {
			if(event.key === 'Backspace' && this.innerText.length == 1 && (this.innerText.includes)){

			}
		}
		*/
		/*
		let observer = new MutationObserver( (mutationList, observer) => {
			mutationList.forEach((mutation) => {
				if(Line.isElementTextEmpty(this.lineElement)){
					if(this.lineElement.childElementCount != 0){
						return;
					}
					//this.lineElement.innerText = '\n';
					window.getSelection().setPosition(this.lineElement, 0)
					this.lineElement.focus();
				}
			})
		});
		observer.observe(this.lineElement, {
			childList:true,
			subtree: true
		})
		*/
	}
	/*
	connectedCallback(){
		if( ! this.#isLoaded){
            this.#isLoaded = true;

			
			if(this.innerText.length == 0 || (this.innerText.length == 1 && this.innerText.charAt(0) == '\n')){
				this.innerText = '\n';
				window.getSelection().setPosition(this, 1)
				this.focus();
			}

		}
	}
	disconnectedCallback(){
        this.#isLoaded = false;
    }
	*/
	/**
	 * applyTool, cancelTool에서 3가지 경우의 수로 함수를 분기시킬 것 apply mng와 cancel mng class를 새로 만들것, 
	 * line이 할 일이 아니니 freedomPlusEditor로 옮길 것
	 * --applyTool
	 * 1. 범위 전체
	 * 2. 범위이되 line이 같을 때 (textNode별로 처리 필요)
	 * 3. start와 end가 다를 때(멀티라인)
	 * --cancelTool
	 * 1. 범위
	 * 2. 범위 중 일부
	 * 3. 멀티라인
	 */

	/**
	 * tool이 좌우 옆 또는 자식, 부모에서 동일한 tool임을 감지할 때 합치는 로직 필요
	 */
	/**
	 * 
	 * @param {*} tool 
	 * @param {*} range 
	 * @returns 
	 */
	async #applyOnlyOneTool(tool, range){
		return new Promise(resolve=>{
			range.surroundContents(tool);
			resolve(tool)
		});
	}
	
	async #applyOnlyOneLine(range, tool, TargetTool){
		return new Promise(resolve=>{
			let {startOffset, endOffset, startContainer,endContainer} = range;

			let selection = window.getSelection();

			let startNodeToPrevNodeIndex = [...this.lineElement.childNodes].findIndex(e=>selection.containsNode(e, true)) - 1;
			let isFirstNodeToStart = startNodeToPrevNodeIndex < 0;

			
			let nodeList = [];
			for(let i = startNodeToPrevNodeIndex + 1 ; true ; i += 1){
				if( ! this.lineElement.childNodes[i] || ! selection.containsNode(this.lineElement.childNodes[i], true)){
					break;
				}
				let iter = document.createNodeIterator(this.lineElement.childNodes[i], NodeFilter.SHOW_TEXT)
				let targetNode;
				while(targetNode = iter.nextNode()){
					if(targetNode == endContainer){
						// this.lineElement.childNodes[i] == endContainer == targetNode
						let clone = targetNode.cloneNode(true);
						clone.textContent = targetNode.textContent.substring(endOffset);
						targetNode.after(clone);
						targetNode.textContent = targetNode.textContent.substring(0, endOffset);
					}
				}
				nodeList.push(this.lineElement.childNodes[i]);
			}
			//nodeList.forEach(e=>e.remove())
			//prepend
			tool.append(...nodeList);
			if(isFirstNodeToStart){
				this.lineElement.prepend(tool)
			}else{
				let startTarget = this.lineElement.childNodes[startNodeToPrevNodeIndex];
				startTarget.after(tool);
			}
			
			/*
			range.setStart(startContainer, startOffset);
			range.setEnd(startContainer, startContainer.textContent.length);
			range.surroundContents(tool);
			
			let targetNode = startContainer.nextSibling;
			//let lastPrevTool = undefined;
			while(targetNode){
				console.log(targetNode)
				if(targetNode == endContainer){
					console.log(2)
					break;
				}
				if(targetNode.textContent == '' || TargetTool.prototype.isPrototypeOf(targetNode)){
					console.log(3)
					targetNode = targetNode.nextSibling
					continue;
				}

				console.log(targetNode);
				range.selectNode(targetNode);
				range.surroundContents(new TargetTool());
				console.log(4)
				targetNode = targetNode.nextSibling
			}

			let endTool = new TargetTool();
			range.setStart(endContainer, 0);
			range.setEnd(endContainer, endOffset);
			range.surroundContents(endTool);
			resolve(endTool);
			*/
			resolve();
		});
	}
	async #applyMultipleLineAllBlock(range, tool ,TargetTool, endLine){
		return new Promise(resolve => {
			let fragment = range.extractContents();
			tool.append(...fragment.childNodes);
			this.lineElement.append(tool);
			resolve(tool);
		})
	}
	async #applyMultipleLineAll(range, tool, TargetTool, endLine){
		return new Promise(resolve=>{
			let {startOffset, endOffset, startContainer,endContainer} = range;
			
			range.setStart(startContainer, startOffset);
			range.setEnd(startContainer, startContainer.textContent.length);
			range.surroundContents(tool);

			let targetStartLineItem = startContainer.nextSibling?.nextSibling;
			
			if(targetStartLineItem){
				let itemRemoveList = [];
				let itemAppendList = [];
				while(targetStartLineItem){
					if(targetStartLineItem.nodeType == Node.ELEMENT_NODE){
						if(tool == targetStartLineItem){
							break;
						}
						tool.append(targetStartLineItem);
						
					}else{
						itemAppendList.push(targetStartLineItem.textContent);
						itemRemoveList.push(targetStartLineItem);
					}
					targetStartLineItem = targetStartLineItem.nextSibling;	

				}
				[...tool.childNodes].find(e=>e.nodeType == Node.TEXT_NODE)?.appendData(itemAppendList.join(''));
				itemRemoveList.forEach(e=>e.remove())
			}
			
			if(tool.parentElement != this.lineElement && tool.parentElement?.nextSibling){
				//20230817 멀티라인일시 첫번쨰 라인 중첩 서식 미동작 현상 수정을 위해 내용 변경
				let nextTool = new TargetTool();
				nextTool.append(tool.parentElement.nextSibling);
				tool.parentElement.after(nextTool);
				let nextItem = nextTool.nextSibling;

				while(nextItem){		
					if(nextTool == nextItem){
						break;
					}
					nextTool.append(nextItem);

				}
			}
			
			
			let targetLine = Line.getLine(startContainer).nextElementSibling; 
			let middleTargetTool;
			
			while(targetLine){
				if(targetLine === endLine){
					break;
				}
				// 아래 주석 지우지 말 것, 중첩 자식 요소에서 미동작 또는 오류 발생시 아래 로직 주석 풀고 테스트 해볼 것
				// let middleTool = new TargetTool();
				// middleTool.append(...targetLine.childNodes);
				// targetLine.append(middleTool);
				middleTargetTool = new TargetTool()
				range.selectNodeContents(targetLine);
				range.surroundContents(middleTargetTool);
				targetLine = targetLine.nextElementSibling;

			}

			if(Line.prototype.isPrototypeOf(endContainer.line)){
				resolve(( ! middleTargetTool ? tool : middleTargetTool ));
			}else{
				let endTool = new TargetTool();
				range.setStart(endContainer, 0);
				range.setEnd(endContainer, endOffset);
				range.surroundContents(endTool);
				// 분할 적용 되지 않도록 합친다 ex(<b>1</b><b>2</b> => <b>12</b>) 
				let targetEndLineItem = endContainer.previousSibling;
				if(targetEndLineItem){
					let itemRemoveList = [];
					let itemAppendList = [];

					while(targetEndLineItem){
						if(targetEndLineItem.nodeType == Node.ELEMENT_NODE){
							endTool.prepend(targetEndLineItem);
							/*
							let firstTextNode = [...targetEndLineItem.childNodes].find(e=>e.nodeType == Node.TEXT_NODE);
							let moveTextList = [...endTool.childNodes].filter(e=>e.nodeType == Node.TEXT_NODE)
							moveTextList.forEach(e=>{
								e.textContent = firstTextNode.textContent + e.data
								firstTextNode.remove();
								firstTextNode = e;
							})
							targetEndLineItem.append(firstTextNode);
							*/
						}else{
						//endTool.prepend(document.createTextNode(targetEndLineItem.textContent));
							itemRemoveList.push(targetEndLineItem);
							itemAppendList.unshift(targetEndLineItem.textContent)
						}
						targetEndLineItem = targetEndLineItem.previousSibling;
					}
					//let targetTextNode = [...endTool.childNodes].find(e=>e.nodeType == Node.TEXT_NODE)
					//itemAppendList.push(targetTextNode.data);
					//targetTextNode.textContent = itemAppendList.join('');
					//endTool.append(targetTextNode)
					[...endTool.childNodes].find(e=>e.nodeType == Node.TEXT_NODE)?.appendData(itemAppendList.join(''));
					//endTool.prepend(document.createTextNode(itemAppendList.join('')))
					//itemRemoveList.forEach(e=>e.remove())
				}
				resolve(endTool);
			}


		})
	}

	/**
	 * 
	 * @param {*} TargetTool 
	 * @param {*} range 
	 * @returns 
	 */
	async applyTool(TargetTool, range, endLine){
		return new Promise(resolve => {
			let tool = new TargetTool();
			let {startOffset, endOffset, startContainer,endContainer} = range;

			/*
			if(startContainer === endContainer){
				console.log('applyOnlyOneTool');
				this.#applyOnlyOneTool(tool, range).then(tool=>{
					resolve(tool)
				})
			}*/
			if(this.lineElement.childNodes.length == 1 && this.lineElement.innerText == '\n' && this.lineElement.childNodes[0].nodeName == 'BR'){
				this.lineElement.childNodes[0].remove();
			}
			if(tool.shadowRoot || ! TargetTool.toolHandler.isInline){
				resolve(this.#applyMultipleLineAllBlock(range, tool, TargetTool, endLine));
			}else if(startContainer === endContainer && this.lineElement.innerText.length != range.toString().length){
				console.log('applyOnlyOneTool');
				this.#applyOnlyOneTool(tool, range).then(tool=>{
					resolve(tool)
				})
			}else if(Line.getLine(startContainer) === Line.getLine(endContainer)){
				console.log('applyOnlyOneLine')
				this.#applyOnlyOneLine(range, tool, TargetTool).then(endTool => {
					resolve(endTool)
				})
			}else{
				console.log('applyMultipleLineAll')
				this.#applyMultipleLineAll(range, tool, TargetTool, endLine).then(endTool => {
					resolve(endTool)
				})
			}
		})
	}

	async #cancelOnlyOneLine(range, tool, TargetTool){
		return new Promise(resolve => {
			// this로 childern 돌려서 TargetTool 타입 체크랑 nodeType로 바깥으로 빼는 로직 만들기
			let {startOffset, endOffset, startContainer, endContainer} = range;
			this.lineElement.childNodes.forEach(e=>{
				this.#findCancels(e, TargetTool);
			});
			resolve();
		});
	}
	async #cancelOnlyOneTool(range, tool, TargetTool){
		return new Promise(resolve => {
			let {startOffset, endOffset, startContainer, endContainer, commonAncestorContainer} = range;
			/*
			let textNode = document.createTextNode(startContainer.textContent.substring(startOffset, endOffset));
			let startNextSibling = (tool?.nextSibling  || endContainer.nextSibling);
			let startPrevSibling = (tool?.previousSibling || startContainer.previousSibling);
			*/
			let offset = endOffset - startOffset;

			let leftText = undefined;
			let rightText = undefined;
			let leftList = [];
			let rightList = [];
			let targetWrap = undefined;
			let targetText;
			if(commonAncestorContainer.nodeType == Node.TEXT_NODE && commonAncestorContainer.parentElement != this && ! TargetTool.prototype.isPrototypeOf(commonAncestorContainer.parentElement)){
				let cloneRange = range.cloneRange();
				cloneRange.selectNode(commonAncestorContainer.parentElement);
				targetText = cloneRange.cloneContents();
			}else{
				targetText = range.cloneContents();
			}

			let selection = window.getSelection()

			if(tool.childNodes.length > 1){
				let list = [...tool.childNodes];
				let index = list.findIndex(e=> selection.containsNode(e, true) || selection.containsNode(e, false))
				targetWrap = list[index]
				leftList = list.slice(0, index);
				rightList = list.slice(index + 1);
			}
			

			if(startContainer.textContent.length != offset){
				leftText = startContainer.textContent.substring(0, startOffset);			
				rightText = offset <= 1 ? startContainer.textContent.substring(startOffset + 1) : startContainer.textContent.substring(startOffset + offset);
				if(targetWrap != undefined){
					let cloneLeft = targetWrap.cloneNode(false);
					cloneLeft.textContent = leftText;
					leftText = cloneLeft; 
					let cloneRight = targetWrap.cloneNode(false);
					cloneRight.textContent = rightText;
					rightText = cloneRight; 
					targetWrap.remove();
				}else{
					leftText = document.createTextNode(leftText);
					rightText = document.createTextNode(rightText);
				}
				leftList.unshift(leftText);
				rightList.push(rightText);
			}
			//tool.replaceChildren(...leftList, targetText, ...rightList)

			let leftElement = undefined;
			if(leftList.length != 0){
				leftElement = new TargetTool();
				leftElement.append(...leftList);
			}
			let rightElement = undefined;
			if(rightList.length != 0){
				rightElement = new TargetTool();
				rightElement.append(...rightList);
			}

			let appendList = [leftElement, targetText, rightElement].filter(e=>e);
			if(tool.previousSibling){
				tool.previousSibling.after(...appendList)
			}else if(tool.nextSibling){
				tool.nextSibling.before(...appendList);
			}else{
				this.lineElement.append(...appendList);
			}
			/*
			if(startPrevSibling && startPrevSibling.nodeType == Node.TEXT_NODE){
				console.log(1)
				if(rightText){
					let rightTool = new TargetTool();
					rightTool.textContent = rightText;
					startPrevSibling.after(rightTool);
				}
				startPrevSibling.after(textNode);
				if(leftText){
					let leftTool = new TargetTool()
					leftTool.textContent = leftText 
					startPrevSibling.after(leftTool);
				}
			}else if(startNextSibling && startNextSibling.nodeType == Node.TEXT_NODE){
				console.log(2)
				if(leftText){
					let leftTool = new TargetTool()
					leftTool.textContent = leftText 
					startNextSibling.before(leftTool);
				}
				startNextSibling.before(textNode);
				if(rightText){
					let rightTool = new TargetTool();
					rightTool.textContent = rightText;
					startNextSibling.before(rightTool);
				}
			}else{
				console.log(3)
				if(leftText){
					let leftTool = new TargetTool()
					leftTool.textContent = leftText 
					this.append(leftTool);
				}
				this.append(document.createTextNode(textNode));
				if(rightText){
					let rightTool = new TargetTool();
					rightTool.textContent = rightText;
					this.append(rightTool);
				}
			}*/
			//startContainer.remove();
			tool.remove();
			resolve();
		});
	}

	async #cancelMultipleLineAll(range, tool, TargetTool, endLine){
		return new Promise(resolve => {
			let {startOffset, endOffset, startContainer, endContainer} = range;
			
			let endTool = Line.getTool(endContainer, TargetTool);

			// 파이어폭스에서 startContainer, endContainer가 나노 미세 컨트롤로 커서 위치와 관계 없이 비정상 동작 하는 현상 수정 필요
			let startTextNode = document.createTextNode(startContainer.textContent.substring(startOffset, startContainer.textContent.length));
			let endTextNode = document.createTextNode(endContainer.textContent.substring(0, endOffset));
			
			let startLeftText = startContainer.textContent.substring(0, startOffset);
			let endRightText = endContainer.textContent.substring(endOffset, endContainer.textContent.length)

			let startNextSibling = tool?.nextSibling
			let startPrevSibling = tool?.previousSibling

			let endNextSibling = endTool?.nextSibling
			let endPrevSibling = endTool?.previousSibling

			if(startOffset == 0){
				//console.log(1)
				this.#findCancels(this.lineElement, TargetTool);
			}else
			if(startPrevSibling && startPrevSibling.nodeType == Node.TEXT_NODE){
				//console.log(2)
				startPrevSibling.after(startTextNode);
				if(startLeftText){
					let leftTool = new TargetTool()
					leftTool.textContent = startLeftText 
					startPrevSibling.after(leftTool);
				}
			}else if(startNextSibling && startNextSibling.nodeType == Node.TEXT_NODE){
				//console.log(3)
				if(startLeftText){
					let leftTool = new TargetTool()
					leftTool.textContent = startLeftText 
					startNextSibling.before(leftTool);
				}
				startNextSibling.before(startTextNode);
			}else{
				/*console.log(4)
				if(startLeftText){
					let leftTool = new TargetTool()
					leftTool.textContent = startLeftText 
					this.append(leftTool);
				}
				this.append(startTextNode);
				*/
			}
			if(tool){
				tool.remove();
			}

			let nextLine = this.lineElement.nextElementSibling;


			while(nextLine){
				if(nextLine == endLine){
					break;
				}
				nextLine.childNodes.forEach(e=>{
					//console.log(4);
					this.#findCancels(e, TargetTool);
				})
				nextLine = nextLine.nextElementSibling;

			}

			if(endOffset == endContainer.length){
				//console.log(1)
				this.#findCancels(endLine, TargetTool);
			}else
			if(endPrevSibling && endPrevSibling.nodeType == Node.TEXT_NODE){
				//console.log(2)
				if(endRightText){
					let rightTool = new TargetTool();
					rightTool.textContent = endRightText;
					endPrevSibling.after(rightTool);
				}
				endPrevSibling.after(endTextNode);
			}else if(endNextSibling && endNextSibling.nodeType == Node.TEXT_NODE){
				//console.log(3)
				endNextSibling.before(endTextNode);
				if(endRightText){
					let rightTool = new TargetTool();
					rightTool.textContent = endRightText;
					endNextSibling.after(rightTool);
				}
			}else{
				/*console.log(4)
				if(endRightText){
					let rightTool = new TargetTool();
					rightTool.textContent = endRightText;
					//endLine.append(rightTool);
				}
				endLine.prepend(endTextNode);
				*/
			}

			if(endTool){
				endTool.remove();
			}
			resolve();
		});
	}

	async cancelTool(TargetTool, selection, endLine){
		return new Promise(resolve => {
			let {isCollapsed, anchorNode, anchorOffset} = selection;
			let range = selection.getRangeAt(0);
			let {startOffset, endOffset, startContainer, endContainer, commonAncestorContainer} = range;
			let tool = Line.getTool(startContainer, TargetTool);
			/*
			if(startContainer === endContainer){
				if(startContainer.parentElement.childNodes.length == 1 
					&& startContainer.parentElement.childNodes[0] ==  startContainer
					&& startContainer.parentElement.childNodes[0] ==  endContainer
					&& endContainer.textContent.length == endOffset){
					// tool 범위 전체 선택인 경우
					this.#cancelOnlyOneLine(range, tool, TargetTool).then(()=>{
						console.log('cancelOnlyOneLine 1')
						resolve();
					})
				}else{
					// 범위 중 일부
					this.#cancelOnlyOneTool(range, tool, TargetTool).then(()=>{
						console.log('cancelOnlyOneTool')
						resolve();
					})
				}
			*/

			if( ! tool){
				TargetTool.toolHandler.toolButton.dataset.tool_status = 'connected'
				resolve();
			}else{
				if(startContainer === endContainer && this.lineElement.innerText.length != range.toString().length){
					this.#cancelOnlyOneTool(range, tool, TargetTool).then(()=>{
						console.log('cancelOnlyOneTool')
						resolve();
					})
				}else if(Line.getLine(startContainer) === Line.getLine(endContainer)){
					// 하나만
					// tool 범위 전체 선택인 경우
					this.#cancelOnlyOneLine(range, tool, TargetTool).then(()=>{
						console.log('cancelOnlyOneLine 2')
						resolve();
					})
				}else{
					this.#cancelMultipleLineAll(range, tool, TargetTool, endLine).then(()=>{
						console.log('cancelMultipleLineAll')
						resolve();
					}).catch(err=>console.error(err))
				}
				resolve();
			}
		})
	}

	#findCancels(element, TargetTool){
		new Promise(res=>{
			if(TargetTool.prototype.isPrototypeOf(element)){
				if(element.nextSibling){
					element.nextSibling.before(...element.childNodes);
				} else if(element.previousSibling){
					element.previousSibling.after(...element.childNodes);
				}else {
					element.parentElement.append(...element.childNodes);
				}
				element.remove();
			}else{
				if(element.nodeType == Node.ELEMENT_NODE){
					element.childNodes.forEach(e=>{
						this.#findCancels(e, TargetTool);
					})
				}
			}
			res();
		})
	}

	lookAtMe(){
		let sty = window.getComputedStyle(this.lineElement);
		if(sty.visibility == 'hidden' || sty.opacity == 0){
			return;
		}
		if(this.lineElement.innerText.length == 0 || (this.lineElement.innerText.length == 1 && this.lineElement.innerText.charAt(0) == '\n')){
			this.lineElement.innerText = '\n';
		}
		if(this.lineElement.isContentEditable){
			this.lineElement.focus()
			window.getSelection().setPosition(this.lineElement, this.lineElement.childNodes.length)
		}
	}

}

/***/ }),

/***/ "./view/js/handler/editor/component/Palette.js":
/*!*****************************************************!*\
  !*** ./view/js/handler/editor/component/Palette.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Palette)
/* harmony export */ });

class Palette {
	
	#style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-palette'
	});

	#palette = Object.assign(document.createElement('div'),{
		className: 'palette-wrap'
	});

	#paletteVw = 20; 
	#componentMap = undefined;
	
	#lastPanelPosition = undefined;
	
	#lastPaintPosition = undefined;
	#lastPaintRgb = [255, 0, 0];

	#lastBrightnessPosition = undefined;

	#r = 255;
	#g = 0;
	#b = 0;
	#a = 1;

    #openPositionMode;
	#openPosition;
	#exampleMode;

    #applyCallback = () => {}

	static ExampleMode = class ExampleMode{
		static #ExampleModeEnum = class ExampleModeEnum{
			value;
			constructor(value){
				this.value = value;
				Object.freeze(this);
			}
		}
		static TEXT_COLOR = new this.#ExampleModeEnum('color');
		static TEXT_BACKGROUND_COLOR = new this.#ExampleModeEnum('background-color');
		static TEXT_UNDERLINE = new this.#ExampleModeEnum('text-decoration');
		static TEXT_LINE_THROUGH = new this.#ExampleModeEnum('text-decoration');
		value;
		static{
			Object.freeze(this);
		}
		constructor(value){
			this.value = value;
			Object.freeze(this);
		}
	}

	static OpenPositionMode = class OpenPositionMode{
		static BUTTON = new OpenPositionMode('button')
		static WRAPPER = new OpenPositionMode('wrapper')
		/**
		 * @returns {String}
		 */
		value;
		static{
			Object.freeze(this);
		}
		constructor(value){
			this.value = value;
			Object.freeze(this);
		}
	}

    constructor({
		openPositionMode = Palette.OpenPositionMode.BUTTON,
		openPosition,
		exampleMode = Palette.ExampleMode.TEXT_COLOR
	}={}){
		
        this.#openPositionMode = openPositionMode;
		if( ! this.#openPositionMode ){//|| ! (this.#openPositionMode instanceof Palette.OpenPositionMode)){
			throw new Error('this is not OpenPositionMode');
		}
		this.#openPosition = openPosition;
        if( ! this.#openPosition || ! this.#openPosition.nodeType || this.#openPosition.nodeType != Node.ELEMENT_NODE){
            throw new Error('openPosition is not element');
        }
		this.#exampleMode = exampleMode;
		
		if(this.#openPositionMode == Palette.OpenPositionMode.BUTTON){
			this.#palette.style.position = "fixed";
		}

        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }

        document.addEventListener("scroll", () => {
			if(this.#palette.isConnected){
				this.#processingPalettePosition(this.#palette);
			}
		});

        window.addEventListener('resize', (event) => {
            if(this.#palette.isConnected){
                this.reset();
                this.#palette.replaceChildren();
                let done = setTimeout(()=>{
                    this.open();
                    clearTimeout(done);
                    done = undefined
                },200)
            }
		})

        new Array('mouseup', 'touchend').forEach(eventName => {
			window.addEventListener(eventName, () => {
				if( ! this.#componentMap){
					return;
				}
				this.#componentMap.colorPanel?.removeAttribute('data-is_mouse_down');
				this.#componentMap.colorPaint?.removeAttribute('data-is_mouse_down');
				this.#componentMap.colorBrightness?.removeAttribute('data-is_mouse_down');
			})
		})
		
		new Array('mousemove', 'touchmove').forEach(eventName=>{
			window.addEventListener(eventName, (event) => {
				if( ! this.#componentMap){
					return;
				}
				
				if(this.#componentMap.colorPanel && this.#componentMap.colorPanel.hasAttribute('data-is_mouse_down')){
					this.#colorPanelMoveEvent(event)
				}
				if(this.#componentMap.colorPaint && this.#componentMap.colorPaint.hasAttribute('data-is_mouse_down')){
					this.#colorPaintMoveEvent(event);
				}
				if(this.#componentMap.colorBrightness && this.#componentMap.colorBrightness.hasAttribute('data-is_mouse_down')){
					this.#colorBrightnessMoveEvent(event);
				}
			})
		})
    }

    #createPalette(palette, itemMap){
		let {
			topTextWrap, selectionRgbBg, previousRgbBg, 
			colorWrap, colorPanel, colorPaint, 
			colorBrightnessWrap, colorBrightness,
			bottomTextWrap, selectionRgbText, previousRgbText,
			applyWrap, cancelButton, applyButton
		} = itemMap
		palette.replaceChildren(topTextWrap, colorWrap, colorBrightnessWrap, bottomTextWrap, applyWrap);
		this.#settingCanvas();
		this.#settingApplyEvent(palette, cancelButton, applyButton, selectionRgbText);
	}

    #createPaletteItems(){

		// 팔레트 상단 텍스트 영역
		let {topTextWrap, selectionRgbBg, previousRgbBg} = this.#createRgbaTopTextWrap()
		
		// 팔레트 중단 컬러 설정 집합 영역
		let colorWrap = Object.assign(document.createElement('div'),{
			className: 'color-wrap'
		})

		let colorPanel = this.#createColorPanel();
		let colorPaint = this.#createColorPaint();
		colorWrap.append(colorPanel, colorPanel.__colorPanelSelected, colorPanel.__colorPanelSelectedPointer,
			colorPaint, colorPaint.__colorPaintSelectedPointer);

		// 팔레트 색상 명도 조절 설정 캔버스 영역
		let {colorBrightnessWrap, colorBrightness} = this.#createColorBrightness()

		// 팔레트 하단 텍스트 영역
		let {bottomTextWrap, selectionRgbText, previousRgbText} = this.#createRgbaBottomTextWrap();
		
		let {applyWrap, cancelButton, applyButton} = this.#createApplyButtonWrap();

		return {
			topTextWrap, selectionRgbBg, previousRgbBg, 
			colorWrap, colorPanel, colorPaint, 
			colorBrightnessWrap, colorBrightness,
			bottomTextWrap, selectionRgbText, previousRgbText,
			applyWrap, cancelButton, applyButton
		};
	}

    #createColorPanel(){
		let colorPanel = Object.assign(document.createElement('canvas'),{
			className: 'palette-panel'
		})
		let colorPanelSelected = Object.assign(document.createElement('canvas'),{
			className: 'panel-selected'
		})
		let colorPanelSelectedPointer = Object.assign(document.createElement('div'),{
			className: 'panel-selected-pointer'
		});

		colorPanel.__colorPanelSelected = colorPanelSelected;
		colorPanel.__colorPanelSelectedPointer = colorPanelSelectedPointer;

		return colorPanel;
	}

    #createColorPaint(){
		let colorPaint = Object.assign(document.createElement('canvas'),{
			className: 'palette-paint'
		});

		let colorPaintSelectedPointer = Object.assign(document.createElement('div'), {
			className: 'paint-selected-pointer'
		})
		colorPaintSelectedPointer.append(Object.assign(document.createElement('div'),{
			className: 'paint-selected-pointer-child'
		}));
		colorPaint.__colorPaintSelectedPointer = colorPaintSelectedPointer

		return colorPaint;
	}

    #createColorBrightness(){
		let colorBrightnessWrap = Object.assign(document.createElement('div'), {
			className: 'brightness-wrap'
		});
		let colorBrightness = Object.assign(document.createElement('canvas'), {
			className: 'brightness-color'
		})
		let colorBrightnessSelectedPointer = Object.assign(document.createElement('div'), {
			className: 'brightness-selected-pointer'
		});
		colorBrightnessSelectedPointer.append(Object.assign(document.createElement('div'), {
			className: 'brightness-selected-pointer-child'
		}));
		colorBrightness.__colorBrightnessSelectedPointer = colorBrightnessSelectedPointer;
		colorBrightnessWrap.append(colorBrightness, colorBrightness.__colorBrightnessSelectedPointer)

		return {colorBrightnessWrap, colorBrightness};
	}

    #createRgbaTopTextWrap(){
		let topTextWrap = Object.assign(document.createElement('div'), {
			className: 'top-text-wrap'
		});
		
		let blackOrWhite = this.#blackOrWhite(this.#r, this.#g, this.#b);

		let selectionRgbBg = Object.assign(document.createElement('div'), {
			className: 'selection-rgb-bg',
			textContent: this.selectedColor
		});
		selectionRgbBg.style.background = this.selectedColor;
		selectionRgbBg.style.color = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`


		let previousRgbBg = Object.assign(document.createElement('div'), {
			className : 'previous-rgb-bg',
		});
		previousRgbBg.style.background = this.selectedColor;

		topTextWrap.append(selectionRgbBg, previousRgbBg)

		return {topTextWrap, selectionRgbBg, previousRgbBg}
	}

    #createRgbaBottomTextWrap(){
		let bottomTextWrap = Object.assign(document.createElement('div'), {
			className: 'bottom-text-wrap'
		});
		let selection = window.getSelection();
		let sampleText = '';
		if(selection.rangeCount != 0 && selection.isCollapsed == false){
			let range = selection.getRangeAt(0)
			let aticle = document.createElement('aticle');
			let rangeClone = range.cloneContents();
			aticle.append(rangeClone);
			sampleText = aticle
		}
		sampleText = sampleText == '' ? '가 나다 라 A BC D' : sampleText;
		let blackOrWhite = this.#blackOrWhite(this.#r, this.#g, this.#b);
		
		let selectionRgbText = Object.assign(document.createElement('div'), {
			className: 'selection-rgb-text',
		});
		this.#applyExampleTextColor(selectionRgbText, this.selectedColor, blackOrWhite);

		let previousRgbText = Object.assign(document.createElement('div'), {
			className: 'previous-rgb-text',
		});
		this.#applyExampleTextColor(previousRgbText, this.selectedColor, blackOrWhite);

		if(sampleText.nodeType && sampleText.nodeType == Node.ELEMENT_NODE){
			selectionRgbText.innerHTML = sampleText.innerHTML;
			previousRgbText.innerHTML = sampleText.innerHTML;
		}else{
			selectionRgbText.textContent = sampleText;
			previousRgbText.textContent = sampleText;
		}


		bottomTextWrap.append(selectionRgbText, previousRgbText)

		return {bottomTextWrap, selectionRgbText, previousRgbText}
	}

    #createApplyButtonWrap(){
		let applyWrap = Object.assign(document.createElement('div'),{
			className: 'button-wrap'
		})
		let cancelButton = Object.assign(document.createElement('button'), {
			className: 'cancel-button',
			type: 'button',
			textContent: 'cancel'
		})
		let applyButton = Object.assign(document.createElement('button'), {
			className: 'apply-button',
			type: 'button',
			textContent: 'apply'
		})
		applyWrap.append(cancelButton, applyButton);
		return {applyWrap, cancelButton, applyButton};
	}

    #settingCanvas(){
		return new Promise(resolve=> {
			this.#settingColorPanel()
			this.#settingColorPaint()
			this.#settingColorBrightness();
			resolve();
		})
	}

    #settingColorPanel(){
		return new Promise(resolve=>{
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;

			const setPanelSelectePosition = () => {
				let colorPanelRect = colorPanel.getBoundingClientRect();
				let colorPanelSelected = colorPanel.__colorPanelSelected;
				colorPanelSelected.style.top = colorPanelRect.y + 'px';
				colorPanelSelected.style.left = colorPanelRect.x + 'px';
				colorPanelSelected.style.width = colorPanelRect.width + 'px';
				colorPanelSelected.style.height = colorPanelRect.height + 'px';
				colorPanelSelected.width = colorPanelRect.width;
				colorPanelSelected.height = colorPanelRect.height;
			}

			colorPanel.onmousedown = (event)=>{
				colorPanel.setAttribute('data-is_mouse_down', '');
				let {x, y} = this.#getEventXY(event);
				colorPanel.__colorPanelSelectedPointer.style.top = y
				colorPanel.__colorPanelSelectedPointer.style.left = x
				setPanelSelectePosition()
				this.#colorPanelMoveEvent(event);
			}
			colorPanel.ontouchstart = colorPanel.onmousedown;

			colorPanel.__colorPanelSelected.onmousedown = colorPanel.onmousedown;
			colorPanel.__colorPanelSelected.ontouchstart = colorPanel.onmousedown;
			
			colorPanel.__colorPanelSelectedPointer.onmousedown = colorPanel.onmousedown;
			colorPanel.__colorPanelSelectedPointer.ontouchstart = colorPanel.onmousedown;

			resolve(setTimeout(()=>{
				let panelContext = colorPanel.getContext('2d', { willReadFrequently: true });
				let colorPanelRect = colorPanel.getBoundingClientRect();
				colorPanel.width = colorPanelRect.width;
				colorPanel.height = colorPanelRect.height;
                setPanelSelectePosition();
				this.#changeColorPanel(panelContext)

				let blackOrWhite = this.#blackOrWhite(this.#r, this.#g, this.#b);
				let context = colorPanel.__colorPanelSelected.getContext('2d', { willReadFrequently: true })
				if(this.#lastPanelPosition){
					this.#processingColorPanelSeleter(context, this.#lastPanelPosition.x - colorPanelRect.x, this.#lastPanelPosition.y - colorPanelRect.y, blackOrWhite);
				}else{
					this.#processingColorPanelSeleter(context, colorPanelRect.width - 1, 0.1, blackOrWhite);
					this.#lastPanelPosition = {x:colorPanelRect.right - 1, y:colorPanelRect.top}
                    colorPanel.__colorPanelSelectedPointer.style.top = this.#lastPanelPosition.y + 'px';
                    colorPanel.__colorPanelSelectedPointer.style.left = this.#lastPanelPosition.x + 'px';
                }
			},200))
		});
	}

    #changeColorPanel(context){
		context.clearRect(0, 0, context.canvas.width, context.canvas.height);
		let [r,g,b] = this.#lastPaintRgb
		// 가로 그라데이션
		let gradientH = context.createLinearGradient(2, 0, context.canvas.width - 2, 0);
		gradientH.addColorStop(0, 'white');
		gradientH.addColorStop(1, `rgba(${r}, ${g}, ${b}, ${this.#a})`);
		context.fillStyle = gradientH;
		context.fillRect(0, 0, context.canvas.width, context.canvas.height);
		// 수직 그라데이션
		let gradientV = context.createLinearGradient(0, 2, 0, context.canvas.height - 2);
		gradientV.addColorStop(0, 'rgba(0,0,0,0)');
		gradientV.addColorStop(1, 'black');
		context.fillStyle = gradientV;
		context.fillRect(0, 0, context.canvas.width, context.canvas.height);
	}

    #processingColorPanelSeleter(colorPanelSelectedContext, x, y, [r = 0, g = 0, b = 0] = []){
		new Promise(resolve=>{
			colorPanelSelectedContext.clearRect(0, 0, colorPanelSelectedContext.canvas.width, colorPanelSelectedContext.canvas.height);
			colorPanelSelectedContext.lineWidth = 1;
			colorPanelSelectedContext.beginPath();
			colorPanelSelectedContext.arc(x, y, 10, 0, 2 * Math.PI);
			colorPanelSelectedContext.strokeStyle = `rgb(${r}, ${g}, ${b})`
			colorPanelSelectedContext.stroke();
			resolve();
		});
	}

    #colorPanelMoveEvent(event){
		new Promise(resolve => {
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;
			let rect = colorPanel.getBoundingClientRect();
			let {x:pageX, y:pageY} = this.#getEventXY(event);

			let isLeftOver = pageX < rect.left;
			let isRightOver = pageX > rect.right - 1;
			let isTopOver = pageY < rect.top;
			let isBottomOver = pageY > rect.bottom;

			colorPanel.__colorPanelSelectedPointer.style.left = pageX + 'px';
			colorPanel.__colorPanelSelectedPointer.style.top = pageY + 'px';

			let {x : reProcessingRectX, y : reProcessingRectY} = colorPanel.__colorPanelSelectedPointer.getBoundingClientRect();
			
			let x = reProcessingRectX - rect.x
			let y = reProcessingRectY - rect.y


			if(isLeftOver){
				x = 0
				reProcessingRectX = rect.left
			}
			if(isRightOver){
				x = rect.width - 1
				reProcessingRectX = rect.right - 1
			}
			if(isTopOver){
				y = 0
				reProcessingRectY = rect.top
			}
			if(isBottomOver){
				y = rect.height
				reProcessingRectY = rect.bottom
			}

			this.#lastPanelPosition = {x : reProcessingRectX, y : reProcessingRectY};
			let context = colorPanel.getContext('2d', { willReadFrequently: true });
			
			/*if(isLeftOver && isTopOver){
				[this.#r, this.#g, this.#b] = [255,255,255];
			//}else if(isRightOver && isTopOver){
			//	[this.#r, this.#g, this.#b] = this.#lastPaintRgb
			}else if((isRightOver && isBottomOver) || (isLeftOver && isBottomOver) || isBottomOver){
				[this.#r, this.#g, this.#b] = [0,0,0];
			}else{*/
				[this.#r, this.#g, this.#b] = context.getImageData(x, y, 1, 1).data;
			//}

			let selectedColor = `rgba(${this.#r}, ${this.#g}, ${this.#b}, ${this.#a})`;
			let blackOrWhite = this.#blackOrWhite(this.#r,this.#g,this.#b);

			this.#processingColorPanelSeleter(
				colorPanel.__colorPanelSelected.getContext('2d', { willReadFrequently: true })
				, x, y, blackOrWhite);

			selectionRgbBg.textContent = selectedColor;
			selectionRgbBg.style.color = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
			selectionRgbBg.style.background = selectedColor;
			
			this.#applyExampleTextColor(selectionRgbText, selectedColor, blackOrWhite);

			if(this.#a < 0.75){
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = 'solid 1px white';
			}else{
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = `solid 1px rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`;
			}

			this.#changeColorBrightness(colorBrightness.getContext('2d', { willReadFrequently: true }), [this.#r, this.#g, this.#b]);

			resolve();
		})
	}

    #settingColorPaint(){
		return new Promise(resolve => {
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;

			colorPaint.onmousedown = (event) => {
				colorPaint.setAttribute('data-is_mouse_down', '');
				let {x, y} = this.#getEventXY(event);
				colorPaint.__colorPaintSelectedPointer.style.top = y + 'px';
				this.#colorPaintMoveEvent(event);
			}
			colorPaint.ontouchstart = colorPaint.onmousedown;

			colorPaint.__colorPaintSelectedPointer.onmousedown = colorPaint.onmousedown;
			colorPaint.__colorPaintSelectedPointer.ontouchstart = colorPaint.ontouchstart;
			
			resolve(setTimeout(()=>{
				let colorPaintRect = colorPaint.getBoundingClientRect();
				colorPaint.width = colorPaintRect.width;
				colorPaint.height = colorPaintRect.height;
	
				let context = colorPaint.getContext('2d', { willReadFrequently: true } );
                context.clearRect(0, 0, colorPaint.width, colorPaint.height);

                let gradient = context.createLinearGradient(0, 2, 0, colorPaint.height - 2); 
	
				gradient.addColorStop(0, 'rgb(255, 0, 0)') // red
				gradient.addColorStop(0.15, 'rgb(255, 0, 255)') // violet
				gradient.addColorStop(0.35, 'rgb(0, 0, 255)') // blue
				gradient.addColorStop(0.45, 'rgb(0, 255, 255)') // Sky blue
				gradient.addColorStop(0.65, 'rgb(0, 255, 0)') // green
				gradient.addColorStop(0.85, 'rgb(255, 255, 0)') // yellow
				gradient.addColorStop(0.9, 'orange')
				gradient.addColorStop(1, 'rgb(255, 0, 0)') // red
				context.fillStyle = gradient;
				context.fillRect(0, 0, colorPaint.width, colorPaint.height);

				if(this.#lastPaintPosition){
					colorPaint.__colorPaintSelectedPointer.style.top = this.#lastPaintPosition.y + 'px';
				}else{
					colorPaint.__colorPaintSelectedPointer.style.top = colorPaintRect.y + 'px';
					this.#lastPaintPosition = colorPaintRect.y;
				}
				colorPaint.__colorPaintSelectedPointer.style.left = colorPaintRect.x + 'px';
				colorPaint.__colorPaintSelectedPointer.style.width = colorPaintRect.width + 'px';
				let [r,g,b] = this.#blackOrWhite(...this.#lastPaintRgb);
				colorPaint.__colorPaintSelectedPointer.children[0].style.border = `solid 1px rgb(${r}, ${g}, ${b})`
			},200));
		});
	}

    #colorPaintMoveEvent(event){
		new Promise(resolve => {
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;
			let rect = colorPaint.getBoundingClientRect();
			let pageY = this.#getEventXY(event).y;

			let isTopOver = pageY < rect.top;
			let isBottomOver = pageY > rect.bottom - 1;

			colorPaint.__colorPaintSelectedPointer.style.top = pageY + 'px';

			let {y : reProcessingRectY} = colorPaint.__colorPaintSelectedPointer.getBoundingClientRect();
			
			let y = reProcessingRectY - rect.y


			let isOver = false;
			if(isTopOver){
				y = 0;
				reProcessingRectY = rect.top;
				isOver = true;
			}
			if(isBottomOver){
				y = rect.height - 1
				reProcessingRectY = rect.bottom - 1
				isOver = true;
			}

			this.#lastPaintPosition = {y: reProcessingRectY}
			let context = colorPaint.getContext('2d', { willReadFrequently: true });
			let r,g,b;
			if(isOver){
				[r,g,b] = [255, 0, 0];
			}else{
				[r,g,b] = context.getImageData(1, y, 1, 1).data;
			}
			this.#lastPaintRgb = [r,g,b]

			colorPaint.__colorPaintSelectedPointer.style.top = reProcessingRectY + 'px';

			let blackOrWhite = this.#blackOrWhite(r,g,b);

			colorPaint.__colorPaintSelectedPointer.children[0].style.border = `solid 1px rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`

			if(this.#a < 0.75){
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = 'solid 1px white';
			}else{
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = `solid 1px rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`;
			}

			

			this.#changeColorBrightness(colorBrightness.getContext('2d', { willReadFrequently: true }), [r,g,b]);

			this.#changeColorPanel(colorPanel.getContext('2d', { willReadFrequently: true }));
			let colorPanelRect = colorPanel.getBoundingClientRect();
			this.#processingColorPanelSeleter(
				colorPanel.__colorPanelSelected.getContext('2d', { willReadFrequently: true }),
				this.#lastPanelPosition.x - colorPanelRect.x,
				this.#lastPanelPosition.y - colorPanelRect.y,
			)
			this.#colorPanelMoveEvent({x:this.#lastPanelPosition.x, y:this.#lastPanelPosition.y})
			resolve();
		})
	}

    #settingColorBrightness(){
		new Promise(resolve => {
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;

			colorBrightness.onmousedown = (event) => {
				colorBrightness.setAttribute('data-is_mouse_down', '');
				let {x, y} = this.#getEventXY(event);
				colorBrightness.__colorBrightnessSelectedPointer.style.left = x + 'px';
				this.#colorBrightnessMoveEvent(event);
			}
			colorBrightness.ontouchstart = colorBrightness.onmousedown;

			colorBrightness.__colorBrightnessSelectedPointer.onmousedown = colorBrightness.onmousedown
			colorBrightness.__colorBrightnessSelectedPointer.ontouchstart = colorBrightness.onmousedown
			
			setTimeout(() => {
                let blackOrWhite = this.#blackOrWhite(this.#r, this.#g, this.#b);
				let colorBrightnessRect = colorBrightness.getBoundingClientRect()
				colorBrightness.width = colorBrightnessRect.width;
				colorBrightness.height = colorBrightnessRect.height;
	
				let context = colorBrightness.getContext('2d', { willReadFrequently: true });
				this.#changeColorBrightness(context, [this.#r, this.#g, this.#b]);

				if(this.#lastBrightnessPosition){
					colorBrightness.__colorBrightnessSelectedPointer.style.left = this.#lastBrightnessPosition.x + 'px';
				}else{
					colorBrightness.__colorBrightnessSelectedPointer.style.left = colorBrightnessRect.right + 'px';
				}
				
				colorBrightness.__colorBrightnessSelectedPointer.style.top = colorBrightnessRect.y + 'px';
				colorBrightness.__colorBrightnessSelectedPointer.style.height = colorBrightnessRect.height + 'px';
                colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = `solid 1px rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
            }, 200)
			
			resolve();
		})
	}

    #changeColorBrightness(context, [r = 255, g=0, b=0]){
		context.clearRect(0, 0, context.canvas.width, context.canvas.height);
		let gradient = context.createLinearGradient(0, 0, context.canvas.width, 0) 
		gradient.addColorStop(0, 'rgba(0,0,0,0)');
		gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, ${this.#a})`); // 페인트 컬러로 변경 필요
		context.fillStyle = gradient;
		context.fillRect(0, 0, context.canvas.width, context.canvas.height);
	}

    #colorBrightnessMoveEvent(event){
		new Promise(resolve=> {
			let {
				topTextWrap, selectionRgbBg, previousRgbBg, 
				colorWrap, colorPanel, colorPaint, 
				colorBrightnessWrap, colorBrightness,
				bottomTextWrap, selectionRgbText, previousRgbText
			} = this.#componentMap;
			let rect = colorBrightness.getBoundingClientRect();

			let {x:pageX, y:pageY} = this.#getEventXY(event);

			let isLeftOver = pageX < rect.left;
			let isRightOver = pageX > rect.right;

			colorBrightness.__colorBrightnessSelectedPointer.style.left = pageX + 'px';

			let {x : reProcessingRectX} = colorBrightness.__colorBrightnessSelectedPointer.getBoundingClientRect();
			
			let x = rect.x - reProcessingRectX

			if(isLeftOver){
				x = rect.x
				reProcessingRectX = rect.x
				colorBrightness.__colorBrightnessSelectedPointer.style.left = rect.x + 'px'
				this.#a = 0
			}else if(isRightOver){
				x = rect.right
				reProcessingRectX = rect.right
				colorBrightness.__colorBrightnessSelectedPointer.style.left = rect.right + 'px';
				this.#a = 1
			}else{
				this.#a = ((reProcessingRectX - rect.x) / rect.width).toFixed(2)
			}

			let blackOrWhite = this.#blackOrWhite(this.#r, this.#g, this.#b);
			
			selectionRgbBg.textContent = this.selectedColor;
			selectionRgbBg.style.background = this.selectedColor;

			selectionRgbText.style.color = this.selectedColor;
			this.#applyExampleTextColor(selectionRgbText, this.selectedColor, blackOrWhite);
			if(this.#a < 0.75){
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = 'solid 1px white';
			}else{
				colorBrightness.__colorBrightnessSelectedPointer.children[0].style.border = `solid 1px rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`;
			}

			resolve()
		});
	}

    #settingApplyEvent(palette, cancelButton, applyButton, selectionRgbText){
		cancelButton.onclick = () => {
			this.close();
			//palette.remove();
		}
		applyButton.onclick = (event) => {
            this.applyCallback(event);
		}
	}

    #processingPalettePosition(palette){
		if(this.#openPositionMode == Palette.OpenPositionMode.BUTTON){
			let {x, y, height} = this.#openPosition.getBoundingClientRect();
			//let paletteWidthPx = document.documentElement.clientHeight * (this.#paletteVw / 100);
			//let paletteHeightPx = document.documentElement.clientHeight * (this.#paletteVh / 100);
			let paletteHeightPx = palette.clientHeight;
			let paletteTop = (y - paletteHeightPx)
			if(paletteTop > 0){
				palette.style.top = paletteTop + 'px';
			}else{
				palette.style.top = y + height + 'px';
			}
			palette.style.left = x + 'px';
		}else if(this.#openPositionMode == Palette.OpenPositionMode.WRAPPER){
			this.#openPosition.append(palette);
		}
	}

	/**
	 * @see https://stackoverflow.com/a/3943023
	 * @param  {...any} rgb 
	 * @returns 
	 */
    #blackOrWhite(...rgb){
		let [r,g,b] = rgb;
		return (r * 0.299 + g * 0.587 + b * 0.114) > 186
            ? [0, 0, 0]
            : [255, 255, 255];
	}

    #getEventXY(event){
		let x;
		let y;
		if(window.TouchEvent && event.constructor == window.TouchEvent){
			x = event.touches[0].pageX
			y = event.touches[0].pageY
			event.preventDefault();
		}else{
			x = event.x
			y = event.y
		}
		return {x,y};
	}

	/**
	 * 
	 * @param {HTMLElement} text 
	 * @param {String} color 
	 * @param {Array<Number>} blackOrWhite 
	 */
	#applyExampleTextColor(text, color, blackOrWhite){
		if(this.#exampleMode == Palette.ExampleMode.TEXT_COLOR){
			text.style.color = color
			if(blackOrWhite && blackOrWhite.length != 0){
				text.style.backgroundColor = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
			}
		}else if(this.#exampleMode == Palette.ExampleMode.TEXT_BACKGROUND_COLOR){
			text.style.backgroundColor = color
			if(blackOrWhite && blackOrWhite.length != 0){
				text.style.color = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
			}
		}else if(this.#exampleMode == Palette.ExampleMode.TEXT_UNDERLINE){
			text.style.textDecoration = 'underline'
			text.style.textDecorationColor = color
			
			if(blackOrWhite && blackOrWhite.length != 0){
				text.style.color = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
				text.style.backgroundColor = 'rgba(255, 255, 255, 0.25)'
				/*if(blackOrWhite.filter(e=>e==255).length == 3){
					text.style.backgroundColor = 'rgba(0, 0, 0, 0.3)'
				}else{
					text.style.backgroundColor = 'rgba(255, 255, 255, 0.25)'
				}*/
			}
			
		}else if(this.#exampleMode == Palette.ExampleMode.TEXT_LINE_THROUGH){
			text.style.textDecoration = 'line-through'
			text.style.textDecorationColor = color;
			
			if(blackOrWhite && blackOrWhite.length != 0){
				text.style.color = `rgb(${blackOrWhite[0]}, ${blackOrWhite[1]}, ${blackOrWhite[2]})`
				text.style.backgroundColor = 'rgba(255, 255, 255, 0.25)'
			}
			
		}
	}

    get selectedColor(){
		return `rgba(${this.#r}, ${this.#g}, ${this.#b}, ${this.#a})`;
	}

    get palette(){
        return this.#palette;
    }

    get isConnected(){
        return this.#palette.isConnected;
    }

    set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}

	get r(){
		return this.#r;
	}
	get g(){
		return this.#g;
	}
	get b(){
		return this.#b;
	}
	get a(){
		return this.#a;
	}

    reset(){
		this.#r = 255;
		this.#g = 0;
		this.#b = 0;
		this.#a = 1;
		this.#lastPaintRgb = [255, 0, 0];
		this.#lastPanelPosition = undefined;
		this.#lastPaintPosition = undefined;
		this.#lastBrightnessPosition = undefined;
        this.#componentMap = undefined;
        
	}

    close(){
        this.#palette.remove();
    }

    open(){
        this.#componentMap = this.#createPaletteItems();
        document.body.append(this.#palette);
        this.#createPalette(this.#palette, this.#componentMap);
        this.#processingPalettePosition(this.#palette);
    }

    createStyle(){
		//position: fixed; 제거 20230517
		this.#style.textContent = `
			.palette-wrap{
				background: #343434;
				padding: 0.9%;
				width: ${this.#paletteVw}vw;
				height: fit-content;
				color: white;
				font-size: 13px;
				min-width: 300px;
				z-index: 999;
				-webkit-user-select:none;
				-moz-user-select:none;
				-ms-user-select:none;
				user-select:none
			}
			.palette-wrap .palette-panel{
				width: 90%;
				position: relative;
			}

			/* 상단 텍스트 영역 [S] */
			.palette-wrap .top-text-wrap{
				display: flex;
				justify-content: space-between;
				margin-bottom: 2%;
				height: 8%;
			}
			.palette-wrap .top-text-wrap .selection-rgb-bg{
				width: 100%;
				text-align-last: center;
				display: flex;
				justify-content: center;
				align-items: center;
			}
			.palette-wrap .top-text-wrap .previous-rgb-bg{
				text-align-last: center;
				display: flex;
				justify-content: center;
				align-items: center;
				width: 11.5%;
			}
			/* 상단 텍스트 영역 [E] */

			/* 컬러 영역 영역 [S] */
			.palette-wrap .color-wrap{
				display: flex;
				justify-content: space-between;
				margin-bottom: 2%;
			}

			.palette-wrap .color-wrap .panel-selected{
				position: fixed;
				z-index: 9999;
			}
			.palette-wrap .color-wrap .panel-selected-pointer{
				position: fixed;
				width: 1px;
				height: 1px;
			}

			.palette-wrap .color-wrap .palette-paint{
				width: 5%;
			}
			.palette-wrap .color-wrap .paint-selected-pointer{
				position: fixed;
				height: 1px;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: #faebd700;
			}
			.palette-wrap .color-wrap .paint-selected-pointer-child{
				position: absolute;
				border: solid 1px;
				height: 2px;
				width: inherit;
			}
			/* 컬러 영역 영역 [E] */

			/* 투명도 영역 [S] */
			.palette-wrap .brightness-wrap{
				margin-bottom: 2%;
				background-image: /* tint image */ linear-gradient(to right, rgb(192 192 192 / 20%), rgb(192 192 192 / 20%)), /* checkered effect */ linear-gradient(to right, #505050 50%, #a1a1a1 50%), linear-gradient(to bottom, #505050 50%, #a1a1a1 50%);
				background-blend-mode: normal, difference, normal;
				background-size: 2em 2em;
				display: flex;
			}
			.palette-wrap .brightness-wrap .brightness-color{
				height: 2vh;
				width: 100%;
				min-height: 17px;
			}
			.palette-wrap .brightness-wrap .brightness-selected-pointer{
				position: fixed;
				width: 1px;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: #faebd700;
			}
			.palette-wrap .brightness-wrap .brightness-selected-pointer-child{
				position: absolute;
				border: solid 1px;
				height: inherit;
				width: 2px;
				background: inherit;
			}
			/* 투명도 영역 [E] */

			/* 하단 텍스트 영역 [S] */
			.palette-wrap .bottom-text-wrap{
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 2%;
			}
			.palette-wrap .bottom-text-wrap .selection-rgb-text{
				margin-right: 5%;
			}
			.palette-wrap .bottom-text-wrap .selection-rgb-text, .palette-wrap .bottom-text-wrap .previous-rgb-text{
				overflow-x: hidden;
				max-width: 40%;
				text-overflow: ellipsis;
				width: fit-content;
				background: rgba(255, 255, 255, 0.25);
				color: rgba(255, 255, 255, 0.25);
			}
			.palette-wrap .bottom-text-wrap .selection-rgb-text *, .palette-wrap .bottom-text-wrap .previous-rgb-text *{
				text-overflow: ellipsis;
				overflow-x: hidden;
			}
			/* 하단 텍스트 영역 [E] */

			/* 버튼 영역 [S] */
			.palette-wrap .button-wrap {
				display: flex;
				justify-content: space-around;
			}
			.palette-wrap .cancel-button, .palette-wrap .apply-button{
				background: none;
				border: revert;
				color: #b9b9b9;
				border-color: #464646;
			}
			/* 버튼 영역 [E] */
		`;
		return this.#style;
	}
}

/***/ }),

/***/ "./view/js/handler/editor/component/SortBox.js":
/*!*****************************************************!*\
  !*** ./view/js/handler/editor/component/SortBox.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SortBox)
/* harmony export */ });
class SortBox {
    
    #style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-sort-box'
	});

    #sortBox = Object.assign(document.createElement('div'), {
        className: 'sort-box-wrap',
    })

    #sortBoxContainer = Object.assign(document.createElement('ul'),{
        className: 'sort-box-container',
    })

    #sortBoxItems = [/*'left',*/ 'center', 'right'].map(e=>Object.assign(document.createElement('li'),{
        textContent: e,
    }));

    #selectedSort;

    #applyCallback = () => {}
    
    constructor(){
        let style = document.querySelector(`#${this.#style.id}`);
        
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }

        this.#sortBox.append(this.#sortBoxContainer);
        this.#sortBoxContainer.replaceChildren(...this.#sortBoxItems);
        this.#sortBoxItems.forEach(e=>{
            e.onclick = (event) => {
                this.#selectedSort = e; 
                this.applyCallback(event);
            }
        });
    }

    open(){
        document.body.append(this.#sortBox);
    }

    close(){
        this.#sortBox.remove();
    }

    set applyCallback(applyCallback){
        this.#applyCallback = applyCallback;
    }

    get applyCallback(){
        return this.#applyCallback;
    }

    get sortBox(){
        return this.#sortBox;
    }

    get selectedSort(){
        return this.#selectedSort;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}
    
    
    createStyle(){
        this.#style.textContent = `
            .sort-box-wrap {
                background: #000000bf;
                position: fixed;
                padding: 0.9%;
                height: fit-content;
                color: white;
                font-size: 13px;
                min-width: 85px;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                z-index: 999;
            }
            .sort-box-wrap .sort-box-container {
                list-style-type: none;
                padding: 0;
                margin: 0;
                display: flex;
                gap: 1vw;
            }
            
            .sort-box-wrap .sort-box-container li{
                transition: all 0.5s;
                padding: 1% 2% 1% 2%;
                margin-right: 1vw;
            }
            .sort-box-wrap .sort-box-container li:hover{
                background-color: #95959591;
                cursor: pointer;
            }

        `
        return this.#style;
    }

}

/***/ }),

/***/ "./view/js/handler/editor/component/VideoBox.js":
/*!******************************************************!*\
  !*** ./view/js/handler/editor/component/VideoBox.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VideoBox)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");


class VideoBox {
    
    #style = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-video-box'
	});

    #videoBox = Object.assign(document.createElement('div'), {
        className: 'video-box-wrap',
        
        innerHTML:`
            <div class="video-resize-container">
                <div>
                    <label class="video-box-resize-label" for="video-box-resize-width">width : </label>
                    <input list="video-box-resize-datalist" class="video-box-resize-input" id="video-box-resize-width" type="number" autocomplete="off"/>
                    <div>
                        <label class="video-box-resize-label-error-message" for="video-box-resize-width"></label>
                    </div>
                </div>
                <div>
                    <label class="video-box-resize-label" for="video-box-resize-height">height(auto) : </label>
                    <input list="video-box-resize-datalist" class="video-box-resize-input" id="video-box-resize-height" type="number" autocomplete="off" disabled/>
                </div>
            </div>
            <div class="video-key-description-container" style="display:none;">
                <kbd>Ctrl</kbd><kbd>Wheel</kbd>OR<kbd>Shift</kbd><kbd>Wheel</kbd>
            </div>
            <div class="video-button-container">
                <a href="javascript:void(0);" class="download" download>
                    <svg style="zoom:140%;" class="download-css-gg-push-down"
                        width="1rem"
                        height="1rem"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        d="M11.0001 1H13.0001V15.4853L16.2428 12.2427L17.657 13.6569L12.0001 19.3137L6.34326 13.6569L7.75748 12.2427L11.0001 15.4853V1Z"
                        fill="#00000073"
                        />
                        <path d="M18 20.2877H6V22.2877H18V20.2877Z" fill="#00000073" />
                    </svg>
                </a>
                <a href="javascript:void(0);" class="new-window">
                    <svg style="zoom: 150%;" class="new-window-css-gg-expand"
                        width="1rem"
                        height="1rem"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        d="M12.3062 16.5933L12.2713 18.593L5.2724 18.4708L5.39457 11.4719L7.39426 11.5068L7.33168 15.092L15.2262 7.46833L11.6938 7.40668L11.7287 5.40698L18.7277 5.52915L18.6055 12.5281L16.6058 12.4932L16.6693 8.85507L8.72095 16.5307L12.3062 16.5933Z"
                        fill="#00000073"
                        />
                    </svg>
                </a>
            </div>
        `
        /* 리사이즈 있는 버전 주석처리 20230821 <i class="download-css-gg-push-down"></i>
        innerHTML: `
            <div class="video-resize-container">
                <div>
                    <label class="video-box-resize-label" for="video-box-resize-width">width : </label>
                    <input list="video-box-resize-datalist" class="video-box-resize-input" id="video-box-resize-width" type="number" autocomplete="off"/>
                </div>
                <div>
                    <label class="video-box-resize-label" for="video-box-resize-height">height(auto) : </label>
                    <input list="video-box-resize-datalist" class="video-box-resize-input" id="video-box-resize-height" type="number" autocomplete="off" disabled/>
                </div>
            </div>
            <div class="video-button-container">
                <a href="javascript:void(0);" class="download-css-gg-push-down" download></a>
                <a href="javascript:void(0);" class="new-window-css-gg-path-trim"></a>
            </div>
        `
        */
    });
    /*
    #removeEventPromiseResolve;
    #removeEventPromise = new Promise(resolve=>{
		this.#removeEventPromiseResolve = resolve;
	});
    */
    #video;
    #resizeRememberTarget;

    constructor(){
        let style = document.querySelector(`#${this.#style.id}`);
        if(! style){
            document.head.append(this.createStyle());
        }else{
            this.#style = style;
        }
        document.addEventListener('keydown',(event)=>{
            if(this.#videoBox.hasAttribute('data-is_shft')){
                return;
            }
            let {key} = event;
            if(key === 'Shift'){
                this.#videoBox.dataset.is_shft = '';
            }
        })

        document.addEventListener('keyup', (event)=>{
            if( ! this.#videoBox.hasAttribute('data-is_shft')){
                return;
            }    
            let {key} = event;
            if(key === 'Shift'){
                this.#videoBox.removeAttribute('data-is_shft');
            }
        })
        
        this.#videoBox.onwheel = (event) => {
            if(this.#videoBox.hasAttribute('data-is_shft')){
                return;
            }
            event.preventDefault();
            let {deltaY} = event;
            
            this.#videoBox.scrollTo(
                this.#videoBox.scrollLeft + deltaY, undefined
            );
        }
        let [width, height] = this.#videoBox.querySelectorAll('#video-box-resize-width, #video-box-resize-height');
        
        window.addEventListener('keyup', (event) => {
            if( ! this.video || ! this.resizeRememberTarget || ! width.hasAttribute('data-is_ctrl') || ! this.video.parentElement.matches(':hover')){//|| this.video.getRootNode()?.activeElement != width){
                return;
            }
            width.removeAttribute('data-is_ctrl');
        })

        window.addEventListener('keydown', (event) => {
            
            let eventPath = event.composedPath()

            if( ! this.video || ! this.resizeRememberTarget || eventPath[0] == width || ! this.video.parentElement.matches(':hover')){//|| this.video.getRootNode()?.activeElement != width){
                return;
            }
            if(event.ctrlKey){
                width.dataset.is_ctrl = '';
            }else{
                width.removeAttribute('data-is_ctrl');
            }
        })
        
        /**
         * @see https://www.chromestatus.com/feature/6662647093133312
         */
        window.addEventListener('wheel', (event) => {

            if( ! this.video || ! this.resizeRememberTarget || ! this.video.parentElement.hasAttribute('data-is_resize_click') || event.composedPath()[0] == width || ! this.video.parentElement.matches(':hover')){// || this.video.getRootNode()?.activeElement != width){
                return;
            }
            if(width.hasAttribute('data-is_ctrl')){
                width.value = Number(width.value) + (event.deltaY * -1)
            }else{
                width.value = Number(width.value) + ((event.deltaY * -1) / 100)
            }
            this.oninputEvent(this.video, width, height, this.resizeRememberTarget);
            
        })
    }

    /**
     * 
     * @param {HTMLVideoElement} video 
     */
    addVideoHoverEvent(video, resizeRememberTarget){
        //video.parentElement.onmouseover = () => {
        let keyDescription = this.#videoBox.querySelector('.video-key-description-container')
        video.parentElement.onmouseenter = () => {
            if(! video.src || video.src == '' || video.hasAttribute('data-error')){
                return;
            }
            let root = video.getRootNode();
            if(root != document){
                root.append(this.#style);
            }else{
                document.head.append(this.#style);
            }

            if(video.parentElement && (video.parentElement !== this.#videoBox.parentElement || ! this.#videoBox.classList.contains('start'))){
                video.parentElement.append(this.#videoBox);

                this.#addRresizeEvent(video, resizeRememberTarget)
                this.#addButtonIconEvent(video)
                let appendAwait = setInterval(()=>{
                    if(this.#videoBox.isConnected && video.readyState == 4 && video.parentElement === this.#videoBox.parentElement && ! this.#videoBox.classList.contains('start')){
                        this.#videoBox.classList.add('start');
                        this.video = video;
                        this.resizeRememberTarget = resizeRememberTarget;
                        video.parentElement.onclick = (event) => {
                            if(! video.src || video.src == '' || event.composedPath()[0] != video || video.hasAttribute('data-error')){
                                return;
                            }
                            video.parentElement.toggleAttribute('data-is_resize_click');
                            this.falsh(video.parentElement);
                            if(video.parentElement.hasAttribute('data-is_resize_click')){
                                keyDescription.style.display = '';
                            }else {
                                keyDescription.style.display = 'none';
                            }
                        }
                        clearInterval(appendAwait);
                    }
                }, 50)
            }
        }
        video.parentElement.onmouseleave = () => {
            this.#videoBox.classList.remove('start');
            if(video.parentElement.hasAttribute('data-is_resize_click')){
                keyDescription.style.display = 'none';
                this.falsh(video.parentElement);
            }
            video.parentElement.removeAttribute('data-is_resize_click');
            /*if(this.#videoBox.isConnected && video.parentElement === this.#videoBox.parentElement){
                
                this.#videoBox.classList.remove('start');
                this.#videoBox.ontransitionend = () => {
                    if(this.#videoBox.isConnected){
                        this.#videoBox.remove();
                    }
                }
                
            }*/
        }
    }

    falsh(target){
        return new Promise(resolve => {
            let flash = document.createElement('div');
            Object.assign(flash.style, {
                position: 'absolute',top: '0px',left: '0px',
                width: '100%',height: '100%', background: 'rgba(255, 255, 255, 0.4)',
                transition: 'opacity 0.2s ease 0s', opacity: 0
            })
            target.append(flash);
            let flashAwait = setInterval(()=>{
                if( ! flash.isConnected){
                    return; 
                }
                clearInterval(flashAwait);
                flash.style.opacity = 1;
                flash.ontransitionend = () => {
                    flash.style.opacity = 0;
                    flash.ontransitionend = () => {
                        flash.remove();
                        resolve();
                    }
                }
            }, 50)
        });
    }

    /**
     * 
     * @param {HTMLVideoElement} video 
     */
    //리사이즈 있는 버전 주석 처리 20230821
    #addRresizeEvent(video, resizeRememberTarget){
        return new Promise(resolve => {
            let [width, height] = this.#videoBox.querySelectorAll('#video-box-resize-width, #video-box-resize-height');
            let rect = video.getBoundingClientRect();
            width.value = parseInt(rect.width), height.value = parseInt(rect.height);
            
            width.labels[0].textContent = 'width : ';
            width.labels[1].textContent = '';

            this.prevValue = undefined;

            width.oninput = (event) => this.oninputEvent(video, width, height, resizeRememberTarget);
            width.onkeydown = (event) => {
                if(event.ctrlKey){
                    width.dataset.is_ctrl = '';
                }else{
                    width.removeAttribute('data-is_ctrl');
                }
            }
            width.onkeyup = (event) => {
                width.removeAttribute('data-is_ctrl');
            }
            width.onblur = () => {
                width.removeAttribute('data-is_ctrl');
            }
            width.onwheel = (event) => {
                event.preventDefault();
                if(width.hasAttribute('data-is_ctrl')){
                    width.value = Number(width.value) + (event.deltaY * -1)
                }else{
                    width.value = Number(width.value) + ((event.deltaY * -1) / 100)
                }

                this.oninputEvent(video, width, height, resizeRememberTarget);
            }
            //height.oninput = (event) => oninputEvent(event);
            resolve({width, height});
        });
    }
    oninputEvent(video, width, height, resizeRememberTarget) {
        if(isNaN(Number(width.value))){
            width.value = width.value.replace(/\D/g, '');
            return;
        }else if(Number(width.value) < 50){
            width.labels[1].textContent = '(min 50)';
            width.value = 50;
        }else{
            width.labels[1].textContent = '';
        }
        let sizeName = width.id.includes('width') ? 'width': 'height';
        video[sizeName] = width.value;

        let videoRect = video.getBoundingClientRect();

        if(this.prevValue && parseInt(this.prevValue) == parseInt(videoRect.width)){
            width.value = parseInt(this.prevValue);
            width.labels[1].textContent = `(max ${parseInt(this.prevValue)}) : `
        }
        this.prevValue = videoRect.width

        resizeRememberTarget.dataset.width = width.value;
    }
    #addButtonIconEvent(video){
        return new Promise(resolve => {
            let [download, newWindow] = [...this.#videoBox.querySelectorAll('.download-css-gg-push-down, .new-window-css-gg-expand')]
                .map(e=>e.parentElement)
            download.href = video.src, newWindow.href = video.src;
            download.download = video.dataset.video_name;
            newWindow.target = '_blank';
            resolve({download, newWindow});
        })
    }

    get videoBox(){
        return this.#videoBox;
    }

	get style(){
		return this.#style;
	}

	set style(style){
        this.#style.textContent = style;
    }

	set insertStyle(style){
		this.#style.sheet.insertRule(style);
	}
    
    set video(video){
        this.#video = video; 
    }

    get video(){
        return this.#video;
    }
    set resizeRememberTarget(resizeRememberTarget){
        this.#resizeRememberTarget = resizeRememberTarget;
    }
    get resizeRememberTarget(){
        return this.#resizeRememberTarget;
    }

    createStyle(){
        this.#style.textContent = `
            .video-box-wrap{
                position: absolute;
                display: flex;
                justify-content: space-between;
                width: 100%;
                background: linear-gradient(to bottom, #ff8787 -73%, #ffffffcf 115%);
                color: white;
                top:-20%;
                opacity: 0;
                transition: all 1s;
                white-space: nowrap;
                overflow-y: clip;
                overflow-x: auto;
            }
            .video-box-wrap::-webkit-scrollbar{
                display: none;
            }
            .video-box-wrap:hover::-webkit-scrollbar{
                display: initial;
                width: 7px;
                height: 7px;
            }
            .video-box-wrap:hover::-webkit-scrollbar-track{
                background: #00000040;
                border-radius: 100px;
                box-shadow: inset 0 0 5px #000000fc;
            }
            .video-box-wrap:hover::-webkit-scrollbar-thumb {
                background: #0c0c0c38;
                border-radius: 100px;
                box-shadow: inset 0 0 5px #000000;
            }
            .video-box-wrap:hover::-webkit-scrollbar-thumb:hover {
                /*background: #44070757;*/
                background: #34000075; 
            }
            .video-box-wrap.start{
                top: 0;
                opacity: 1;
                transition: all 0.5s;
            }
            .video-box-wrap .video-button-container, 
            .video-box-wrap .video-resize-container,
            .video-box-wrap .video-key-description-container{
                display: flex;
                gap: 1.5vw;
                padding: 1.7%;
                align-items: center;
            }
            .video-box-wrap .video-resize-container .video-box-resize-label{
                background: linear-gradient(to right, #e50bff, #004eff);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }
            .video-box-wrap .video-resize-container .video-box-resize-input{
                outline: none;
                border: none;
                background-image: linear-gradient(#fff1f1d4, #ffffffeb), linear-gradient(to right, #a189890d 0%,  #ed89b275 100%);
                background-origin: border-box;
                background-clip: content-box, border-box;
                background-color: #00000000; 
                width: 3.2rem;
                height: 100%;
                color: #ffb6b6;
                font-size: 0.9rem;
                text-align: center;
            }
            .video-box-wrap .video-button-container .new-window,
            .video-box-wrap .video-button-container .download{
                display: flex;
                align-items: center;
                border: none;
                background:none;
                position:relative;
                cursor: pointer;
            }

            .video-box-wrap kbd {
                background-color: #eee;
                border-radius: 3px;
                border: 1px solid #b4b4b4;
                box-shadow:
                0 1px 1px rgba(0, 0, 0, 0.2),
                0 2px 0 0 rgba(255, 255, 255, 0.7) inset;
                color: #333;
                display: inline-block;
                font-size: 0.85em;
                font-weight: 700;
                line-height: 1;
                padding: 2px 4px;
                white-space: nowrap;
                height: fit-content;
            }
        `
        return this.#style;
    }

}

/***/ }),

/***/ "./view/js/handler/editor/fragment/UndoManager.js":
/*!********************************************************!*\
  !*** ./view/js/handler/editor/fragment/UndoManager.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UndoManager)
/* harmony export */ });
/* harmony import */ var _FreeWillEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../FreeWillEditor */ "./view/js/handler/editor/FreeWillEditor.js");
/* harmony import */ var _component_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/Line */ "./view/js/handler/editor/component/Line.js");
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");




// 추후 indexed db 사용 검토
class UndoManager{
    #editor;
    #history = [];
    #historyIndex = 0;
    #historyLimit = 50;
    #UndoRedo = class UndoRedo{
        #html
        #time
        constructor(html){
            this.#html = html;
            this.#time = new Date().getTime();
        }
        get html(){
            return this.#html;
        }
        get time(){
            return this.#time;
        }
    }

    #lastCursorPositionRect;
    //#isUndoSwitch = false;

    /**
     * 
     * @param {FreeWillEditor} targetEditor 
     */
    //레인지를 저장해뒀다가 쓰기
    constructor(targetEditor){
        this.#editor = targetEditor;
        //if(this.#editor.contentEditable == 'true'){
            this.addCursorMove();
            this.addUndoKey();
            this.addUserInput();
        //}

    }

    addCursorMove(){
        /*
        let isFirst = true;
        document.addEventListener("selectionchange", (event) => {
            if(document.activeElement !== this.#editor){
				return;
			}
            let selection = window.getSelection();
            let range = selection.getRangeAt(0);
            let newRect = range.getBoundingClientRect();
            if(this.#lastCursorPositionRect && (this.#lastCursorPositionRect.x != newRect.x || this.#lastCursorPositionRect.y != newRect.y)){
                range.insertNode(this.#cursor);
            }else if(isFirst){
                range.insertNode(this.#cursor);
                isFirst = false;
            }
            this.#lastCursorPositionRect = newRect;
        });
        */
        _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_2__["default"].globalSelectionChangeEventListener(this, ({oldEvent, newEvent}) => {
            if(document.activeElement !== this.#editor){
				return;
			}
            this.rememberCursor();
		})
    }

    rememberCursor(){
        let selection = window.getSelection();
        let range = selection.getRangeAt(0);
        let newRect = range.getBoundingClientRect();
        if(this.#lastCursorPositionRect && (this.#lastCursorPositionRect.x == newRect.x && this.#lastCursorPositionRect.y == newRect.y)){
            return
        }
        let {focusNode, focusOffset} = selection

        let target;
        let index = (() => {
            if(focusNode.nodeType == Node.TEXT_NODE){
                target = focusNode.parentElement;
                return [...target.childNodes].findIndex(e=>e == focusNode);
            }else if(focusNode.nodeType == Node.ELEMENT_NODE){
                target = focusNode;
                return 0;
            }
        })();

        if(target == undefined){
            return;
        }else{
            let prevCursorTarget;
            if(this.#editor.hasAttribute('is_cursor')){
                prevCursorTarget = this.#editor;
            }else{
                prevCursorTarget = this.#editor.querySelector('[is_cursor]');
            }
            if(prevCursorTarget && prevCursorTarget != target){
                prevCursorTarget.removeAttribute('is_cursor');
                prevCursorTarget.removeAttribute('cursor_offset');
                prevCursorTarget.removeAttribute('cursor_type');
                prevCursorTarget.removeAttribute('cursor_index');
                prevCursorTarget.removeAttribute('cursor_scroll_x');
                prevCursorTarget.removeAttribute('cursor_scroll_y');
            }
        }

        /*
            Object.assign(parent.dataset,{
                offset: focusOffset,
                index: childIndex
            })
        */
        target.setAttribute('is_cursor', '');
        target.setAttribute('cursor_offset', focusOffset);
        target.setAttribute('cursor_type', target.nodeType);
        target.setAttribute('cursor_index', index);
        target.setAttribute('cursor_scroll_x', this.#editor.scrollLeft);
        target.setAttribute('cursor_scroll_y', this.#editor.scrollTop);
        this.#lastCursorPositionRect = newRect;
    }

    addUndoKey(){
        this.#editor.addEventListener('keydown', (event) => {
            if(document.activeElement !== this.#editor){
				return;
			}
            let {ctrlKey, key} = event;
            if( ! ctrlKey || ! (key == 'z' || key == 'y')){
                return;
            }
            event.preventDefault();
            if(key == 'z'){
                this.undoKeyEvent();
            }else{
                this.redoKeyEvent();
            }

            let cursorTarget = this.#editor.querySelector('[is_cursor]');
            if( ! cursorTarget){
                return;
            }

            let {'cursor_offset': offset, 'cursor_type': type, 'cursor_index': index, 'cursor_scroll_x': x, 'cursor_scroll_y': y} = cursorTarget.attributes
            let selection = window.getSelection();
            /*if(type.value == Node.TEXT_NODE){
                let textNode = cursorTarget.childNodes[index.value]; 
                selection.setPosition(textNode, offset.value);
            }else if(type.value == Node.ELEMENT_NODE){
                console.log(cursorTarget);
                selection.setPosition(cursorTarget, offset.value);
            }*/
            if(type.value == Node.ELEMENT_NODE){
                let node = cursorTarget.childNodes[index.value]; 
                selection.setPosition(node, offset.value);
            }else if(type.value == Node.TEXT_NODE){
                selection.setPosition(cursorTarget, offset.value);
            }
            this.#editor.scrollTo(Number(x.value), Number(y.value));
        });
    }

    undoKeyEvent(){
        if(this.#history.length == 0){
            return;
        }
        this.#historyIndex += 1;
        if(this.#historyIndex > this.#history.length - 1){
            this.#historyIndex = this.#history.length - 1
        }
        let undoRedo = this.#history[this.#historyIndex];
       
        //console.log('z key undo',undoRedo.html);
        this.#editor.innerHTML = undoRedo.html;
    }
    redoKeyEvent(){
        if(this.#history.length == 0){
            return;
        }
        this.#historyIndex -= 1;
        if(this.#historyIndex < 0){
            this.#historyIndex = 0
        }
        let undoRedo = this.#history[this.#historyIndex];

        //console.log('y key redo',undoRedo.html)
        this.#editor.innerHTML = undoRedo.html;
    }
    addUndoRedo(isCheckSkip = false){
        if(document.activeElement !== this.#editor && ! isCheckSkip){
            return;
        }

        this.rememberCursor();

        let undoRedo = new this.#UndoRedo(this.#editor.innerHTML.trim());
        this.#history.unshift(undoRedo);
        
        if(this.#history.length > this.#historyLimit){
            this.#history = this.#history.splice(0, this.#historyLimit);
        }
        
        //console.log('history', this.#history);
    }
    addUserInput(){
        let prevMils = new Date().getTime();
        this.#editor.addEventListener('keydown', (event) => {
            if(document.activeElement !== this.#editor || (new Date().getTime() - prevMils) < 500){
				return;
			}
            prevMils = new Date().getTime();
            let {ctrlKey, key, altKey} = event;
            if(ctrlKey || altKey || ctrlKey && (key == 'z' || key == 'y')){
                return;
            }
            
            if(this.#history.length != 0 && this.#history[0].html.trim() == this.#editor.innerHTML.trim()){
                return;
            }
            this.addUndoRedo();
        });
        /*
        let addElementObserver = new MutationObserver( (mutationList, observer) => {
            mutationList.forEach((mutation) => {
                let {addedNodes, removedNodes} = mutation;

                if(this.#isUndoSwitch){
                    this.#isUndoSwitch = false;
                    //return;
                }

                new Promise(resolve=>{
                    addedNodes.forEach(node=>{
                        if(node.nodeType != Node.ELEMENT_NODE){
                            return;
                        }
                        let tagName = node.tagName.toLowerCase();
                        if(this.#editor.tools.hasOwnProperty(tagName) && this.#history.length != 0 && this.#history[0].html.trim() != this.#editor.innerHTML.trim()){
                            let undoRedo = new this.#UndoRedo(this.#editor.innerHTML.trim());
                            this.#history.unshift(undoRedo);
                            if(this.#history.length > this.#historyLimit){
                                this.#history = this.#history.splice(0, this.#historyLimit);
                            }
                        }
                    });
                    resolve();
                })
            });
        })
        addElementObserver.observe(this.#editor, {
			childList:true,
			subtree: true
		});
        */
    }

    clearHistory(){
        this.#history = [];
    }
    
    clearEditor(){
        this.#editor.innerHTML = '';
    }

}

/***/ }),

/***/ "./view/js/handler/editor/module/FreeWiilHandler.js":
/*!**********************************************************!*\
  !*** ./view/js/handler/editor/module/FreeWiilHandler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FreeWiilHandler)
/* harmony export */ });
/* harmony import */ var _component_Line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Line */ "./view/js/handler/editor/component/Line.js");


class FreeWiilHandler extends HTMLElement{
    static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor'
	});

    static #defaultClass = 'free-will-editor';

    static createDefaultStyle(){
        let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle = defaultStyle;
        }
		this.#defaultStyle.textContent = `
            .${this.defaultClass}{
                height: inherit;
                overflow: auto;
                overflow-wrap: anywhere;
                outline: none;
                background-color: inherit;
                padding-top: 0.6%;
                padding-left: 0.5%;
                padding-right: 0.8%;
                -ms-overflow-style: none;
                scrollbar-width: none;
                display: block;
            }
            .${this.#defaultClass}::-webkit-scrollbar {
                display: none;
            }

            .${this.#defaultClass} > :nth-child(1)::before{
                content: attr(data-placeholder);
                position: absolute;
                color: #d1d1d1;
                font-weight: 600;
                font-family: revert;
                cursor: text;
            }
		`
		return this.#defaultStyle;
	}
    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

    static get defaultClass(){
        return this.#defaultClass;
    }

    static set defaultClass(defaultClass){
        this.#defaultClass = defaultClass;
    }

    constructor({isDefaultStyle = true} = {}){
        super()
        this.classList.add('free-will-editor');

    }

    blockBackspaceEvent(event){
    }

    /**
     * 
     * @returns {HTMLDivElement}
     */
    createLine(){
        let line = new _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this.append(line.lineElement);
        return line.lineElement;
    }

    getLineRange(selection = window.getSelection()){
        return new Promise(resolve => {
            let {anchorNode, focusNode} = selection; 
            let startAndEndLineObject;
            if(anchorNode == this){
                let allLine = [...this.children].filter(e=>e.classList.contains(`${_component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].toolHandler.defaultClass}`))
                startAndEndLineObject = {
                    startLine : allLine[0],
                    endLine : allLine.at(-1)
                }
                let range = selection.getRangeAt(0);
                //selection.removeAllRanges();
                let endLineChildNodes = [...startAndEndLineObject.endLine.childNodes].at(-1);
                range.setStart(startAndEndLineObject.startLine.childNodes[0], 1);
                range.setEnd(endLineChildNodes, endLineChildNodes.nodeType == Node.TEXT_NODE ? endLineChildNodes.textContent.length : startAndEndLineObject.endLine.childNodes.length);
                selection.addRange(range);
            }else{
                let anchorNodeLine = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(anchorNode);
                let focusNodeLine = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(focusNode);
                if(anchorNodeLine == focusNodeLine){
                    resolve({
                        startLine: anchorNodeLine,
                        endLine: focusNodeLine
                    })
                }
                startAndEndLineObject = [...this.querySelectorAll(`.${_component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].toolHandler.defaultClass}`)].reduce((obj,item,index)=>{
                    if(item == anchorNodeLine || item == focusNodeLine){
                        let key = 'startLine';
                        if(obj.hasOwnProperty(key)){
                            obj['endLine'] = item
                        }else{
                            obj[key] = item
                        }
                    }
                    return obj;
                },{})
            }
            resolve(startAndEndLineObject);
        })
    }

    isNextLineExist(element){
        let line = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(element);

        let nextLine = line.nextElementSibling;
        if( ! nextLine){
            return false;
        }
        return _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.isPrototypeOf(nextLine.line);
    }

    /**
     * 
     * @param {HTMLElement} element 
     * @param {Object} param1 
     * @returns {HTMLElement}
     */
    getNextLine(element, {focus = false} = {}){
        let line = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(element);
        if( ! line){
            return undefined;
        }
        
        let nextLine = line.nextElementSibling;
        if(nextLine && _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.isPrototypeOf(nextLine.line)){
            if(focus){
                nextLine.line.lookAtMe();
            }
            return nextLine;
        }
        return undefined;
    }
    
    /**
     * 
     * @param {HTMLElement} element 
     * @param {Object} param1 
     * @returns {HTMLElement}
     */
    getPrevLine(element, {focus = false} = {}){
        let line = _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(element);
        if( ! line){
            return undefined;
        }
        let nextLine = line.previousElementSibling;
        if(nextLine && _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.isPrototypeOf(nextLine.line)){
            if(focus){
                nextLine.line.lookAtMe();
            }
            return nextLine;
        }
        return undefined;
    }

    getLine(element){
        return _component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].getLine(element);
    }

}

/***/ }),

/***/ "./view/js/handler/editor/module/FreedomInterface.js":
/*!***********************************************************!*\
  !*** ./view/js/handler/editor/module/FreedomInterface.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FreedomInterface)
/* harmony export */ });
/* harmony import */ var _component_Line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Line */ "./view/js/handler/editor/component/Line.js");


class FreedomInterface extends HTMLElement {

	static globalMouseEvent = undefined;
	static lastClickElementPath = undefined;
	static globalClickEventPromiseResolve;
	static globalClickEventPromise = new Promise(resolve=>{
		this.globalClickEventPromiseResolve = resolve;
	});
	static globalKeydownEventPromiseResolve;
	static globalKeydownEventPromise = new Promise(resolve=>{
		this.globalKeydownEventPromiseResolve = resolve;
	})
	static globalSelectionChangeEventPromiseResolve;
	static globalSelectionChangeEventPromise = new Promise(resolve=>{
		this.globalSelectionChangeEventPromiseResolve = resolve;
	})
	static{
		document.addEventListener('mousemove', (event) => {
			//mousePos = { x: event.clientX, y: event.clientY };
			//mousePosText.textContent = `(${mousePos.x}, ${mousePos.y})`;
			this.globalMouseEvent = event;
		});
		document.addEventListener('mousedown', (event) => {
			this.lastClickElementPath = event.composedPath();
			this.globalClickEventPromiseResolve(event)
			this.globalClickEventPromise = new Promise(resolve => {
				this.globalClickEventPromiseResolve = resolve;
			})
		})
		window.addEventListener('keydown', (event) => {
			this.globalKeydownEventPromiseResolve(event);
			this.globalKeydownEventPromise = new Promise(resolve=>{
				this.globalKeydownEventPromiseResolve = resolve;
			})
		})
		document.addEventListener('selectionchange', (event) => {
			this.globalSelectionChangeEventPromiseResolve(event);
			this.globalSelectionChangeEventPromise = new Promise(resolve=>{
				this.globalSelectionChangeEventPromiseResolve = resolve;
			})
		});

	}
	static isMouseInnerElement(element){
		if( ! this.globalMouseEvent) return;
		let {clientX, clientY} = this.globalMouseEvent;
		let {x, y, width, height} = element.getBoundingClientRect();
		let isMouseInnerX = ((x + width) >= clientX && x <= clientX);
		let isMouseInnerY = ((y + height) >= clientY && y <= clientY);
		return (isMouseInnerX && isMouseInnerY);
	}
	static globalKeydownEventListener(element, callBack = ({oldEvent, newEvent})=>{}){
		let oldEvent = undefined;
		let newEvent = undefined;
		const simpleObserver = () => {
			this.globalKeydownEventPromise.then((event)=>{
				newEvent = event;
				callBack({oldEvent, newEvent});
				oldEvent = event;
				simpleObserver();
			})
		}
		simpleObserver();
	}
	static globalSelectionChangeEventListener(element, callBack = ({oldEvent, newEvent})=>{}){
		let oldEvent = undefined;
		let newEvent = undefined;
		const simpleObserver = () => {
			this.globalSelectionChangeEventPromise.then((event)=>{
				newEvent = event;
				callBack({oldEvent, newEvent});
				oldEvent = event;
				simpleObserver();
			})
		}
		simpleObserver();
	}
	/**
	 * 
	 * @param {HTMLElement} element 
	 * @param {Function} callBack 
	 */
	static outClickElementListener(element, callBack = ({oldEvent, newEvent, isMouseOut = false})=>{}){

		if(element == undefined || element?.nodeType != Node.ELEMENT_NODE){
			throw new Error('element is not Element');
		}

		let oldEvent = undefined;
		let newEvent = undefined;
		const simpleObserver = () => {
			this.globalClickEventPromise.then((event)=>{
				let isMouseOut = ! this.isMouseInnerElement(element);
				newEvent = event;
				callBack({oldEvent, newEvent, isMouseOut});
				oldEvent = event;
				simpleObserver();
			})
		}
		simpleObserver();
	}
	
	static DeleteOption = class DeleteOption{
		static #DeleteOptionEnum = class DeleteOptionEnum{
			value;
			constructor(value){
				this.value = value;
				Object.freeze(this);
			}
		}
		static EMPTY_CONTENT_IS_DELETE = new this.#DeleteOptionEnum('empty_content_is_delete');
		static EMPTY_CONTENT_IS_NOT_DELETE = new this.#DeleteOptionEnum('empty_content_is_not_delete');
		value;
		static{
			Object.freeze(this);
		}
		constructor(value){
			this.value = value;
			Object.freeze(this);
		}
	}

	#isLoaded = false;
	Tool;
	#connectedAfterCallback = () => {}
	#connectedAfterOnlyOneCallback = ()=> {}
	#disconnectedAfterCallback = ()=> {}
	#connectedChildAfterCallback = () => {}
	#disconnectedChildAfterCallback = () => {}
	#deleteOption;
	parentEditor;
	#childListObserver = new MutationObserver( (mutationList, observer) => {
		mutationList.forEach((mutation) => {
			let {addedNodes, removedNodes} = mutation;
			let connectedChildPromise = new Promise(resolve => {
				if(addedNodes.length != 0){
					
					let resultList;
					if( ! this.constructor.toolHandler.isInline){
						let lastItemIndex;
						resultList = [...addedNodes].map((e,i)=>{
							if( ! e.classList?.contains(_component_Line__WEBPACK_IMPORTED_MODULE_0__["default"].toolHandler.defaultClass)){
								let lineElement = this.parentEditor.createLine();
								lineElement.replaceChildren(e);
								this.append(lineElement);
								if( i == addedNodes.length - 1){
									lastItemIndex = i;
								}
								return lineElement;
							}
							return e;
						});
						//if(lastItemIndex){
						//	resultList[lastItemIndex].line.lookAtMe();
						//}
					}else{
						resultList = addedNodes;
					}
					
					this.connectedChildAfterCallback(resultList);
					//this.connectedChildAfterCallback(addedNodes);
				}
				resolve();
			})
			
			let disconnectedChildPromise = new Promise(resolve => {
				if(removedNodes.length != 0){
					this.disconnectedChildAfterCallback(removedNodes);
				}
				resolve();
			})
			
		})
	});
	constructor(Tool, dataset, {deleteOption = FreedomInterface.DeleteOption.EMPTY_CONTENT_IS_DELETE} = {}){
		super();
		this.#childListObserver.disconnect();
		this.#childListObserver.observe(this, {childList:true})
		this.#deleteOption = deleteOption;
		this.Tool = Tool;
		this.classList.add(this.constructor.toolHandler.defaultClass)

		document.addEventListener('selectionchange', this.removeFun, true);

		if(dataset){
			Object.assign(this.dataset, dataset);
		}
		
		FreedomInterface.globalSelectionChangeEventListener(this, ({oldEvent, newEvent}) => {
			if(this.#deleteOption != FreedomInterface.DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE && this.isToolEmpty()){
				let thisLine = this.parentEditor?.getLine(this);
				this.remove();
				if(thisLine){
					thisLine.line.lookAtMe();
				}
			}
		})

		if( ! this.constructor.toolHandler.isInline){
			/*FreedomInterface.globalKeydownEventListener(this, ({oldEvent, newEvent}) => {
				//console.log(newEvent);
			})*/
		}
	}
	connectedCallback(){

		if( ! this.#isLoaded){
			
			this.#isLoaded = true;
			this.constructor.toolHandler.connectedFriends = this;
			this.parentEditor = this.closest('.free-will-editor');
			this.parentLine = this.parentEditor?.getLine(this);

			if(this.childNodes.length == 0 && this.#deleteOption == FreedomInterface.DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE && (this.innerText.length == 0 || (this.innerText.length == 1 && this.innerText.charAt(0) == '\n'))){
				let sty = window.getComputedStyle(this);
				if(sty.visibility != 'hidden' || sty.opacity != 0){
					this.innerText = '\n';
				}
			}

			if(this.#deleteOption == FreedomInterface.DeleteOption.EMPTY_CONTENT_IS_DELETE && (this.isToolEmpty() || this.childNodes.length == 0)){
				let thisLine = this.parentEditor.getLine(this);
				this.remove();
				if(thisLine){
					thisLine.line.lookAtMe();
				}
			}
						
			if(this.shadowRoot){
				//this.parentLine.prepend(document.createTextNode('\u00A0'));
				//this.parentLine.prepend(document.createElement('br'));
				//this.before(document.createElement('br'));
				//this.parentLine.before(this.parentEditor.createLine());
				let nextLine = this.parentEditor.getNextLine(this.parentLine);
				if( ! nextLine){
					this.parentEditor.createLine().innerText = '\n';
				}else{
					nextLine.line.lookAtMe();
				}
				/*this.childNodes.forEach(e=>{
					if(e.nodeType == Node.TEXT_NODE){
						e.remove()
					}
				})*/
			}

			this.connectedAfterOnlyOneCallback();

			
			/*
			if(this.shadowRoot && (this.querySelectorAll('[slot]').length == 0 || this.childNodes.length == 0 || (this.childNodes.length == 1 && this.childNodes[0]?.tagName == 'BR'))){
				//this.parentLine.prepend(document.createElement('br'));
				
				let slot = Object.assign(document.createElement('slot'),{
					name: 'empty-slot'
				});
				let emptySpan = Object.assign(document.createElement('span'), {
					slot : 'empty-slot'
				});
				//emptySpan.style.opacity='0';
				//emptySpan.append(document.createTextNode('\u200B'));
				emptySpan.innerText = '\n'
				this.prepend(emptySpan);
				this.shadowRoot.append(slot);
				
			}
			*/

			return;
		}
		this.connectedAfterCallback();
	}
	disconnectedCallback(){
        this.#isLoaded = false;
		try{
			this.disconnectedAfterCallback();
		}catch(err){
			console.error(err)
		}finally{
			this.constructor.toolHandler.connectedFriends = this;
			this.#childListObserver.disconnect(this, {childList:true})
			document.removeEventListener('selectionchange', this.removeFun, true);
		}
	}

	isToolEmpty(){
		let sty = window.getComputedStyle(this);
		if(sty.visibility == 'hidden' || sty.opacity == 0){
			return false;
		}
        return this.innerText.length == 0 || (this.innerText.length == 1 && (this.innerText == '\n' || this.innerText == '\u200B'));
    }
	/**
	 * @param {Function}
	 */
	set connectedAfterCallback(connectedAfterCallback){
		this.#connectedAfterCallback = connectedAfterCallback;
	}

	/**
	 * @returns {Function}
	 */
	get connectedAfterCallback(){
		return this.#connectedAfterCallback;
	}

	/**
	 * @param {Function}
	 */
	set connectedAfterOnlyOneCallback(connectedAfterOnlyOneCallback){
		this.#connectedAfterOnlyOneCallback = connectedAfterOnlyOneCallback;
	}
	
	/**
	 * @returns {Function}
	 */
	get connectedAfterOnlyOneCallback(){
		return this.#connectedAfterOnlyOneCallback;
	}

	/**
	 * @param {Function}
	 */
	set disconnectedAfterCallback(disconnectedAfterCallback){
		this.#disconnectedAfterCallback = disconnectedAfterCallback;
	}

	/**
	 * @returns {Function}
	 */
	get disconnectedAfterCallback(){
		return this.#disconnectedAfterCallback;
	}
 
	/**
	 * @param {Function}
	 */
	set connectedChildAfterCallback(connectedChildAfterCallback){
		this.#connectedChildAfterCallback = connectedChildAfterCallback;
	}

	/**
	 * @returns {Function}
	 */
	get connectedChildAfterCallback(){
		return this.#connectedChildAfterCallback;
	}

	/**
	 * @param {Function}
	 */
	set disconnectedChildAfterCallback(disconnectedChildAfterCallback){
		this.#disconnectedChildAfterCallback = disconnectedChildAfterCallback;
	}

	/**
	 * @returns {Function}
	 */
	get disconnectedChildAfterCallback(){
		return this.#disconnectedChildAfterCallback;
	}
}

/***/ }),

/***/ "./view/js/handler/editor/module/ToolHandler.js":
/*!******************************************************!*\
  !*** ./view/js/handler/editor/module/ToolHandler.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ToolHandler)
/* harmony export */ });

class ToolHandler{

	static processingElementPosition(element, target){
		let {x, y, height} = target.getBoundingClientRect();
		
		let elementTop = (y - element.clientHeight)
		let elementLeft = (x - element.clientWidth)
		if(elementTop > 0){
			element.style.top = elementTop + 'px';
		}else{
			element.style.top = y + height + 'px';
		}

		if(elementLeft > 0){
			element.style.left = elementLeft + 'px'
		}else{
			element.style.left = x + width + 'px';
		}
		
	}

	#extendsElement;
	#defaultClass;
	#isInline = true;
	#toolButton;
	#identity;
	#connectedFriends = [];
	#buttonMap = {};
	/**
	 * 
	 * @param {FreedomInterface} identity
	 * @returns {FreedomInterface} 
	 */
	constructor(identity){
		this.#identity = identity;
		//다른 부분 선택시에 동작하지 않도록 수정 필요(에디터만 셀렉션체인지인 경우)
		document.addEventListener("selectionchange", (event) => {
			let selection = window.getSelection();
			if(! document.activeElement.classList.contains('free-will-editor')){
				return;
			}
			/**
			 * None 현재 선택된 항목이 없습니다.
			 * Caret 선택 항목이 축소됩니다(예: 캐럿이 일부 텍스트에 배치되지만 범위가 선택되지 않음).
			 * Range 범위가 선택되었습니다.
			 */
			if(selection.type == 'None' || ! this.#toolButton){
				return;
			}

			let findTarget = this.#connectedFriends.find(e=> selection.containsNode(e, true) || selection.containsNode(e, false))
			if(findTarget){
				this.#toolButton.dataset.tool_status = 'connected';
			}else {
				this.#toolButton.dataset.tool_status = 'blur';
			}
		});
	}

	processingElementPosition(element, target = this.#toolButton){
		ToolHandler.processingElementPosition(element, target);
	}

	isLastTool(tool){
		if(this.#identity.prototype.isPrototypeOf(tool)){
			return tool === this.#connectedFriends.at(-1);
		}else{
			throw new Error(`tool is not my identity, this tool name is ${tool.constructor.name}. but my identity name is ${this.#identity.name}`);
		}
		
	}

	/**
	 * @param {String}
	 */
	set extendsElement(extendsElement){
		this.#extendsElement = extendsElement;
	}
	
	get extendsElement(){
		return this.#extendsElement;
	}
	
	set defaultClass(defaultClass){
		this.#defaultClass = defaultClass;
	}

	get defaultClass(){
		return this.#defaultClass;
	}

	/**
	 * @param {boolean} isInline 
	 */
	set isInline(isInline){
		this.#isInline = isInline;
	}
	
	/**
	 * @returns {boolean}
	 */
	get isInline(){
		return this.#isInline
	}

	set toolButton(toolButton){
		if( ! toolButton || ! toolButton.nodeType || toolButton.nodeType != Node.ELEMENT_NODE){
			throw new Error('toolButton is not element');
		}
		this.#toolButton = toolButton;

	}
	
	get toolButton(){
		return this.#toolButton;
	}

	/**
	 * @param {FreedomInterface}
	 */
	set connectedFriends(friend){
		if(friend.constructor != this.#identity){
			new TypeError('is not my friend')
		}
		
		if(friend.isConnected){
			this.#connectedFriends.push(friend);
		}else{
			this.#connectedFriends = this.#connectedFriends.filter(e=>e.isConnected);
		}
	}

	get connectedFriends(){
		return this.#connectedFriends;
	}

}

/***/ }),

/***/ "./view/js/handler/editor/module/emoticon.js":
/*!***************************************************!*\
  !*** ./view/js/handler/editor/module/emoticon.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultEmoticon: () => (/* binding */ defaultEmoticon),
/* harmony export */   emoticon: () => (/* binding */ emoticon),
/* harmony export */   groupKind: () => (/* binding */ groupKind),
/* harmony export */   subgroupKind: () => (/* binding */ subgroupKind),
/* harmony export */   toneTypeMapper: () => (/* binding */ toneTypeMapper)
/* harmony export */ });
`1F471 1F3FB  ; fully-qualified     # 👱🏻 E1.0 person: light skin tone, blond hair`
/**
 * @see https://unicode.org/Public/emoticon/15.1/emoticon-test.txt
 */
/**
let test = '🚶🏼‍➡️'
test.codePointAt(0).toString(16)
test.codePointAt(2).toString(16)
test.codePointAt(6).toString(16)
test.split('')
test.split('').map(e=>e.charCodeAt(0))
test.split('').map(e=>e.charCodeAt(0).toString(16))
test2.map(e=>String.fromCharCode('0x'+e)).join('')
code값이 필요한지 재설계 필요
 */
var c = document.createElement("canvas")
var ctx = c.getContext("2d");
const em = 16;
c.width = em;
c.height = em;

/**
 * @see https://stackoverflow.com/a/67205013
 * @param {*} emoticon
 * @returns 
 */
function supportsEmoji(emoticon){
    ctx.clearRect(0, 0, em, em);
    ctx.fillText(emoticon, 0, em);
    let emo = c.toDataURL()
  
    ctx.clearRect(0, 0, em, em);
    ctx.fillText('\uFFFF', 0, em);
    let bad1 = c.toDataURL()
    ctx.clearRect(0, 0, em, em);
    ctx.fillText('\uFFFF\uFFFF', 0, em);
    let bad2 = c.toDataURL()
    ctx.clearRect(0, 0, em, em);
    ctx.fillText('\uFFFF\uFFFF\uFFFF', 0, em);
    let bad3 = c.toDataURL();
    ctx.clearRect(0, 0, em, em);
    ctx.fillText('\uFFFF\uFFFF\uFFFF\uFFFF', 0, em);
    let bad4 = c.toDataURL();
    
    return (emo != bad1) && (emo != bad2) && (emo != bad3) && (emo != bad4)
}

//let typeMapper = {};
//let groupKind = [];
//let subgroupKind = {};

let test = document.body.textContent.substring(document.body.textContent.indexOf('# group:')).split('# group:').filter(e=>e.trim() != '').reduce((groupTotal,groupText, i)=>{
    let subgroupList = groupText.split('# subgroup:');
    let groupTitle = subgroupList.shift().replaceAll('\n', '').trim();

    let subgroupObj = subgroupList.reduce((subgroupTotal, subgroupText, j) => {
        let subgroupItemList = subgroupText.split('\n').filter(e=>{
            let firstChar = e.trim().charAt(0); 
            return firstChar != '#' && firstChar != ''
        });
        let subgroupTitle = subgroupItemList.shift().replaceAll('\n', '').trim();
        subgroupItemList = subgroupItemList.map((str, k)=>{
            let splitCode = str.split(';')
            let code = splitCode[0].trim().split(' ')
            let qualifiedAndDescription = splitCode[1].split('#')
            let qualified = qualifiedAndDescription[0].trim();
            let descriptionList = qualifiedAndDescription[1].split(' ').filter(e=>e!='');
            let emoticon = descriptionList[0];
            
            if( qualified != 'fully-qualified' || ! supportsEmoji(emoticon) ){
                return undefined;
            }

            let version = descriptionList[1];
            let descriptionAndType = descriptionList.splice(2).join(' ').split(':');
            let description = descriptionAndType[0];
            let type = descriptionAndType[1]?.split(',').map(e=>e.trim()) || [];

            let toneType = type.filter(e=> e.includes('skin tone'))
            //type = type.filter(e=> ! e.includes('skin tone'));
            //type.forEach(e=>typeMapper[e]=undefined)

            //return {code, qualified, version, description, emoticon, toneType, groupTitle, subgroupTitle};
            //20231128 code, qualified, version 불필요해보여서 제거 할 예정이므로 미리 처리
            return {description, emoticon, toneType, groupTitle, subgroupTitle};
        }).filter((item) => item && item.emoticon)

        subgroupTotal[subgroupTitle] = subgroupItemList.sort((a,b)=> b.emoticon.codePointAt(0) - a.emoticon.codePointAt(0))
        /*if(subgroupKind[groupTitle]){
            subgroupKind[groupTitle].push(subgroupTitle)
        }else{
            subgroupKind[groupTitle] = [subgroupTitle];
        }*/
        return subgroupTotal;
    }, {});
    //groupKind.push(groupTitle);
    groupTotal[groupTitle] = subgroupObj; 
    
    return groupTotal;
}, {})

const toneTypeMapper = {
    "light skin tone": "light skin tone",
    "medium-light skin tone": "medium-light skin tone",
    "medium skin tone": "medium skin tone",
    "medium-dark skin tone": "medium-dark skin tone",
    "dark skin tone": "dark skin tone"
}

const groupKind = [
    "Smileys & Emotion",
    "People & Body",
    "Animals & Nature",
    "Food & Drink",
    "Travel & Places",
    "Activities",
    "Objects",
    "Symbols",
    "Flags"
]

const subgroupKind = {
    "Smileys & Emotion": [
        "face-smiling",
        "face-affection",
        "face-tongue",
        "face-hand",
        "face-neutral-skeptical",
        "face-sleepy",
        "face-unwell",
        "face-hat",
        "face-glasses",
        "face-concerned",
        "face-negative",
        "face-costume",
        "cat-face",
        "monkey-face",
        "heart",
        "emotion"
    ],
    "People & Body": [
        "hand-fingers-open",
        "hand-fingers-partial",
        "hand-single-finger",
        "hand-fingers-closed",
        "hands",
        "hand-prop",
        "body-parts",
        "person",
        "person-gesture",
        "person-role",
        "person-fantasy",
        "person-activity",
        "person-sport",
        "person-resting",
        "family",
        "person-symbol"
    ],
    "Animals & Nature": [
        "animal-mammal",
        "animal-bird",
        "animal-amphibian",
        "animal-reptile",
        "animal-marine",
        "animal-bug",
        "plant-flower",
        "plant-other"
    ],
    "Food & Drink": [
        "food-fruit",
        "food-vegetable",
        "food-prepared",
        "food-asian",
        "food-marine",
        "food-sweet",
        "drink",
        "dishware"
    ],
    "Travel & Places": [
        "place-map",
        "place-geographic",
        "place-building",
        "place-religious",
        "place-other",
        "transport-ground",
        "transport-water",
        "transport-air",
        "hotel",
        "time",
        "sky & weather"
    ],
    "Activities": [
        "event",
        "award-medal",
        "sport",
        "game",
        "arts & crafts"
    ],
    "Objects": [
        "clothing",
        "sound",
        "music",
        "musical-instrument",
        "phone",
        "computer",
        "light & video",
        "book-paper",
        "money",
        "mail",
        "writing",
        "office",
        "lock",
        "tool",
        "science",
        "medical",
        "household",
        "other-object"
    ],
    "Symbols": [
        "transport-sign",
        "warning",
        "arrow",
        "religion",
        "zodiac",
        "av-symbol",
        "gender",
        "math",
        "punctuation",
        "currency",
        "other-symbol",
        "keycap",
        "alphanum",
        "geometric"
    ],
    "Flags": [
        "flag",
        "country-flag",
        "subdivision-flag"
    ]
}

const defaultEmoticon = [
    {
        "description": "thumbs up",
        "emoticon": "👍",
        "toneType": [],
        "groupTitle": "Smileys & Emotion",
        "subgroupTitle": "hand-fingers-closed"
    },
    {
        "description": "red heart",
        "emoticon": "❤️",
        "toneType": [],
        "groupTitle": "Smileys & Emotion",
        "subgroupTitle": "heart"
    },
    {
        "description": "smiling face with hearts",
        "emoticon": "🥰",
        "toneType": [],
        "groupTitle": "Smileys & Emotion",
        "subgroupTitle": "face-affection"
    },
    {
        "description": "grinning squinting face",
        "emoticon": "😆",
        "toneType": [],
        "groupTitle": "Smileys & Emotion",
        "subgroupTitle": "face-smiling"
    },
    {
        "description": "astonished face",
        "emoticon": "😲",
        "toneType": [],
        "groupTitle": "Smileys & Emotion",
        "subgroupTitle": "face-concerned"
    },
]

const emoticon = {
    "Smileys & Emotion": {
        "face-smiling": [
            {
                "description": "rolling on the floor laughing",
                "emoticon": "🤣",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "upside-down face",
                "emoticon": "🙃",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "slightly smiling face",
                "emoticon": "🙂",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "smiling face with smiling eyes",
                "emoticon": "😊",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "winking face",
                "emoticon": "😉",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "smiling face with halo",
                "emoticon": "😇",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "grinning squinting face",
                "emoticon": "😆",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "grinning face with sweat",
                "emoticon": "😅",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "grinning face with smiling eyes",
                "emoticon": "😄",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "grinning face with big eyes",
                "emoticon": "😃",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "face with tears of joy",
                "emoticon": "😂",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "beaming face with smiling eyes",
                "emoticon": "😁",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            },
            {
                "description": "grinning face",
                "emoticon": "😀",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-smiling"
            }
        ],
        "face-affection": [
            {
                "description": "smiling face with hearts",
                "emoticon": "🥰",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "star-struck",
                "emoticon": "🤩",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "kissing face with closed eyes",
                "emoticon": "😚",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "kissing face with smiling eyes",
                "emoticon": "😙",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "face blowing a kiss",
                "emoticon": "😘",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "kissing face",
                "emoticon": "😗",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "smiling face with heart-eyes",
                "emoticon": "😍",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            },
            {
                "description": "smiling face",
                "emoticon": "☺️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-affection"
            }
        ],
        "face-tongue": [
            {
                "description": "zany face",
                "emoticon": "🤪",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            },
            {
                "description": "money-mouth face",
                "emoticon": "🤑",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            },
            {
                "description": "squinting face with tongue",
                "emoticon": "😝",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            },
            {
                "description": "winking face with tongue",
                "emoticon": "😜",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            },
            {
                "description": "face with tongue",
                "emoticon": "😛",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            },
            {
                "description": "face savoring food",
                "emoticon": "😋",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-tongue"
            }
        ],
        "face-hand": [
            {
                "description": "face with hand over mouth",
                "emoticon": "🤭",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hand"
            },
            {
                "description": "shushing face",
                "emoticon": "🤫",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hand"
            },
            {
                "description": "smiling face with open hands",
                "emoticon": "🤗",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hand"
            },
            {
                "description": "thinking face",
                "emoticon": "🤔",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hand"
            }
        ],
        "face-neutral-skeptical": [
            {
                "description": "face with raised eyebrow",
                "emoticon": "🤨",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "lying face",
                "emoticon": "🤥",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "zipper-mouth face",
                "emoticon": "🤐",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "face with rolling eyes",
                "emoticon": "🙄",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "head shaking horizontally",
                "emoticon": "🙂‍↔️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "head shaking vertically",
                "emoticon": "🙂‍↕️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "face without mouth",
                "emoticon": "😶",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "face in clouds",
                "emoticon": "😶‍🌫️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "face exhaling",
                "emoticon": "😮‍💨",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "grimacing face",
                "emoticon": "😬",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "unamused face",
                "emoticon": "😒",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "expressionless face",
                "emoticon": "😑",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "neutral face",
                "emoticon": "😐",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            },
            {
                "description": "smirking face",
                "emoticon": "😏",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-neutral-skeptical"
            }
        ],
        "face-sleepy": [
            {
                "description": "drooling face",
                "emoticon": "🤤",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-sleepy"
            },
            {
                "description": "sleeping face",
                "emoticon": "😴",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-sleepy"
            },
            {
                "description": "sleepy face",
                "emoticon": "😪",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-sleepy"
            },
            {
                "description": "pensive face",
                "emoticon": "😔",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-sleepy"
            },
            {
                "description": "relieved face",
                "emoticon": "😌",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-sleepy"
            }
        ],
        "face-unwell": [
            {
                "description": "cold face",
                "emoticon": "🥶",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "hot face",
                "emoticon": "🥵",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "woozy face",
                "emoticon": "🥴",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "exploding head",
                "emoticon": "🤯",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face vomiting",
                "emoticon": "🤮",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "sneezing face",
                "emoticon": "🤧",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "nauseated face",
                "emoticon": "🤢",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face with head-bandage",
                "emoticon": "🤕",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face with thermometer",
                "emoticon": "🤒",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face with medical mask",
                "emoticon": "😷",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face with crossed-out eyes",
                "emoticon": "😵",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            },
            {
                "description": "face with spiral eyes",
                "emoticon": "😵‍💫",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-unwell"
            }
        ],
        "face-hat": [
            {
                "description": "partying face",
                "emoticon": "🥳",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hat"
            },
            {
                "description": "cowboy hat face",
                "emoticon": "🤠",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-hat"
            }
        ],
        "face-glasses": [
            {
                "description": "face with monocle",
                "emoticon": "🧐",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-glasses"
            },
            {
                "description": "nerd face",
                "emoticon": "🤓",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-glasses"
            },
            {
                "description": "smiling face with sunglasses",
                "emoticon": "😎",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-glasses"
            }
        ],
        "face-concerned": [
            {
                "description": "pleading face",
                "emoticon": "🥺",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "yawning face",
                "emoticon": "🥱",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "slightly frowning face",
                "emoticon": "🙁",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "flushed face",
                "emoticon": "😳",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "astonished face",
                "emoticon": "😲",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "face screaming in fear",
                "emoticon": "😱",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "anxious face with sweat",
                "emoticon": "😰",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "hushed face",
                "emoticon": "😯",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "face with open mouth",
                "emoticon": "😮",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "loudly crying face",
                "emoticon": "😭",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "tired face",
                "emoticon": "😫",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "weary face",
                "emoticon": "😩",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "fearful face",
                "emoticon": "😨",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "anguished face",
                "emoticon": "😧",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "frowning face with open mouth",
                "emoticon": "😦",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "sad but relieved face",
                "emoticon": "😥",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "persevering face",
                "emoticon": "😣",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "crying face",
                "emoticon": "😢",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "worried face",
                "emoticon": "😟",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "disappointed face",
                "emoticon": "😞",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "confounded face",
                "emoticon": "😖",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "confused face",
                "emoticon": "😕",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "downcast face with sweat",
                "emoticon": "😓",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            },
            {
                "description": "frowning face",
                "emoticon": "☹️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-concerned"
            }
        ],
        "face-negative": [
            {
                "description": "face with symbols on mouth",
                "emoticon": "🤬",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "face with steam from nose",
                "emoticon": "😤",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "enraged face",
                "emoticon": "😡",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "angry face",
                "emoticon": "😠",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "smiling face with horns",
                "emoticon": "😈",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "skull",
                "emoticon": "💀",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "angry face with horns",
                "emoticon": "👿",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            },
            {
                "description": "skull and crossbones",
                "emoticon": "☠️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-negative"
            }
        ],
        "face-costume": [
            {
                "description": "clown face",
                "emoticon": "🤡",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "robot",
                "emoticon": "🤖",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "pile of poo",
                "emoticon": "💩",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "alien monster",
                "emoticon": "👾",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "alien",
                "emoticon": "👽",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "ghost",
                "emoticon": "👻",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "goblin",
                "emoticon": "👺",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            },
            {
                "description": "ogre",
                "emoticon": "👹",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "face-costume"
            }
        ],
        "cat-face": [
            {
                "description": "weary cat",
                "emoticon": "🙀",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "crying cat",
                "emoticon": "😿",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "pouting cat",
                "emoticon": "😾",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "kissing cat",
                "emoticon": "😽",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "cat with wry smile",
                "emoticon": "😼",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "smiling cat with heart-eyes",
                "emoticon": "😻",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "grinning cat",
                "emoticon": "😺",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "cat with tears of joy",
                "emoticon": "😹",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            },
            {
                "description": "grinning cat with smiling eyes",
                "emoticon": "😸",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "cat-face"
            }
        ],
        "monkey-face": [
            {
                "description": "speak-no-evil monkey",
                "emoticon": "🙊",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "monkey-face"
            },
            {
                "description": "hear-no-evil monkey",
                "emoticon": "🙉",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "monkey-face"
            },
            {
                "description": "see-no-evil monkey",
                "emoticon": "🙈",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "monkey-face"
            }
        ],
        "heart": [
            {
                "description": "orange heart",
                "emoticon": "🧡",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "brown heart",
                "emoticon": "🤎",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "white heart",
                "emoticon": "🤍",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "black heart",
                "emoticon": "🖤",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "heart decoration",
                "emoticon": "💟",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "revolving hearts",
                "emoticon": "💞",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "heart with ribbon",
                "emoticon": "💝",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "purple heart",
                "emoticon": "💜",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "yellow heart",
                "emoticon": "💛",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "green heart",
                "emoticon": "💚",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "blue heart",
                "emoticon": "💙",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "heart with arrow",
                "emoticon": "💘",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "growing heart",
                "emoticon": "💗",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "sparkling heart",
                "emoticon": "💖",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "two hearts",
                "emoticon": "💕",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "broken heart",
                "emoticon": "💔",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "beating heart",
                "emoticon": "💓",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "love letter",
                "emoticon": "💌",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "heart on fire",
                "emoticon": "❤️‍🔥",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "mending heart",
                "emoticon": "❤️‍🩹",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "red heart",
                "emoticon": "❤️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            },
            {
                "description": "heart exclamation",
                "emoticon": "❣️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "heart"
            }
        ],
        "emotion": [
            {
                "description": "right anger bubble",
                "emoticon": "🗯️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "left speech bubble",
                "emoticon": "🗨️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "hole",
                "emoticon": "🕳️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "hundred points",
                "emoticon": "💯",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "thought balloon",
                "emoticon": "💭",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "speech balloon",
                "emoticon": "💬",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "dizzy",
                "emoticon": "💫",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "dashing away",
                "emoticon": "💨",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "sweat droplets",
                "emoticon": "💦",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "collision",
                "emoticon": "💥",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "ZZZ",
                "emoticon": "💤",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "anger symbol",
                "emoticon": "💢",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "kiss mark",
                "emoticon": "💋",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            },
            {
                "description": "eye in speech bubble",
                "emoticon": "👁️‍🗨️",
                "toneType": [],
                "groupTitle": "Smileys & Emotion",
                "subgroupTitle": "emotion"
            }
        ]
    },
    "People & Body": {
        "hand-fingers-open": [
            {
                "description": "raised back of hand",
                "emoticon": "🤚",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised back of hand",
                "emoticon": "🤚🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised back of hand",
                "emoticon": "🤚🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised back of hand",
                "emoticon": "🤚🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised back of hand",
                "emoticon": "🤚🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised back of hand",
                "emoticon": "🤚🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "vulcan salute",
                "emoticon": "🖖🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "hand with fingers splayed",
                "emoticon": "🖐🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "waving hand",
                "emoticon": "👋🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            },
            {
                "description": "raised hand",
                "emoticon": "✋🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-open"
            }
        ],
        "hand-fingers-partial": [
            {
                "description": "love-you gesture",
                "emoticon": "🤟",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "love-you gesture",
                "emoticon": "🤟🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "love-you gesture",
                "emoticon": "🤟🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "love-you gesture",
                "emoticon": "🤟🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "love-you gesture",
                "emoticon": "🤟🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "love-you gesture",
                "emoticon": "🤟🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "crossed fingers",
                "emoticon": "🤞🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "call me hand",
                "emoticon": "🤙🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "sign of the horns",
                "emoticon": "🤘🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "pinching hand",
                "emoticon": "🤏🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "OK hand",
                "emoticon": "👌🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            },
            {
                "description": "victory hand",
                "emoticon": "✌🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-partial"
            }
        ],
        "hand-single-finger": [
            {
                "description": "middle finger",
                "emoticon": "🖕",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "middle finger",
                "emoticon": "🖕🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "middle finger",
                "emoticon": "🖕🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "middle finger",
                "emoticon": "🖕🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "middle finger",
                "emoticon": "🖕🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "middle finger",
                "emoticon": "🖕🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing right",
                "emoticon": "👉🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing left",
                "emoticon": "👈🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing down",
                "emoticon": "👇🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "backhand index pointing up",
                "emoticon": "👆🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            },
            {
                "description": "index pointing up",
                "emoticon": "☝🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-single-finger"
            }
        ],
        "hand-fingers-closed": [
            {
                "description": "right-facing fist",
                "emoticon": "🤜",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "right-facing fist",
                "emoticon": "🤜🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "right-facing fist",
                "emoticon": "🤜🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "right-facing fist",
                "emoticon": "🤜🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "right-facing fist",
                "emoticon": "🤜🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "right-facing fist",
                "emoticon": "🤜🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "left-facing fist",
                "emoticon": "🤛🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs down",
                "emoticon": "👎🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "thumbs up",
                "emoticon": "👍🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "oncoming fist",
                "emoticon": "👊🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            },
            {
                "description": "raised fist",
                "emoticon": "✊🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-fingers-closed"
            }
        ],
        "hands": [
            {
                "description": "palms up together",
                "emoticon": "🤲",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "palms up together",
                "emoticon": "🤲🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "palms up together",
                "emoticon": "🤲🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "palms up together",
                "emoticon": "🤲🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "palms up together",
                "emoticon": "🤲🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "palms up together",
                "emoticon": "🤲🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "handshake",
                "emoticon": "🤝🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "folded hands",
                "emoticon": "🙏🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "raising hands",
                "emoticon": "🙌🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "open hands",
                "emoticon": "👐🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            },
            {
                "description": "clapping hands",
                "emoticon": "👏🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hands"
            }
        ],
        "hand-prop": [
            {
                "description": "selfie",
                "emoticon": "🤳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "selfie",
                "emoticon": "🤳🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "selfie",
                "emoticon": "🤳🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "selfie",
                "emoticon": "🤳🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "selfie",
                "emoticon": "🤳🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "selfie",
                "emoticon": "🤳🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "nail polish",
                "emoticon": "💅🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            },
            {
                "description": "writing hand",
                "emoticon": "✍🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "hand-prop"
            }
        ],
        "body-parts": [
            {
                "description": "brain",
                "emoticon": "🧠",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "mechanical leg",
                "emoticon": "🦿",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "mechanical arm",
                "emoticon": "🦾",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear with hearing aid",
                "emoticon": "🦻🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "tooth",
                "emoticon": "🦷",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "foot",
                "emoticon": "🦶🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "leg",
                "emoticon": "🦵🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "bone",
                "emoticon": "🦴",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "flexed biceps",
                "emoticon": "💪🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "tongue",
                "emoticon": "👅",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "mouth",
                "emoticon": "👄",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "nose",
                "emoticon": "👃🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "ear",
                "emoticon": "👂🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "eye",
                "emoticon": "👁️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            },
            {
                "description": "eyes",
                "emoticon": "👀",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "body-parts"
            }
        ],
        "person": [
            {
                "description": "person",
                "emoticon": "🧔",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧔🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧔🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧔🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧔🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧔🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "🧔🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "🧔🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "older person",
                "emoticon": "🧓🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "child",
                "emoticon": "🧒🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑‍🦰",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏻‍🦰",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏼‍🦰",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏽‍🦰",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏾‍🦰",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏿‍🦰",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑‍🦱",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏻‍🦱",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏼‍🦱",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏽‍🦱",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏾‍🦱",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏿‍🦱",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑‍🦳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏻‍🦳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏼‍🦳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏽‍🦳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏾‍🦳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏿‍🦳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑‍🦲",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏻‍🦲",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏼‍🦲",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏽‍🦲",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏾‍🦲",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "🧑🏿‍🦲",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "baby",
                "emoticon": "👶🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old woman",
                "emoticon": "👵🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "old man",
                "emoticon": "👴🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "person",
                "emoticon": "👱🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👱🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👱🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩‍🦰",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏻‍🦰",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏼‍🦰",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏽‍🦰",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏾‍🦰",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏿‍🦰",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩‍🦱",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏻‍🦱",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏼‍🦱",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏽‍🦱",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏾‍🦱",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏿‍🦱",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩‍🦳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏻‍🦳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏼‍🦳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏽‍🦳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏾‍🦳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏿‍🦳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩‍🦲",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏻‍🦲",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏼‍🦲",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏽‍🦲",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏾‍🦲",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "woman",
                "emoticon": "👩🏿‍🦲",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨‍🦰",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏻‍🦰",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏼‍🦰",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏽‍🦰",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏾‍🦰",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏿‍🦰",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨‍🦱",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏻‍🦱",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏼‍🦱",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏽‍🦱",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏾‍🦱",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏿‍🦱",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨‍🦳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏻‍🦳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏼‍🦳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏽‍🦳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏾‍🦳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏿‍🦳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨‍🦲",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏻‍🦲",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏼‍🦲",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏽‍🦲",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏾‍🦲",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "man",
                "emoticon": "👨🏿‍🦲",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "girl",
                "emoticon": "👧🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            },
            {
                "description": "boy",
                "emoticon": "👦🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person"
            }
        ],
        "person-gesture": [
            {
                "description": "deaf person",
                "emoticon": "🧏",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf person",
                "emoticon": "🧏🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf person",
                "emoticon": "🧏🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf person",
                "emoticon": "🧏🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf person",
                "emoticon": "🧏🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf person",
                "emoticon": "🧏🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf man",
                "emoticon": "🧏🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "deaf woman",
                "emoticon": "🧏🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person shrugging",
                "emoticon": "🤷🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man shrugging",
                "emoticon": "🤷🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman shrugging",
                "emoticon": "🤷🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person facepalming",
                "emoticon": "🤦🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man facepalming",
                "emoticon": "🤦🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman facepalming",
                "emoticon": "🤦🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person pouting",
                "emoticon": "🙎🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man pouting",
                "emoticon": "🙎🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman pouting",
                "emoticon": "🙎🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person frowning",
                "emoticon": "🙍🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man frowning",
                "emoticon": "🙍🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman frowning",
                "emoticon": "🙍🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person raising hand",
                "emoticon": "🙋🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man raising hand",
                "emoticon": "🙋🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman raising hand",
                "emoticon": "🙋🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person bowing",
                "emoticon": "🙇🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man bowing",
                "emoticon": "🙇🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman bowing",
                "emoticon": "🙇🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing OK",
                "emoticon": "🙆🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing OK",
                "emoticon": "🙆🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing OK",
                "emoticon": "🙆🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person gesturing NO",
                "emoticon": "🙅🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man gesturing NO",
                "emoticon": "🙅🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman gesturing NO",
                "emoticon": "🙅🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "person tipping hand",
                "emoticon": "💁🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "man tipping hand",
                "emoticon": "💁🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            },
            {
                "description": "woman tipping hand",
                "emoticon": "💁🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-gesture"
            }
        ],
        "person-role": [
            {
                "description": "woman with headscarf",
                "emoticon": "🧕",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with headscarf",
                "emoticon": "🧕🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with headscarf",
                "emoticon": "🧕🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with headscarf",
                "emoticon": "🧕🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with headscarf",
                "emoticon": "🧕🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with headscarf",
                "emoticon": "🧕🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑‍⚕️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑🏻‍⚕️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑🏼‍⚕️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑🏽‍⚕️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑🏾‍⚕️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "health worker",
                "emoticon": "🧑🏿‍⚕️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑‍🎓",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑🏻‍🎓",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑🏼‍🎓",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑🏽‍🎓",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑🏾‍🎓",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "student",
                "emoticon": "🧑🏿‍🎓",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑‍🏫",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑🏻‍🏫",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑🏼‍🏫",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑🏽‍🏫",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑🏾‍🏫",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "teacher",
                "emoticon": "🧑🏿‍🏫",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑‍⚖️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑🏻‍⚖️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑🏼‍⚖️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑🏽‍⚖️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑🏾‍⚖️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "judge",
                "emoticon": "🧑🏿‍⚖️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑‍🌾",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑🏻‍🌾",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑🏼‍🌾",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑🏽‍🌾",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑🏾‍🌾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "farmer",
                "emoticon": "🧑🏿‍🌾",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑‍🍳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑🏻‍🍳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑🏼‍🍳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑🏽‍🍳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑🏾‍🍳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "cook",
                "emoticon": "🧑🏿‍🍳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑‍🔧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑🏻‍🔧",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑🏼‍🔧",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑🏽‍🔧",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑🏾‍🔧",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "mechanic",
                "emoticon": "🧑🏿‍🔧",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑‍🏭",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑🏻‍🏭",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑🏼‍🏭",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑🏽‍🏭",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑🏾‍🏭",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "factory worker",
                "emoticon": "🧑🏿‍🏭",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑‍💼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑🏻‍💼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑🏼‍💼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑🏽‍💼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑🏾‍💼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "office worker",
                "emoticon": "🧑🏿‍💼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑‍🔬",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑🏻‍🔬",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑🏼‍🔬",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑🏽‍🔬",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑🏾‍🔬",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "scientist",
                "emoticon": "🧑🏿‍🔬",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑‍💻",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑🏻‍💻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑🏼‍💻",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑🏽‍💻",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑🏾‍💻",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "technologist",
                "emoticon": "🧑🏿‍💻",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑‍🎤",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑🏻‍🎤",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑🏼‍🎤",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑🏽‍🎤",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑🏾‍🎤",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "singer",
                "emoticon": "🧑🏿‍🎤",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑‍🎨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑🏻‍🎨",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑🏼‍🎨",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑🏽‍🎨",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑🏾‍🎨",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "artist",
                "emoticon": "🧑🏿‍🎨",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑‍✈️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑🏻‍✈️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑🏼‍✈️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑🏽‍✈️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑🏾‍✈️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pilot",
                "emoticon": "🧑🏿‍✈️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑‍🚀",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑🏻‍🚀",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑🏼‍🚀",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑🏽‍🚀",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑🏾‍🚀",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "astronaut",
                "emoticon": "🧑🏿‍🚀",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑‍🚒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑🏻‍🚒",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑🏼‍🚒",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑🏽‍🚒",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑🏾‍🚒",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "firefighter",
                "emoticon": "🧑🏿‍🚒",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑‍🍼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑🏻‍🍼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑🏼‍🍼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑🏽‍🍼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑🏾‍🍼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person feeding baby",
                "emoticon": "🧑🏿‍🍼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person in tuxedo",
                "emoticon": "🤵🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man in tuxedo",
                "emoticon": "🤵🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman in tuxedo",
                "emoticon": "🤵🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "prince",
                "emoticon": "🤴🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "breast-feeding",
                "emoticon": "🤱🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "pregnant woman",
                "emoticon": "🤰🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "detective",
                "emoticon": "🕵🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵️‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man detective",
                "emoticon": "🕵🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵️‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman detective",
                "emoticon": "🕵🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "guard",
                "emoticon": "💂🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man guard",
                "emoticon": "💂🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman guard",
                "emoticon": "💂🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "princess",
                "emoticon": "👸🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "construction worker",
                "emoticon": "👷🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man construction worker",
                "emoticon": "👷🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman construction worker",
                "emoticon": "👷🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person wearing turban",
                "emoticon": "👳🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man wearing turban",
                "emoticon": "👳🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman wearing turban",
                "emoticon": "👳🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with skullcap",
                "emoticon": "👲🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "person with veil",
                "emoticon": "👰🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man with veil",
                "emoticon": "👰🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman with veil",
                "emoticon": "👰🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "police officer",
                "emoticon": "👮🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man police officer",
                "emoticon": "👮🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman police officer",
                "emoticon": "👮🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩‍⚕️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩🏻‍⚕️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩🏼‍⚕️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩🏽‍⚕️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩🏾‍⚕️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman health worker",
                "emoticon": "👩🏿‍⚕️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩‍🎓",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩🏻‍🎓",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩🏼‍🎓",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩🏽‍🎓",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩🏾‍🎓",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman student",
                "emoticon": "👩🏿‍🎓",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩‍🏫",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩🏻‍🏫",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩🏼‍🏫",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩🏽‍🏫",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩🏾‍🏫",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman teacher",
                "emoticon": "👩🏿‍🏫",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩‍⚖️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩🏻‍⚖️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩🏼‍⚖️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩🏽‍⚖️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩🏾‍⚖️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman judge",
                "emoticon": "👩🏿‍⚖️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩‍🌾",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩🏻‍🌾",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩🏼‍🌾",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩🏽‍🌾",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩🏾‍🌾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman farmer",
                "emoticon": "👩🏿‍🌾",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩‍🍳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩🏻‍🍳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩🏼‍🍳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩🏽‍🍳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩🏾‍🍳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman cook",
                "emoticon": "👩🏿‍🍳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩‍🔧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩🏻‍🔧",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩🏼‍🔧",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩🏽‍🔧",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩🏾‍🔧",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman mechanic",
                "emoticon": "👩🏿‍🔧",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩‍🏭",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩🏻‍🏭",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩🏼‍🏭",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩🏽‍🏭",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩🏾‍🏭",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman factory worker",
                "emoticon": "👩🏿‍🏭",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩‍💼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩🏻‍💼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩🏼‍💼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩🏽‍💼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩🏾‍💼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman office worker",
                "emoticon": "👩🏿‍💼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩‍🔬",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩🏻‍🔬",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩🏼‍🔬",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩🏽‍🔬",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩🏾‍🔬",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman scientist",
                "emoticon": "👩🏿‍🔬",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩‍💻",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩🏻‍💻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩🏼‍💻",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩🏽‍💻",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩🏾‍💻",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman technologist",
                "emoticon": "👩🏿‍💻",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩‍🎤",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩🏻‍🎤",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩🏼‍🎤",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩🏽‍🎤",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩🏾‍🎤",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman singer",
                "emoticon": "👩🏿‍🎤",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩‍🎨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩🏻‍🎨",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩🏼‍🎨",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩🏽‍🎨",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩🏾‍🎨",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman artist",
                "emoticon": "👩🏿‍🎨",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩‍✈️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩🏻‍✈️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩🏼‍✈️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩🏽‍✈️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩🏾‍✈️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman pilot",
                "emoticon": "👩🏿‍✈️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩‍🚀",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩🏻‍🚀",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩🏼‍🚀",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩🏽‍🚀",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩🏾‍🚀",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman astronaut",
                "emoticon": "👩🏿‍🚀",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩‍🚒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩🏻‍🚒",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩🏼‍🚒",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩🏽‍🚒",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩🏾‍🚒",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman firefighter",
                "emoticon": "👩🏿‍🚒",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩‍🍼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩🏻‍🍼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩🏼‍🍼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩🏽‍🍼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩🏾‍🍼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "woman feeding baby",
                "emoticon": "👩🏿‍🍼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨‍⚕️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨🏻‍⚕️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨🏼‍⚕️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨🏽‍⚕️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨🏾‍⚕️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man health worker",
                "emoticon": "👨🏿‍⚕️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨‍🎓",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨🏻‍🎓",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨🏼‍🎓",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨🏽‍🎓",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨🏾‍🎓",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man student",
                "emoticon": "👨🏿‍🎓",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨‍🏫",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨🏻‍🏫",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨🏼‍🏫",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨🏽‍🏫",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨🏾‍🏫",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man teacher",
                "emoticon": "👨🏿‍🏫",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨‍⚖️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨🏻‍⚖️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨🏼‍⚖️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨🏽‍⚖️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨🏾‍⚖️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man judge",
                "emoticon": "👨🏿‍⚖️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨‍🌾",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨🏻‍🌾",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨🏼‍🌾",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨🏽‍🌾",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨🏾‍🌾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man farmer",
                "emoticon": "👨🏿‍🌾",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨‍🍳",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨🏻‍🍳",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨🏼‍🍳",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨🏽‍🍳",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨🏾‍🍳",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man cook",
                "emoticon": "👨🏿‍🍳",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨‍🔧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨🏻‍🔧",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨🏼‍🔧",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨🏽‍🔧",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨🏾‍🔧",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man mechanic",
                "emoticon": "👨🏿‍🔧",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨‍🏭",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨🏻‍🏭",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨🏼‍🏭",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨🏽‍🏭",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨🏾‍🏭",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man factory worker",
                "emoticon": "👨🏿‍🏭",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨‍💼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨🏻‍💼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨🏼‍💼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨🏽‍💼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨🏾‍💼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man office worker",
                "emoticon": "👨🏿‍💼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨‍🔬",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨🏻‍🔬",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨🏼‍🔬",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨🏽‍🔬",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨🏾‍🔬",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man scientist",
                "emoticon": "👨🏿‍🔬",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨‍💻",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨🏻‍💻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨🏼‍💻",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨🏽‍💻",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨🏾‍💻",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man technologist",
                "emoticon": "👨🏿‍💻",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨‍🎤",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨🏻‍🎤",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨🏼‍🎤",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨🏽‍🎤",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨🏾‍🎤",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man singer",
                "emoticon": "👨🏿‍🎤",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨‍🎨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨🏻‍🎨",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨🏼‍🎨",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨🏽‍🎨",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨🏾‍🎨",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man artist",
                "emoticon": "👨🏿‍🎨",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨‍✈️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨🏻‍✈️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨🏼‍✈️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨🏽‍✈️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨🏾‍✈️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man pilot",
                "emoticon": "👨🏿‍✈️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨‍🚀",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨🏻‍🚀",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨🏼‍🚀",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨🏽‍🚀",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨🏾‍🚀",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man astronaut",
                "emoticon": "👨🏿‍🚀",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨‍🚒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨🏻‍🚒",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨🏼‍🚒",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨🏽‍🚒",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨🏾‍🚒",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man firefighter",
                "emoticon": "👨🏿‍🚒",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨‍🍼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨🏻‍🍼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨🏼‍🍼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨🏽‍🍼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨🏾‍🍼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            },
            {
                "description": "man feeding baby",
                "emoticon": "👨🏿‍🍼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-role"
            }
        ],
        "person-fantasy": [
            {
                "description": "zombie",
                "emoticon": "🧟",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man zombie",
                "emoticon": "🧟‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman zombie",
                "emoticon": "🧟‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "genie",
                "emoticon": "🧞",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man genie",
                "emoticon": "🧞‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman genie",
                "emoticon": "🧞‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "elf",
                "emoticon": "🧝🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man elf",
                "emoticon": "🧝🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman elf",
                "emoticon": "🧝🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merperson",
                "emoticon": "🧜🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "merman",
                "emoticon": "🧜🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mermaid",
                "emoticon": "🧜🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "vampire",
                "emoticon": "🧛🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man vampire",
                "emoticon": "🧛🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman vampire",
                "emoticon": "🧛🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "fairy",
                "emoticon": "🧚🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man fairy",
                "emoticon": "🧚🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman fairy",
                "emoticon": "🧚🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mage",
                "emoticon": "🧙🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man mage",
                "emoticon": "🧙🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman mage",
                "emoticon": "🧙🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑‍🎄",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑🏻‍🎄",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑🏼‍🎄",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑🏽‍🎄",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑🏾‍🎄",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "mx claus",
                "emoticon": "🧑🏿‍🎄",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "supervillain",
                "emoticon": "🦹🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man supervillain",
                "emoticon": "🦹🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman supervillain",
                "emoticon": "🦹🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "superhero",
                "emoticon": "🦸🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "man superhero",
                "emoticon": "🦸🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "woman superhero",
                "emoticon": "🦸🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Mrs. Claus",
                "emoticon": "🤶🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "baby angel",
                "emoticon": "👼🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            },
            {
                "description": "Santa Claus",
                "emoticon": "🎅🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-fantasy"
            }
        ],
        "person-activity": [
            {
                "description": "person climbing",
                "emoticon": "🧗",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person climbing",
                "emoticon": "🧗🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person climbing",
                "emoticon": "🧗🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person climbing",
                "emoticon": "🧗🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person climbing",
                "emoticon": "🧗🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person climbing",
                "emoticon": "🧗🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man climbing",
                "emoticon": "🧗🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman climbing",
                "emoticon": "🧗🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in steamy room",
                "emoticon": "🧖🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in steamy room",
                "emoticon": "🧖🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in steamy room",
                "emoticon": "🧖🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑‍🦯",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑🏻‍🦯",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑🏼‍🦯",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑🏽‍🦯",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑🏾‍🦯",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane",
                "emoticon": "🧑🏿‍🦯",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑‍🦯‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑🏻‍🦯‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑🏼‍🦯‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑🏽‍🦯‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑🏾‍🦯‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person with white cane facing right",
                "emoticon": "🧑🏿‍🦯‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑‍🦼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑🏻‍🦼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑🏼‍🦼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑🏽‍🦼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑🏾‍🦼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair",
                "emoticon": "🧑🏿‍🦼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑‍🦼‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑🏻‍🦼‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑🏼‍🦼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑🏽‍🦼‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑🏾‍🦼‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in motorized wheelchair facing right",
                "emoticon": "🧑🏿‍🦼‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑‍🦽",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑🏻‍🦽",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑🏼‍🦽",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑🏽‍🦽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑🏾‍🦽",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair",
                "emoticon": "🧑🏿‍🦽",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑‍🦽‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑🏻‍🦽‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑🏼‍🦽‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑🏽‍🦽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑🏾‍🦽‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in manual wheelchair facing right",
                "emoticon": "🧑🏿‍🦽‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling",
                "emoticon": "🧎🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling",
                "emoticon": "🧎🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling",
                "emoticon": "🧎🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎🏻‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎🏼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎🏽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎🏾‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person kneeling facing right",
                "emoticon": "🧎🏿‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎‍♀️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎🏻‍♀️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎🏼‍♀️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎🏽‍♀️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎🏾‍♀️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman kneeling facing right",
                "emoticon": "🧎🏿‍♀️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎‍♂️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎🏻‍♂️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎🏼‍♂️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎🏽‍♂️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎🏾‍♂️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man kneeling facing right",
                "emoticon": "🧎🏿‍♂️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person standing",
                "emoticon": "🧍🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man standing",
                "emoticon": "🧍🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman standing",
                "emoticon": "🧍🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking",
                "emoticon": "🚶🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking",
                "emoticon": "🚶🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking",
                "emoticon": "🚶🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶🏻‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶🏼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶🏽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶🏾‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person walking facing right",
                "emoticon": "🚶🏿‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶‍♀️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶🏻‍♀️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶🏼‍♀️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶🏽‍♀️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶🏾‍♀️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman walking facing right",
                "emoticon": "🚶🏿‍♀️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶‍♂️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶🏻‍♂️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶🏼‍♂️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶🏽‍♂️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶🏾‍♂️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man walking facing right",
                "emoticon": "🚶🏿‍♂️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man dancing",
                "emoticon": "🕺🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person in suit levitating",
                "emoticon": "🕴🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting haircut",
                "emoticon": "💇🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting haircut",
                "emoticon": "💇🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting haircut",
                "emoticon": "💇🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person getting massage",
                "emoticon": "💆🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man getting massage",
                "emoticon": "💆🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman getting massage",
                "emoticon": "💆🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman dancing",
                "emoticon": "💃🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "people with bunny ears",
                "emoticon": "👯",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "men with bunny ears",
                "emoticon": "👯‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "women with bunny ears",
                "emoticon": "👯‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩‍🦯",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩🏻‍🦯",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩🏼‍🦯",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩🏽‍🦯",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩🏾‍🦯",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane",
                "emoticon": "👩🏿‍🦯",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩‍🦯‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩🏻‍🦯‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩🏼‍🦯‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩🏽‍🦯‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩🏾‍🦯‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman with white cane facing right",
                "emoticon": "👩🏿‍🦯‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩‍🦼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩🏻‍🦼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩🏼‍🦼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩🏽‍🦼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩🏾‍🦼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair",
                "emoticon": "👩🏿‍🦼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩‍🦼‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩🏻‍🦼‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩🏼‍🦼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩🏽‍🦼‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩🏾‍🦼‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in motorized wheelchair facing right",
                "emoticon": "👩🏿‍🦼‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩‍🦽",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩🏻‍🦽",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩🏼‍🦽",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩🏽‍🦽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩🏾‍🦽",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair",
                "emoticon": "👩🏿‍🦽",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩‍🦽‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩🏻‍🦽‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩🏼‍🦽‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩🏽‍🦽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩🏾‍🦽‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman in manual wheelchair facing right",
                "emoticon": "👩🏿‍🦽‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨‍🦯",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨🏻‍🦯",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨🏼‍🦯",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨🏽‍🦯",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨🏾‍🦯",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane",
                "emoticon": "👨🏿‍🦯",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨‍🦯‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨🏻‍🦯‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨🏼‍🦯‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨🏽‍🦯‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨🏾‍🦯‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man with white cane facing right",
                "emoticon": "👨🏿‍🦯‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨‍🦼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨🏻‍🦼",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨🏼‍🦼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨🏽‍🦼",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨🏾‍🦼",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair",
                "emoticon": "👨🏿‍🦼",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨‍🦼‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨🏻‍🦼‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨🏼‍🦼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨🏽‍🦼‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨🏾‍🦼‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in motorized wheelchair facing right",
                "emoticon": "👨🏿‍🦼‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨‍🦽",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨🏻‍🦽",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨🏼‍🦽",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨🏽‍🦽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨🏾‍🦽",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair",
                "emoticon": "👨🏿‍🦽",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨‍🦽‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨🏻‍🦽‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨🏼‍🦽‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨🏽‍🦽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨🏾‍🦽‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man in manual wheelchair facing right",
                "emoticon": "👨🏿‍🦽‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running",
                "emoticon": "🏃🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running",
                "emoticon": "🏃🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running",
                "emoticon": "🏃🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃🏻‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃🏼‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃🏽‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃🏾‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "person running facing right",
                "emoticon": "🏃🏿‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃‍♀️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃🏻‍♀️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃🏼‍♀️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃🏽‍♀️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃🏾‍♀️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "woman running facing right",
                "emoticon": "🏃🏿‍♀️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃‍♂️‍➡️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃🏻‍♂️‍➡️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃🏼‍♂️‍➡️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃🏽‍♂️‍➡️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃🏾‍♂️‍➡️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            },
            {
                "description": "man running facing right",
                "emoticon": "🏃🏿‍♂️‍➡️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-activity"
            }
        ],
        "person-sport": [
            {
                "description": "person playing handball",
                "emoticon": "🤾",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing handball",
                "emoticon": "🤾🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing handball",
                "emoticon": "🤾🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing handball",
                "emoticon": "🤾🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing handball",
                "emoticon": "🤾🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing handball",
                "emoticon": "🤾🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing handball",
                "emoticon": "🤾🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing handball",
                "emoticon": "🤾🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person playing water polo",
                "emoticon": "🤽🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man playing water polo",
                "emoticon": "🤽🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman playing water polo",
                "emoticon": "🤽🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "people wrestling",
                "emoticon": "🤼",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "men wrestling",
                "emoticon": "🤼‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "women wrestling",
                "emoticon": "🤼‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person fencing",
                "emoticon": "🤺",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person juggling",
                "emoticon": "🤹🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man juggling",
                "emoticon": "🤹🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman juggling",
                "emoticon": "🤹🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person cartwheeling",
                "emoticon": "🤸🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man cartwheeling",
                "emoticon": "🤸🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman cartwheeling",
                "emoticon": "🤸🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person mountain biking",
                "emoticon": "🚵🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man mountain biking",
                "emoticon": "🚵🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman mountain biking",
                "emoticon": "🚵🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person biking",
                "emoticon": "🚴🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man biking",
                "emoticon": "🚴🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman biking",
                "emoticon": "🚴🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person rowing boat",
                "emoticon": "🚣🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man rowing boat",
                "emoticon": "🚣🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman rowing boat",
                "emoticon": "🚣🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person golfing",
                "emoticon": "🏌🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌️‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man golfing",
                "emoticon": "🏌🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌️‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman golfing",
                "emoticon": "🏌🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person lifting weights",
                "emoticon": "🏋🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋️‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man lifting weights",
                "emoticon": "🏋🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋️‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman lifting weights",
                "emoticon": "🏋🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person swimming",
                "emoticon": "🏊🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man swimming",
                "emoticon": "🏊🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman swimming",
                "emoticon": "🏊🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "horse racing",
                "emoticon": "🏇🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person surfing",
                "emoticon": "🏄🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man surfing",
                "emoticon": "🏄🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman surfing",
                "emoticon": "🏄🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "snowboarder",
                "emoticon": "🏂🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "person bouncing ball",
                "emoticon": "⛹🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹️‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "man bouncing ball",
                "emoticon": "⛹🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹️‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "woman bouncing ball",
                "emoticon": "⛹🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            },
            {
                "description": "skier",
                "emoticon": "⛷️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-sport"
            }
        ],
        "person-resting": [
            {
                "description": "person in lotus position",
                "emoticon": "🧘",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in lotus position",
                "emoticon": "🧘🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in lotus position",
                "emoticon": "🧘🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in lotus position",
                "emoticon": "🧘🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in lotus position",
                "emoticon": "🧘🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in lotus position",
                "emoticon": "🧘🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘‍♂️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘🏻‍♂️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘🏼‍♂️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘🏽‍♂️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘🏾‍♂️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "man in lotus position",
                "emoticon": "🧘🏿‍♂️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘‍♀️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘🏻‍♀️",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘🏼‍♀️",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘🏽‍♀️",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘🏾‍♀️",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "woman in lotus position",
                "emoticon": "🧘🏿‍♀️",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person in bed",
                "emoticon": "🛌🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            },
            {
                "description": "person taking bath",
                "emoticon": "🛀🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-resting"
            }
        ],
        "family": [
            {
                "description": "people holding hands",
                "emoticon": "🧑‍🤝‍🧑",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏻‍🤝‍🧑🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏻‍🤝‍🧑🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏻‍🤝‍🧑🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏻‍🤝‍🧑🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏻‍🤝‍🧑🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏼‍🤝‍🧑🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏼‍🤝‍🧑🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏼‍🤝‍🧑🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏼‍🤝‍🧑🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏼‍🤝‍🧑🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏽‍🤝‍🧑🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏽‍🤝‍🧑🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏽‍🤝‍🧑🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏽‍🤝‍🧑🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏽‍🤝‍🧑🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏾‍🤝‍🧑🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏾‍🤝‍🧑🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏾‍🤝‍🧑🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏾‍🤝‍🧑🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏾‍🤝‍🧑🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏿‍🤝‍🧑🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏿‍🤝‍🧑🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏿‍🤝‍🧑🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏿‍🤝‍🧑🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "people holding hands",
                "emoticon": "🧑🏿‍🤝‍🧑🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏻‍❤️‍💋‍🧑🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏻‍❤️‍💋‍🧑🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏻‍❤️‍💋‍🧑🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏻‍❤️‍💋‍🧑🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏼‍❤️‍💋‍🧑🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏼‍❤️‍💋‍🧑🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏼‍❤️‍💋‍🧑🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏼‍❤️‍💋‍🧑🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏽‍❤️‍💋‍🧑🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏽‍❤️‍💋‍🧑🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏽‍❤️‍💋‍🧑🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏽‍❤️‍💋‍🧑🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏾‍❤️‍💋‍🧑🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏾‍❤️‍💋‍🧑🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏾‍❤️‍💋‍🧑🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏾‍❤️‍💋‍🧑🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏿‍❤️‍💋‍🧑🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏿‍❤️‍💋‍🧑🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏿‍❤️‍💋‍🧑🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "🧑🏿‍❤️‍💋‍🧑🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏻‍❤️‍🧑🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏻‍❤️‍🧑🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏻‍❤️‍🧑🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏻‍❤️‍🧑🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏼‍❤️‍🧑🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏼‍❤️‍🧑🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏼‍❤️‍🧑🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏼‍❤️‍🧑🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏽‍❤️‍🧑🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏽‍❤️‍🧑🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏽‍❤️‍🧑🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏽‍❤️‍🧑🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏾‍❤️‍🧑🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏾‍❤️‍🧑🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏾‍❤️‍🧑🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏾‍❤️‍🧑🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏿‍❤️‍🧑🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏿‍❤️‍🧑🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏿‍❤️‍🧑🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "🧑🏿‍❤️‍🧑🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "💑🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "💏🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👭🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👬🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👫🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏻‍🤝‍👩🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏻‍🤝‍👩🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏻‍🤝‍👩🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏻‍🤝‍👩🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏼‍🤝‍👩🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏼‍🤝‍👩🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏼‍🤝‍👩🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏼‍🤝‍👩🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏽‍🤝‍👩🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏽‍🤝‍👩🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏽‍🤝‍👩🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏽‍🤝‍👩🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏾‍🤝‍👩🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏾‍🤝‍👩🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏾‍🤝‍👩🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏾‍🤝‍👩🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏿‍🤝‍👩🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏿‍🤝‍👩🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏿‍🤝‍👩🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "women holding hands",
                "emoticon": "👩🏿‍🤝‍👩🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏻‍🤝‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏻‍🤝‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏻‍🤝‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏻‍🤝‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏼‍🤝‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏼‍🤝‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏼‍🤝‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏼‍🤝‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏽‍🤝‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏽‍🤝‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏽‍🤝‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏽‍🤝‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏾‍🤝‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏾‍🤝‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏾‍🤝‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏾‍🤝‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏿‍🤝‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏿‍🤝‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏿‍🤝‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "woman and man holding hands",
                "emoticon": "👩🏿‍🤝‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩‍❤️‍💋‍👨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👨🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👨🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩‍❤️‍💋‍👩",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👩🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👩🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👩🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👩🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏻‍❤️‍💋‍👩🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👩🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👩🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👩🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👩🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏼‍❤️‍💋‍👩🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👩🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👩🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👩🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👩🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏽‍❤️‍💋‍👩🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👩🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👩🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👩🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👩🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏾‍❤️‍💋‍👩🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👩🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👩🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👩🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👩🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👩🏿‍❤️‍💋‍👩🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩‍❤️‍👨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👨🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👨🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👨🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👨🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👨🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩‍❤️‍👩",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👩🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👩🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👩🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👩🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏻‍❤️‍👩🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👩🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👩🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👩🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👩🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏼‍❤️‍👩🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👩🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👩🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👩🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👩🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏽‍❤️‍👩🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👩🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👩🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👩🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👩🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏾‍❤️‍👩🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👩🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👩🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👩🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👩🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👩🏿‍❤️‍👩🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👩‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👩‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👩‍👧‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👩‍👦‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👩‍👧‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👦‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👧‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👩‍👧‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏻‍🤝‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏻‍🤝‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏻‍🤝‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏻‍🤝‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏼‍🤝‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏼‍🤝‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏼‍🤝‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏼‍🤝‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏽‍🤝‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏽‍🤝‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏽‍🤝‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏽‍🤝‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏾‍🤝‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏾‍🤝‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏾‍🤝‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏾‍🤝‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏿‍🤝‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏿‍🤝‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏿‍🤝‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "men holding hands",
                "emoticon": "👨🏿‍🤝‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨‍❤️‍💋‍👨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏻‍❤️‍💋‍👨🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏻‍❤️‍💋‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏻‍❤️‍💋‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏻‍❤️‍💋‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏻‍❤️‍💋‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏼‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏼‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏼‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏼‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏼‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏽‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏽‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏽‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏽‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏽‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏾‍❤️‍💋‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏾‍❤️‍💋‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏾‍❤️‍💋‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏾‍❤️‍💋‍👨🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏾‍❤️‍💋‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏿‍❤️‍💋‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏿‍❤️‍💋‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏿‍❤️‍💋‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏿‍❤️‍💋‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "kiss",
                "emoticon": "👨🏿‍❤️‍💋‍👨🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨‍❤️‍👨",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏻‍❤️‍👨🏻",
                "toneType": [
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏻‍❤️‍👨🏼",
                "toneType": [
                    "light skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏻‍❤️‍👨🏽",
                "toneType": [
                    "light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏻‍❤️‍👨🏾",
                "toneType": [
                    "light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏻‍❤️‍👨🏿",
                "toneType": [
                    "light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏼‍❤️‍👨🏻",
                "toneType": [
                    "medium-light skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏼‍❤️‍👨🏼",
                "toneType": [
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏼‍❤️‍👨🏽",
                "toneType": [
                    "medium-light skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏼‍❤️‍👨🏾",
                "toneType": [
                    "medium-light skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏼‍❤️‍👨🏿",
                "toneType": [
                    "medium-light skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏽‍❤️‍👨🏻",
                "toneType": [
                    "medium skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏽‍❤️‍👨🏼",
                "toneType": [
                    "medium skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏽‍❤️‍👨🏽",
                "toneType": [
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏽‍❤️‍👨🏾",
                "toneType": [
                    "medium skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏽‍❤️‍👨🏿",
                "toneType": [
                    "medium skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏾‍❤️‍👨🏻",
                "toneType": [
                    "medium-dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏾‍❤️‍👨🏼",
                "toneType": [
                    "medium-dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏾‍❤️‍👨🏽",
                "toneType": [
                    "medium-dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏾‍❤️‍👨🏾",
                "toneType": [
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏾‍❤️‍👨🏿",
                "toneType": [
                    "medium-dark skin tone",
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏿‍❤️‍👨🏻",
                "toneType": [
                    "dark skin tone",
                    "light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏿‍❤️‍👨🏼",
                "toneType": [
                    "dark skin tone",
                    "medium-light skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏿‍❤️‍👨🏽",
                "toneType": [
                    "dark skin tone",
                    "medium skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏿‍❤️‍👨🏾",
                "toneType": [
                    "dark skin tone",
                    "medium-dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "couple with heart",
                "emoticon": "👨🏿‍❤️‍👨🏿",
                "toneType": [
                    "dark skin tone"
                ],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👩‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👩‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👩‍👧‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👩‍👦‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👩‍👧‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👨‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👨‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👨‍👧‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👨‍👦‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👨‍👧‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👦‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👧‍👦",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            },
            {
                "description": "family",
                "emoticon": "👨‍👧‍👧",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "family"
            }
        ],
        "person-symbol": [
            {
                "description": "family",
                "emoticon": "🧑‍🧑‍🧒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "family",
                "emoticon": "🧑‍🧑‍🧒‍🧒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "family",
                "emoticon": "🧑‍🧒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "family",
                "emoticon": "🧑‍🧒‍🧒",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "speaking head",
                "emoticon": "🗣️",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "family",
                "emoticon": "👪",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "busts in silhouette",
                "emoticon": "👥",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "bust in silhouette",
                "emoticon": "👤",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            },
            {
                "description": "footprints",
                "emoticon": "👣",
                "toneType": [],
                "groupTitle": "People & Body",
                "subgroupTitle": "person-symbol"
            }
        ]
    },
    "Animals & Nature": {
        "animal-mammal": [
            {
                "description": "guide dog",
                "emoticon": "🦮",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "skunk",
                "emoticon": "🦨",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "orangutan",
                "emoticon": "🦧",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "otter",
                "emoticon": "🦦",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "sloth",
                "emoticon": "🦥",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "badger",
                "emoticon": "🦡",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "raccoon",
                "emoticon": "🦝",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "hippopotamus",
                "emoticon": "🦛",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "llama",
                "emoticon": "🦙",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "kangaroo",
                "emoticon": "🦘",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "hedgehog",
                "emoticon": "🦔",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "zebra",
                "emoticon": "🦓",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "giraffe",
                "emoticon": "🦒",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "rhinoceros",
                "emoticon": "🦏",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "gorilla",
                "emoticon": "🦍",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "deer",
                "emoticon": "🦌",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "fox",
                "emoticon": "🦊",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "bat",
                "emoticon": "🦇",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "unicorn",
                "emoticon": "🦄",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "lion",
                "emoticon": "🦁",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "chipmunk",
                "emoticon": "🐿️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "paw prints",
                "emoticon": "🐾",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "pig nose",
                "emoticon": "🐽",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "panda",
                "emoticon": "🐼",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "bear",
                "emoticon": "🐻",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "polar bear",
                "emoticon": "🐻‍❄️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "wolf",
                "emoticon": "🐺",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "hamster",
                "emoticon": "🐹",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "pig face",
                "emoticon": "🐷",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "dog face",
                "emoticon": "🐶",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "monkey face",
                "emoticon": "🐵",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "horse face",
                "emoticon": "🐴",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "cat face",
                "emoticon": "🐱",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "rabbit face",
                "emoticon": "🐰",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "tiger face",
                "emoticon": "🐯",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "cow face",
                "emoticon": "🐮",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "mouse face",
                "emoticon": "🐭",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "two-hump camel",
                "emoticon": "🐫",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "camel",
                "emoticon": "🐪",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "poodle",
                "emoticon": "🐩",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "koala",
                "emoticon": "🐨",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "elephant",
                "emoticon": "🐘",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "boar",
                "emoticon": "🐗",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "pig",
                "emoticon": "🐖",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "dog",
                "emoticon": "🐕",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "service dog",
                "emoticon": "🐕‍🦺",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "monkey",
                "emoticon": "🐒",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "ewe",
                "emoticon": "🐑",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "goat",
                "emoticon": "🐐",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "ram",
                "emoticon": "🐏",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "horse",
                "emoticon": "🐎",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "cat",
                "emoticon": "🐈",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "black cat",
                "emoticon": "🐈‍⬛",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "rabbit",
                "emoticon": "🐇",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "leopard",
                "emoticon": "🐆",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "tiger",
                "emoticon": "🐅",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "cow",
                "emoticon": "🐄",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "water buffalo",
                "emoticon": "🐃",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "ox",
                "emoticon": "🐂",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "mouse",
                "emoticon": "🐁",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            },
            {
                "description": "rat",
                "emoticon": "🐀",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-mammal"
            }
        ],
        "animal-bird": [
            {
                "description": "flamingo",
                "emoticon": "🦩",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "swan",
                "emoticon": "🦢",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "parrot",
                "emoticon": "🦜",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "peacock",
                "emoticon": "🦚",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "owl",
                "emoticon": "🦉",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "duck",
                "emoticon": "🦆",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "eagle",
                "emoticon": "🦅",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "turkey",
                "emoticon": "🦃",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "dove",
                "emoticon": "🕊️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "penguin",
                "emoticon": "🐧",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "bird",
                "emoticon": "🐦",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "black bird",
                "emoticon": "🐦‍⬛",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "phoenix",
                "emoticon": "🐦‍🔥",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "front-facing baby chick",
                "emoticon": "🐥",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "baby chick",
                "emoticon": "🐤",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "hatching chick",
                "emoticon": "🐣",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "chicken",
                "emoticon": "🐔",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            },
            {
                "description": "rooster",
                "emoticon": "🐓",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bird"
            }
        ],
        "animal-amphibian": [
            {
                "description": "frog",
                "emoticon": "🐸",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-amphibian"
            }
        ],
        "animal-reptile": [
            {
                "description": "T-Rex",
                "emoticon": "🦖",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "sauropod",
                "emoticon": "🦕",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "lizard",
                "emoticon": "🦎",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "dragon face",
                "emoticon": "🐲",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "turtle",
                "emoticon": "🐢",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "snake",
                "emoticon": "🐍",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "crocodile",
                "emoticon": "🐊",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            },
            {
                "description": "dragon",
                "emoticon": "🐉",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-reptile"
            }
        ],
        "animal-marine": [
            {
                "description": "shark",
                "emoticon": "🦈",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "spouting whale",
                "emoticon": "🐳",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "dolphin",
                "emoticon": "🐬",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "blowfish",
                "emoticon": "🐡",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "tropical fish",
                "emoticon": "🐠",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "fish",
                "emoticon": "🐟",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "spiral shell",
                "emoticon": "🐚",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "octopus",
                "emoticon": "🐙",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            },
            {
                "description": "whale",
                "emoticon": "🐋",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-marine"
            }
        ],
        "animal-bug": [
            {
                "description": "microbe",
                "emoticon": "🦠",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "mosquito",
                "emoticon": "🦟",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "cricket",
                "emoticon": "🦗",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "butterfly",
                "emoticon": "🦋",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "scorpion",
                "emoticon": "🦂",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "spider web",
                "emoticon": "🕸️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "spider",
                "emoticon": "🕷️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "lady beetle",
                "emoticon": "🐞",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "honeybee",
                "emoticon": "🐝",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "ant",
                "emoticon": "🐜",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "bug",
                "emoticon": "🐛",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            },
            {
                "description": "snail",
                "emoticon": "🐌",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "animal-bug"
            }
        ],
        "plant-flower": [
            {
                "description": "wilted flower",
                "emoticon": "🥀",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "white flower",
                "emoticon": "💮",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "bouquet",
                "emoticon": "💐",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "rosette",
                "emoticon": "🏵️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "blossom",
                "emoticon": "🌼",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "sunflower",
                "emoticon": "🌻",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "hibiscus",
                "emoticon": "🌺",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "rose",
                "emoticon": "🌹",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "cherry blossom",
                "emoticon": "🌸",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            },
            {
                "description": "tulip",
                "emoticon": "🌷",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-flower"
            }
        ],
        "plant-other": [
            {
                "description": "mushroom",
                "emoticon": "🍄",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "leaf fluttering in wind",
                "emoticon": "🍃",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "fallen leaf",
                "emoticon": "🍂",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "maple leaf",
                "emoticon": "🍁",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "four leaf clover",
                "emoticon": "🍀",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "herb",
                "emoticon": "🌿",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "sheaf of rice",
                "emoticon": "🌾",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "cactus",
                "emoticon": "🌵",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "palm tree",
                "emoticon": "🌴",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "deciduous tree",
                "emoticon": "🌳",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "evergreen tree",
                "emoticon": "🌲",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "seedling",
                "emoticon": "🌱",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            },
            {
                "description": "shamrock",
                "emoticon": "☘️",
                "toneType": [],
                "groupTitle": "Animals & Nature",
                "subgroupTitle": "plant-other"
            }
        ]
    },
    "Food & Drink": {
        "food-fruit": [
            {
                "description": "mango",
                "emoticon": "🥭",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "coconut",
                "emoticon": "🥥",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "kiwi fruit",
                "emoticon": "🥝",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "strawberry",
                "emoticon": "🍓",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "cherries",
                "emoticon": "🍒",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "peach",
                "emoticon": "🍑",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "pear",
                "emoticon": "🍐",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "green apple",
                "emoticon": "🍏",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "red apple",
                "emoticon": "🍎",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "pineapple",
                "emoticon": "🍍",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "banana",
                "emoticon": "🍌",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "lemon",
                "emoticon": "🍋",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "lime",
                "emoticon": "🍋‍🟩",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "tangerine",
                "emoticon": "🍊",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "watermelon",
                "emoticon": "🍉",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "melon",
                "emoticon": "🍈",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "grapes",
                "emoticon": "🍇",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            },
            {
                "description": "tomato",
                "emoticon": "🍅",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-fruit"
            }
        ],
        "food-vegetable": [
            {
                "description": "onion",
                "emoticon": "🧅",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "garlic",
                "emoticon": "🧄",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "leafy green",
                "emoticon": "🥬",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "broccoli",
                "emoticon": "🥦",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "peanuts",
                "emoticon": "🥜",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "carrot",
                "emoticon": "🥕",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "potato",
                "emoticon": "🥔",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "cucumber",
                "emoticon": "🥒",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "avocado",
                "emoticon": "🥑",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "eggplant",
                "emoticon": "🍆",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "brown mushroom",
                "emoticon": "🍄‍🟫",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "ear of corn",
                "emoticon": "🌽",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "hot pepper",
                "emoticon": "🌶️",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            },
            {
                "description": "chestnut",
                "emoticon": "🌰",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-vegetable"
            }
        ],
        "food-prepared": [
            {
                "description": "butter",
                "emoticon": "🧈",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "waffle",
                "emoticon": "🧇",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "falafel",
                "emoticon": "🧆",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "salt",
                "emoticon": "🧂",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "cheese wedge",
                "emoticon": "🧀",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "bagel",
                "emoticon": "🥯",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "canned food",
                "emoticon": "🥫",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "sandwich",
                "emoticon": "🥪",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "cut of meat",
                "emoticon": "🥩",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "pretzel",
                "emoticon": "🥨",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "bowl with spoon",
                "emoticon": "🥣",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "pancakes",
                "emoticon": "🥞",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "egg",
                "emoticon": "🥚",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "stuffed flatbread",
                "emoticon": "🥙",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "shallow pan of food",
                "emoticon": "🥘",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "green salad",
                "emoticon": "🥗",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "baguette bread",
                "emoticon": "🥖",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "bacon",
                "emoticon": "🥓",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "croissant",
                "emoticon": "🥐",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "popcorn",
                "emoticon": "🍿",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "cooking",
                "emoticon": "🍳",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "pot of food",
                "emoticon": "🍲",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "french fries",
                "emoticon": "🍟",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "bread",
                "emoticon": "🍞",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "poultry leg",
                "emoticon": "🍗",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "meat on bone",
                "emoticon": "🍖",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "pizza",
                "emoticon": "🍕",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "hamburger",
                "emoticon": "🍔",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "burrito",
                "emoticon": "🌯",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "taco",
                "emoticon": "🌮",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            },
            {
                "description": "hot dog",
                "emoticon": "🌭",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-prepared"
            }
        ],
        "food-asian": [
            {
                "description": "moon cake",
                "emoticon": "🥮",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "takeout box",
                "emoticon": "🥡",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "fortune cookie",
                "emoticon": "🥠",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "dumpling",
                "emoticon": "🥟",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "bento box",
                "emoticon": "🍱",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "fish cake with swirl",
                "emoticon": "🍥",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "fried shrimp",
                "emoticon": "🍤",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "sushi",
                "emoticon": "🍣",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "oden",
                "emoticon": "🍢",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "dango",
                "emoticon": "🍡",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "roasted sweet potato",
                "emoticon": "🍠",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "spaghetti",
                "emoticon": "🍝",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "steaming bowl",
                "emoticon": "🍜",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "curry rice",
                "emoticon": "🍛",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "cooked rice",
                "emoticon": "🍚",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "rice ball",
                "emoticon": "🍙",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            },
            {
                "description": "rice cracker",
                "emoticon": "🍘",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-asian"
            }
        ],
        "food-marine": [
            {
                "description": "oyster",
                "emoticon": "🦪",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-marine"
            },
            {
                "description": "lobster",
                "emoticon": "🦞",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-marine"
            },
            {
                "description": "squid",
                "emoticon": "🦑",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-marine"
            },
            {
                "description": "shrimp",
                "emoticon": "🦐",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-marine"
            },
            {
                "description": "crab",
                "emoticon": "🦀",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-marine"
            }
        ],
        "food-sweet": [
            {
                "description": "cupcake",
                "emoticon": "🧁",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "pie",
                "emoticon": "🥧",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "birthday cake",
                "emoticon": "🎂",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "shortcake",
                "emoticon": "🍰",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "honey pot",
                "emoticon": "🍯",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "custard",
                "emoticon": "🍮",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "lollipop",
                "emoticon": "🍭",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "candy",
                "emoticon": "🍬",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "chocolate bar",
                "emoticon": "🍫",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "cookie",
                "emoticon": "🍪",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "doughnut",
                "emoticon": "🍩",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "ice cream",
                "emoticon": "🍨",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "shaved ice",
                "emoticon": "🍧",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            },
            {
                "description": "soft ice cream",
                "emoticon": "🍦",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "food-sweet"
            }
        ],
        "drink": [
            {
                "description": "ice",
                "emoticon": "🧊",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "mate",
                "emoticon": "🧉",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "beverage box",
                "emoticon": "🧃",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "cup with straw",
                "emoticon": "🥤",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "glass of milk",
                "emoticon": "🥛",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "tumbler glass",
                "emoticon": "🥃",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "clinking glasses",
                "emoticon": "🥂",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "bottle with popping cork",
                "emoticon": "🍾",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "baby bottle",
                "emoticon": "🍼",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "clinking beer mugs",
                "emoticon": "🍻",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "beer mug",
                "emoticon": "🍺",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "tropical drink",
                "emoticon": "🍹",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "cocktail glass",
                "emoticon": "🍸",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "wine glass",
                "emoticon": "🍷",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "sake",
                "emoticon": "🍶",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "teacup without handle",
                "emoticon": "🍵",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            },
            {
                "description": "hot beverage",
                "emoticon": "☕",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "drink"
            }
        ],
        "dishware": [
            {
                "description": "chopsticks",
                "emoticon": "🥢",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            },
            {
                "description": "spoon",
                "emoticon": "🥄",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            },
            {
                "description": "kitchen knife",
                "emoticon": "🔪",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            },
            {
                "description": "amphora",
                "emoticon": "🏺",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            },
            {
                "description": "fork and knife with plate",
                "emoticon": "🍽️",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            },
            {
                "description": "fork and knife",
                "emoticon": "🍴",
                "toneType": [],
                "groupTitle": "Food & Drink",
                "subgroupTitle": "dishware"
            }
        ]
    },
    "Travel & Places": {
        "place-map": [
            {
                "description": "compass",
                "emoticon": "🧭",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "map of Japan",
                "emoticon": "🗾",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "world map",
                "emoticon": "🗺️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "globe with meridians",
                "emoticon": "🌐",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "globe showing Asia-Australia",
                "emoticon": "🌏",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "globe showing Americas",
                "emoticon": "🌎",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            },
            {
                "description": "globe showing Europe-Africa",
                "emoticon": "🌍",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-map"
            }
        ],
        "place-geographic": [
            {
                "description": "mount fuji",
                "emoticon": "🗻",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "national park",
                "emoticon": "🏞️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "desert island",
                "emoticon": "🏝️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "desert",
                "emoticon": "🏜️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "beach with umbrella",
                "emoticon": "🏖️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "camping",
                "emoticon": "🏕️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "snow-capped mountain",
                "emoticon": "🏔️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "volcano",
                "emoticon": "🌋",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            },
            {
                "description": "mountain",
                "emoticon": "⛰️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-geographic"
            }
        ],
        "place-building": [
            {
                "description": "brick",
                "emoticon": "🧱",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "Statue of Liberty",
                "emoticon": "🗽",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "Tokyo tower",
                "emoticon": "🗼",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "wedding",
                "emoticon": "💒",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "castle",
                "emoticon": "🏰",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "Japanese castle",
                "emoticon": "🏯",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "factory",
                "emoticon": "🏭",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "department store",
                "emoticon": "🏬",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "school",
                "emoticon": "🏫",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "convenience store",
                "emoticon": "🏪",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "love hotel",
                "emoticon": "🏩",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "hotel",
                "emoticon": "🏨",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "bank",
                "emoticon": "🏦",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "hospital",
                "emoticon": "🏥",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "post office",
                "emoticon": "🏤",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "Japanese post office",
                "emoticon": "🏣",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "office building",
                "emoticon": "🏢",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "house with garden",
                "emoticon": "🏡",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "house",
                "emoticon": "🏠",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "stadium",
                "emoticon": "🏟️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "classical building",
                "emoticon": "🏛️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "derelict house",
                "emoticon": "🏚️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "houses",
                "emoticon": "🏘️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            },
            {
                "description": "building construction",
                "emoticon": "🏗️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-building"
            }
        ],
        "place-religious": [
            {
                "description": "hindu temple",
                "emoticon": "🛕",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            },
            {
                "description": "synagogue",
                "emoticon": "🕍",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            },
            {
                "description": "mosque",
                "emoticon": "🕌",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            },
            {
                "description": "kaaba",
                "emoticon": "🕋",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            },
            {
                "description": "church",
                "emoticon": "⛪",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            },
            {
                "description": "shinto shrine",
                "emoticon": "⛩️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-religious"
            }
        ],
        "place-other": [
            {
                "description": "barber pole",
                "emoticon": "💈",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "cityscape",
                "emoticon": "🏙️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "circus tent",
                "emoticon": "🎪",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "roller coaster",
                "emoticon": "🎢",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "ferris wheel",
                "emoticon": "🎡",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "carousel horse",
                "emoticon": "🎠",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "bridge at night",
                "emoticon": "🌉",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "sunset",
                "emoticon": "🌇",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "cityscape at dusk",
                "emoticon": "🌆",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "sunrise",
                "emoticon": "🌅",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "sunrise over mountains",
                "emoticon": "🌄",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "night with stars",
                "emoticon": "🌃",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "foggy",
                "emoticon": "🌁",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "tent",
                "emoticon": "⛺",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "fountain",
                "emoticon": "⛲",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            },
            {
                "description": "hot springs",
                "emoticon": "♨️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "place-other"
            }
        ],
        "transport-ground": [
            {
                "description": "manual wheelchair",
                "emoticon": "🦽",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "motorized wheelchair",
                "emoticon": "🦼",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "auto rickshaw",
                "emoticon": "🛺",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "skateboard",
                "emoticon": "🛹",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "motor scooter",
                "emoticon": "🛵",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "kick scooter",
                "emoticon": "🛴",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "railway track",
                "emoticon": "🛤️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "motorway",
                "emoticon": "🛣️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "oil drum",
                "emoticon": "🛢️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "stop sign",
                "emoticon": "🛑",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "bicycle",
                "emoticon": "🚲",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "police car light",
                "emoticon": "🚨",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "construction",
                "emoticon": "🚧",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "vertical traffic light",
                "emoticon": "🚦",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "horizontal traffic light",
                "emoticon": "🚥",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "mountain railway",
                "emoticon": "🚞",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "monorail",
                "emoticon": "🚝",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "tractor",
                "emoticon": "🚜",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "articulated lorry",
                "emoticon": "🚛",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "delivery truck",
                "emoticon": "🚚",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "sport utility vehicle",
                "emoticon": "🚙",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "oncoming automobile",
                "emoticon": "🚘",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "automobile",
                "emoticon": "🚗",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "oncoming taxi",
                "emoticon": "🚖",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "taxi",
                "emoticon": "🚕",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "oncoming police car",
                "emoticon": "🚔",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "police car",
                "emoticon": "🚓",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "fire engine",
                "emoticon": "🚒",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "ambulance",
                "emoticon": "🚑",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "minibus",
                "emoticon": "🚐",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "bus stop",
                "emoticon": "🚏",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "trolleybus",
                "emoticon": "🚎",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "oncoming bus",
                "emoticon": "🚍",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "bus",
                "emoticon": "🚌",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "tram car",
                "emoticon": "🚋",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "tram",
                "emoticon": "🚊",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "station",
                "emoticon": "🚉",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "light rail",
                "emoticon": "🚈",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "metro",
                "emoticon": "🚇",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "train",
                "emoticon": "🚆",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "bullet train",
                "emoticon": "🚅",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "high-speed train",
                "emoticon": "🚄",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "railway car",
                "emoticon": "🚃",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "locomotive",
                "emoticon": "🚂",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "racing car",
                "emoticon": "🏎️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "motorcycle",
                "emoticon": "🏍️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            },
            {
                "description": "fuel pump",
                "emoticon": "⛽",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-ground"
            }
        ],
        "transport-water": [
            {
                "description": "canoe",
                "emoticon": "🛶",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "passenger ship",
                "emoticon": "🛳️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "motor boat",
                "emoticon": "🛥️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "speedboat",
                "emoticon": "🚤",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "ship",
                "emoticon": "🚢",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "sailboat",
                "emoticon": "⛵",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "ferry",
                "emoticon": "⛴️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            },
            {
                "description": "anchor",
                "emoticon": "⚓",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-water"
            }
        ],
        "transport-air": [
            {
                "description": "parachute",
                "emoticon": "🪂",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "flying saucer",
                "emoticon": "🛸",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "satellite",
                "emoticon": "🛰️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "airplane arrival",
                "emoticon": "🛬",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "airplane departure",
                "emoticon": "🛫",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "small airplane",
                "emoticon": "🛩️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "aerial tramway",
                "emoticon": "🚡",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "mountain cableway",
                "emoticon": "🚠",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "suspension railway",
                "emoticon": "🚟",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "helicopter",
                "emoticon": "🚁",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "rocket",
                "emoticon": "🚀",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "seat",
                "emoticon": "💺",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            },
            {
                "description": "airplane",
                "emoticon": "✈️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "transport-air"
            }
        ],
        "hotel": [
            {
                "description": "luggage",
                "emoticon": "🧳",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "hotel"
            },
            {
                "description": "bellhop bell",
                "emoticon": "🛎️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "hotel"
            }
        ],
        "time": [
            {
                "description": "mantelpiece clock",
                "emoticon": "🕰️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "twelve-thirty",
                "emoticon": "🕧",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "eleven-thirty",
                "emoticon": "🕦",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "ten-thirty",
                "emoticon": "🕥",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "nine-thirty",
                "emoticon": "🕤",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "eight-thirty",
                "emoticon": "🕣",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "seven-thirty",
                "emoticon": "🕢",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "six-thirty",
                "emoticon": "🕡",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "five-thirty",
                "emoticon": "🕠",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "four-thirty",
                "emoticon": "🕟",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "three-thirty",
                "emoticon": "🕞",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "two-thirty",
                "emoticon": "🕝",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "one-thirty",
                "emoticon": "🕜",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "twelve o’clock",
                "emoticon": "🕛",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "eleven o’clock",
                "emoticon": "🕚",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "ten o’clock",
                "emoticon": "🕙",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "nine o’clock",
                "emoticon": "🕘",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "eight o’clock",
                "emoticon": "🕗",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "seven o’clock",
                "emoticon": "🕖",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "six o’clock",
                "emoticon": "🕕",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "five o’clock",
                "emoticon": "🕔",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "four o’clock",
                "emoticon": "🕓",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "three o’clock",
                "emoticon": "🕒",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "two o’clock",
                "emoticon": "🕑",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "one o’clock",
                "emoticon": "🕐",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "hourglass not done",
                "emoticon": "⏳",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "timer clock",
                "emoticon": "⏲️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "stopwatch",
                "emoticon": "⏱️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "alarm clock",
                "emoticon": "⏰",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "hourglass done",
                "emoticon": "⌛",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            },
            {
                "description": "watch",
                "emoticon": "⌚",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "time"
            }
        ],
        "sky & weather": [
            {
                "description": "ringed planet",
                "emoticon": "🪐",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "fire",
                "emoticon": "🔥",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "droplet",
                "emoticon": "💧",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "wind face",
                "emoticon": "🌬️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "fog",
                "emoticon": "🌫️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "tornado",
                "emoticon": "🌪️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cloud with lightning",
                "emoticon": "🌩️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cloud with snow",
                "emoticon": "🌨️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cloud with rain",
                "emoticon": "🌧️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun behind rain cloud",
                "emoticon": "🌦️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun behind large cloud",
                "emoticon": "🌥️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun behind small cloud",
                "emoticon": "🌤️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "thermometer",
                "emoticon": "🌡️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "shooting star",
                "emoticon": "🌠",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "glowing star",
                "emoticon": "🌟",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun with face",
                "emoticon": "🌞",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "full moon face",
                "emoticon": "🌝",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "last quarter moon face",
                "emoticon": "🌜",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "first quarter moon face",
                "emoticon": "🌛",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "new moon face",
                "emoticon": "🌚",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "crescent moon",
                "emoticon": "🌙",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "waning crescent moon",
                "emoticon": "🌘",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "last quarter moon",
                "emoticon": "🌗",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "waning gibbous moon",
                "emoticon": "🌖",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "full moon",
                "emoticon": "🌕",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "waxing gibbous moon",
                "emoticon": "🌔",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "first quarter moon",
                "emoticon": "🌓",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "waxing crescent moon",
                "emoticon": "🌒",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "new moon",
                "emoticon": "🌑",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "milky way",
                "emoticon": "🌌",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "water wave",
                "emoticon": "🌊",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "rainbow",
                "emoticon": "🌈",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "closed umbrella",
                "emoticon": "🌂",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cyclone",
                "emoticon": "🌀",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "star",
                "emoticon": "⭐",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "snowflake",
                "emoticon": "❄️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "umbrella on ground",
                "emoticon": "⛱️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cloud with lightning and rain",
                "emoticon": "⛈️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun behind cloud",
                "emoticon": "⛅",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "snowman without snow",
                "emoticon": "⛄",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "high voltage",
                "emoticon": "⚡",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "umbrella with rain drops",
                "emoticon": "☔",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "comet",
                "emoticon": "☄️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "snowman",
                "emoticon": "☃️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "umbrella",
                "emoticon": "☂️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "cloud",
                "emoticon": "☁️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            },
            {
                "description": "sun",
                "emoticon": "☀️",
                "toneType": [],
                "groupTitle": "Travel & Places",
                "subgroupTitle": "sky & weather"
            }
        ]
    },
    "Activities": {
        "event": [
            {
                "description": "firecracker",
                "emoticon": "🧨",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "red envelope",
                "emoticon": "🧧",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "ticket",
                "emoticon": "🎫",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "admission tickets",
                "emoticon": "🎟️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "reminder ribbon",
                "emoticon": "🎗️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "moon viewing ceremony",
                "emoticon": "🎑",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "wind chime",
                "emoticon": "🎐",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "carp streamer",
                "emoticon": "🎏",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "Japanese dolls",
                "emoticon": "🎎",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "pine decoration",
                "emoticon": "🎍",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "tanabata tree",
                "emoticon": "🎋",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "confetti ball",
                "emoticon": "🎊",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "party popper",
                "emoticon": "🎉",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "balloon",
                "emoticon": "🎈",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "sparkler",
                "emoticon": "🎇",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "fireworks",
                "emoticon": "🎆",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "Christmas tree",
                "emoticon": "🎄",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "jack-o-lantern",
                "emoticon": "🎃",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "wrapped gift",
                "emoticon": "🎁",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "ribbon",
                "emoticon": "🎀",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            },
            {
                "description": "sparkles",
                "emoticon": "✨",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "event"
            }
        ],
        "award-medal": [
            {
                "description": "3rd place medal",
                "emoticon": "🥉",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            },
            {
                "description": "2nd place medal",
                "emoticon": "🥈",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            },
            {
                "description": "1st place medal",
                "emoticon": "🥇",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            },
            {
                "description": "trophy",
                "emoticon": "🏆",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            },
            {
                "description": "sports medal",
                "emoticon": "🏅",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            },
            {
                "description": "military medal",
                "emoticon": "🎖️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "award-medal"
            }
        ],
        "sport": [
            {
                "description": "flying disc",
                "emoticon": "🥏",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "softball",
                "emoticon": "🥎",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "lacrosse",
                "emoticon": "🥍",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "curling stone",
                "emoticon": "🥌",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "martial arts uniform",
                "emoticon": "🥋",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "boxing glove",
                "emoticon": "🥊",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "goal net",
                "emoticon": "🥅",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "diving mask",
                "emoticon": "🤿",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "sled",
                "emoticon": "🛷",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "badminton",
                "emoticon": "🏸",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "ping pong",
                "emoticon": "🏓",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "ice hockey",
                "emoticon": "🏒",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "field hockey",
                "emoticon": "🏑",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "volleyball",
                "emoticon": "🏐",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "cricket game",
                "emoticon": "🏏",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "rugby football",
                "emoticon": "🏉",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "american football",
                "emoticon": "🏈",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "basketball",
                "emoticon": "🏀",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "skis",
                "emoticon": "🎿",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "tennis",
                "emoticon": "🎾",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "running shirt",
                "emoticon": "🎽",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "bowling",
                "emoticon": "🎳",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "fishing pole",
                "emoticon": "🎣",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "ice skate",
                "emoticon": "⛸️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "flag in hole",
                "emoticon": "⛳",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "baseball",
                "emoticon": "⚾",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            },
            {
                "description": "soccer ball",
                "emoticon": "⚽",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "sport"
            }
        ],
        "game": [
            {
                "description": "kite",
                "emoticon": "🪁",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "yo-yo",
                "emoticon": "🪀",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "teddy bear",
                "emoticon": "🧸",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "puzzle piece",
                "emoticon": "🧩",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "joystick",
                "emoticon": "🕹️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "crystal ball",
                "emoticon": "🔮",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "water pistol",
                "emoticon": "🔫",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "flower playing cards",
                "emoticon": "🎴",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "game die",
                "emoticon": "🎲",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "pool 8 ball",
                "emoticon": "🎱",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "slot machine",
                "emoticon": "🎰",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "bullseye",
                "emoticon": "🎯",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "video game",
                "emoticon": "🎮",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "joker",
                "emoticon": "🃏",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "mahjong red dragon",
                "emoticon": "🀄",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "diamond suit",
                "emoticon": "♦️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "heart suit",
                "emoticon": "♥️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "club suit",
                "emoticon": "♣️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "spade suit",
                "emoticon": "♠️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            },
            {
                "description": "chess pawn",
                "emoticon": "♟️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "game"
            }
        ],
        "arts & crafts": [
            {
                "description": "yarn",
                "emoticon": "🧶",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "arts & crafts"
            },
            {
                "description": "thread",
                "emoticon": "🧵",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "arts & crafts"
            },
            {
                "description": "framed picture",
                "emoticon": "🖼️",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "arts & crafts"
            },
            {
                "description": "performing arts",
                "emoticon": "🎭",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "arts & crafts"
            },
            {
                "description": "artist palette",
                "emoticon": "🎨",
                "toneType": [],
                "groupTitle": "Activities",
                "subgroupTitle": "arts & crafts"
            }
        ]
    },
    "Objects": {
        "clothing": [
            {
                "description": "shorts",
                "emoticon": "🩳",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "briefs",
                "emoticon": "🩲",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "one-piece swimsuit",
                "emoticon": "🩱",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "ballet shoes",
                "emoticon": "🩰",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "socks",
                "emoticon": "🧦",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "coat",
                "emoticon": "🧥",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "gloves",
                "emoticon": "🧤",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "scarf",
                "emoticon": "🧣",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "billed cap",
                "emoticon": "🧢",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "safety vest",
                "emoticon": "🦺",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "flat shoe",
                "emoticon": "🥿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "hiking boot",
                "emoticon": "🥾",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "goggles",
                "emoticon": "🥽",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "lab coat",
                "emoticon": "🥼",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "sari",
                "emoticon": "🥻",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "shopping bags",
                "emoticon": "🛍️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "sunglasses",
                "emoticon": "🕶️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "prayer beads",
                "emoticon": "📿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "gem stone",
                "emoticon": "💎",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "ring",
                "emoticon": "💍",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "lipstick",
                "emoticon": "💄",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "woman’s boot",
                "emoticon": "👢",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "woman’s sandal",
                "emoticon": "👡",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "high-heeled shoe",
                "emoticon": "👠",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "running shoe",
                "emoticon": "👟",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "man’s shoe",
                "emoticon": "👞",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "clutch bag",
                "emoticon": "👝",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "handbag",
                "emoticon": "👜",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "purse",
                "emoticon": "👛",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "woman’s clothes",
                "emoticon": "👚",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "bikini",
                "emoticon": "👙",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "kimono",
                "emoticon": "👘",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "dress",
                "emoticon": "👗",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "jeans",
                "emoticon": "👖",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "t-shirt",
                "emoticon": "👕",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "necktie",
                "emoticon": "👔",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "glasses",
                "emoticon": "👓",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "woman’s hat",
                "emoticon": "👒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "crown",
                "emoticon": "👑",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "top hat",
                "emoticon": "🎩",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "graduation cap",
                "emoticon": "🎓",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "backpack",
                "emoticon": "🎒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            },
            {
                "description": "rescue worker’s helmet",
                "emoticon": "⛑️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "clothing"
            }
        ],
        "sound": [
            {
                "description": "bell with slash",
                "emoticon": "🔕",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "bell",
                "emoticon": "🔔",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "speaker high volume",
                "emoticon": "🔊",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "speaker medium volume",
                "emoticon": "🔉",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "speaker low volume",
                "emoticon": "🔈",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "muted speaker",
                "emoticon": "🔇",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "postal horn",
                "emoticon": "📯",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "megaphone",
                "emoticon": "📣",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            },
            {
                "description": "loudspeaker",
                "emoticon": "📢",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "sound"
            }
        ],
        "music": [
            {
                "description": "radio",
                "emoticon": "📻",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "musical score",
                "emoticon": "🎼",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "musical notes",
                "emoticon": "🎶",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "musical note",
                "emoticon": "🎵",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "headphone",
                "emoticon": "🎧",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "microphone",
                "emoticon": "🎤",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "control knobs",
                "emoticon": "🎛️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "level slider",
                "emoticon": "🎚️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            },
            {
                "description": "studio microphone",
                "emoticon": "🎙️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "music"
            }
        ],
        "musical-instrument": [
            {
                "description": "banjo",
                "emoticon": "🪕",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "drum",
                "emoticon": "🥁",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "violin",
                "emoticon": "🎻",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "trumpet",
                "emoticon": "🎺",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "musical keyboard",
                "emoticon": "🎹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "guitar",
                "emoticon": "🎸",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            },
            {
                "description": "saxophone",
                "emoticon": "🎷",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "musical-instrument"
            }
        ],
        "phone": [
            {
                "description": "mobile phone with arrow",
                "emoticon": "📲",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            },
            {
                "description": "mobile phone",
                "emoticon": "📱",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            },
            {
                "description": "fax machine",
                "emoticon": "📠",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            },
            {
                "description": "pager",
                "emoticon": "📟",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            },
            {
                "description": "telephone receiver",
                "emoticon": "📞",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            },
            {
                "description": "telephone",
                "emoticon": "☎️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "phone"
            }
        ],
        "computer": [
            {
                "description": "abacus",
                "emoticon": "🧮",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "trackball",
                "emoticon": "🖲️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "computer mouse",
                "emoticon": "🖱️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "printer",
                "emoticon": "🖨️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "desktop computer",
                "emoticon": "🖥️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "electric plug",
                "emoticon": "🔌",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "battery",
                "emoticon": "🔋",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "dvd",
                "emoticon": "📀",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "optical disk",
                "emoticon": "💿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "floppy disk",
                "emoticon": "💾",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "computer disk",
                "emoticon": "💽",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "laptop",
                "emoticon": "💻",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            },
            {
                "description": "keyboard",
                "emoticon": "⌨️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "computer"
            }
        ],
        "light & video": [
            {
                "description": "diya lamp",
                "emoticon": "🪔",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "candle",
                "emoticon": "🕯️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "flashlight",
                "emoticon": "🔦",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "magnifying glass tilted right",
                "emoticon": "🔎",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "magnifying glass tilted left",
                "emoticon": "🔍",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "film projector",
                "emoticon": "📽️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "videocassette",
                "emoticon": "📼",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "television",
                "emoticon": "📺",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "video camera",
                "emoticon": "📹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "camera with flash",
                "emoticon": "📸",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "camera",
                "emoticon": "📷",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "light bulb",
                "emoticon": "💡",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "red paper lantern",
                "emoticon": "🏮",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "clapper board",
                "emoticon": "🎬",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "movie camera",
                "emoticon": "🎥",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            },
            {
                "description": "film frames",
                "emoticon": "🎞️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "light & video"
            }
        ],
        "book-paper": [
            {
                "description": "rolled-up newspaper",
                "emoticon": "🗞️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "bookmark",
                "emoticon": "🔖",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "newspaper",
                "emoticon": "📰",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "scroll",
                "emoticon": "📜",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "books",
                "emoticon": "📚",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "orange book",
                "emoticon": "📙",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "blue book",
                "emoticon": "📘",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "green book",
                "emoticon": "📗",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "open book",
                "emoticon": "📖",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "closed book",
                "emoticon": "📕",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "notebook with decorative cover",
                "emoticon": "📔",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "notebook",
                "emoticon": "📓",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "ledger",
                "emoticon": "📒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "bookmark tabs",
                "emoticon": "📑",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "page facing up",
                "emoticon": "📄",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "page with curl",
                "emoticon": "📃",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            },
            {
                "description": "label",
                "emoticon": "🏷️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "book-paper"
            }
        ],
        "money": [
            {
                "description": "receipt",
                "emoticon": "🧾",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "chart increasing with yen",
                "emoticon": "💹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "money with wings",
                "emoticon": "💸",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "pound banknote",
                "emoticon": "💷",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "euro banknote",
                "emoticon": "💶",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "dollar banknote",
                "emoticon": "💵",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "yen banknote",
                "emoticon": "💴",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "credit card",
                "emoticon": "💳",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            },
            {
                "description": "money bag",
                "emoticon": "💰",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "money"
            }
        ],
        "mail": [
            {
                "description": "ballot box with ballot",
                "emoticon": "🗳️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "postbox",
                "emoticon": "📮",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "open mailbox with lowered flag",
                "emoticon": "📭",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "open mailbox with raised flag",
                "emoticon": "📬",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "closed mailbox with raised flag",
                "emoticon": "📫",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "closed mailbox with lowered flag",
                "emoticon": "📪",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "envelope with arrow",
                "emoticon": "📩",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "incoming envelope",
                "emoticon": "📨",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "e-mail",
                "emoticon": "📧",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "package",
                "emoticon": "📦",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "inbox tray",
                "emoticon": "📥",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "outbox tray",
                "emoticon": "📤",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            },
            {
                "description": "envelope",
                "emoticon": "✉️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "mail"
            }
        ],
        "writing": [
            {
                "description": "crayon",
                "emoticon": "🖍️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "paintbrush",
                "emoticon": "🖌️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "fountain pen",
                "emoticon": "🖋️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "pen",
                "emoticon": "🖊️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "memo",
                "emoticon": "📝",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "black nib",
                "emoticon": "✒️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            },
            {
                "description": "pencil",
                "emoticon": "✏️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "writing"
            }
        ],
        "office": [
            {
                "description": "spiral calendar",
                "emoticon": "🗓️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "spiral notepad",
                "emoticon": "🗒️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "wastebasket",
                "emoticon": "🗑️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "file cabinet",
                "emoticon": "🗄️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "card file box",
                "emoticon": "🗃️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "card index dividers",
                "emoticon": "🗂️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "linked paperclips",
                "emoticon": "🖇️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "triangular ruler",
                "emoticon": "📐",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "straight ruler",
                "emoticon": "📏",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "paperclip",
                "emoticon": "📎",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "round pushpin",
                "emoticon": "📍",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "pushpin",
                "emoticon": "📌",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "clipboard",
                "emoticon": "📋",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "bar chart",
                "emoticon": "📊",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "chart decreasing",
                "emoticon": "📉",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "chart increasing",
                "emoticon": "📈",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "card index",
                "emoticon": "📇",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "tear-off calendar",
                "emoticon": "📆",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "calendar",
                "emoticon": "📅",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "open file folder",
                "emoticon": "📂",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "file folder",
                "emoticon": "📁",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "briefcase",
                "emoticon": "💼",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            },
            {
                "description": "scissors",
                "emoticon": "✂️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "office"
            }
        ],
        "lock": [
            {
                "description": "old key",
                "emoticon": "🗝️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            },
            {
                "description": "unlocked",
                "emoticon": "🔓",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            },
            {
                "description": "locked",
                "emoticon": "🔒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            },
            {
                "description": "key",
                "emoticon": "🔑",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            },
            {
                "description": "locked with key",
                "emoticon": "🔐",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            },
            {
                "description": "locked with pen",
                "emoticon": "🔏",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "lock"
            }
        ],
        "tool": [
            {
                "description": "axe",
                "emoticon": "🪓",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "magnet",
                "emoticon": "🧲",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "toolbox",
                "emoticon": "🧰",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "white cane",
                "emoticon": "🦯",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "shield",
                "emoticon": "🛡️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "hammer and wrench",
                "emoticon": "🛠️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "dagger",
                "emoticon": "🗡️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "clamp",
                "emoticon": "🗜️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "nut and bolt",
                "emoticon": "🔩",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "hammer",
                "emoticon": "🔨",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "wrench",
                "emoticon": "🔧",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "link",
                "emoticon": "🔗",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "bomb",
                "emoticon": "💣",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "bow and arrow",
                "emoticon": "🏹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "broken chain",
                "emoticon": "⛓️‍💥",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "chains",
                "emoticon": "⛓️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "pick",
                "emoticon": "⛏️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "gear",
                "emoticon": "⚙️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "balance scale",
                "emoticon": "⚖️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "crossed swords",
                "emoticon": "⚔️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            },
            {
                "description": "hammer and pick",
                "emoticon": "⚒️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "tool"
            }
        ],
        "science": [
            {
                "description": "dna",
                "emoticon": "🧬",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "petri dish",
                "emoticon": "🧫",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "test tube",
                "emoticon": "🧪",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "telescope",
                "emoticon": "🔭",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "microscope",
                "emoticon": "🔬",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "satellite antenna",
                "emoticon": "📡",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            },
            {
                "description": "alembic",
                "emoticon": "⚗️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "science"
            }
        ],
        "medical": [
            {
                "description": "stethoscope",
                "emoticon": "🩺",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "medical"
            },
            {
                "description": "adhesive bandage",
                "emoticon": "🩹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "medical"
            },
            {
                "description": "drop of blood",
                "emoticon": "🩸",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "medical"
            },
            {
                "description": "pill",
                "emoticon": "💊",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "medical"
            },
            {
                "description": "syringe",
                "emoticon": "💉",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "medical"
            }
        ],
        "household": [
            {
                "description": "razor",
                "emoticon": "🪒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "chair",
                "emoticon": "🪑",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "sponge",
                "emoticon": "🧽",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "soap",
                "emoticon": "🧼",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "roll of paper",
                "emoticon": "🧻",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "basket",
                "emoticon": "🧺",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "broom",
                "emoticon": "🧹",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "safety pin",
                "emoticon": "🧷",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "lotion bottle",
                "emoticon": "🧴",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "fire extinguisher",
                "emoticon": "🧯",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "shopping cart",
                "emoticon": "🛒",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "bed",
                "emoticon": "🛏️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "couch and lamp",
                "emoticon": "🛋️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "bathtub",
                "emoticon": "🛁",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "shower",
                "emoticon": "🚿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "toilet",
                "emoticon": "🚽",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            },
            {
                "description": "door",
                "emoticon": "🚪",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "household"
            }
        ],
        "other-object": [
            {
                "description": "nazar amulet",
                "emoticon": "🧿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "other-object"
            },
            {
                "description": "cigarette",
                "emoticon": "🚬",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "other-object"
            },
            {
                "description": "moai",
                "emoticon": "🗿",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "other-object"
            },
            {
                "description": "funeral urn",
                "emoticon": "⚱️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "other-object"
            },
            {
                "description": "coffin",
                "emoticon": "⚰️",
                "toneType": [],
                "groupTitle": "Objects",
                "subgroupTitle": "other-object"
            }
        ]
    },
    "Symbols": {
        "transport-sign": [
            {
                "description": "left luggage",
                "emoticon": "🛅",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "baggage claim",
                "emoticon": "🛄",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "customs",
                "emoticon": "🛃",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "passport control",
                "emoticon": "🛂",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "water closet",
                "emoticon": "🚾",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "baby symbol",
                "emoticon": "🚼",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "restroom",
                "emoticon": "🚻",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "women’s room",
                "emoticon": "🚺",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "men’s room",
                "emoticon": "🚹",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "potable water",
                "emoticon": "🚰",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "litter in bin sign",
                "emoticon": "🚮",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "ATM sign",
                "emoticon": "🏧",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            },
            {
                "description": "wheelchair symbol",
                "emoticon": "♿",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "transport-sign"
            }
        ],
        "warning": [
            {
                "description": "children crossing",
                "emoticon": "🚸",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no pedestrians",
                "emoticon": "🚷",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no bicycles",
                "emoticon": "🚳",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "non-potable water",
                "emoticon": "🚱",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no littering",
                "emoticon": "🚯",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no smoking",
                "emoticon": "🚭",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "prohibited",
                "emoticon": "🚫",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no one under eighteen",
                "emoticon": "🔞",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no mobile phones",
                "emoticon": "📵",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "no entry",
                "emoticon": "⛔",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "warning",
                "emoticon": "⚠️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "biohazard",
                "emoticon": "☣️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            },
            {
                "description": "radioactive",
                "emoticon": "☢️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "warning"
            }
        ],
        "arrow": [
            {
                "description": "TOP arrow",
                "emoticon": "🔝",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "SOON arrow",
                "emoticon": "🔜",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "ON! arrow",
                "emoticon": "🔛",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "END arrow",
                "emoticon": "🔚",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "BACK arrow",
                "emoticon": "🔙",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "counterclockwise arrows button",
                "emoticon": "🔄",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "clockwise vertical arrows",
                "emoticon": "🔃",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "down arrow",
                "emoticon": "⬇️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "up arrow",
                "emoticon": "⬆️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "left arrow",
                "emoticon": "⬅️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "right arrow curving down",
                "emoticon": "⤵️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "right arrow curving up",
                "emoticon": "⤴️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "right arrow",
                "emoticon": "➡️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "left arrow curving right",
                "emoticon": "↪️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "right arrow curving left",
                "emoticon": "↩️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "down-left arrow",
                "emoticon": "↙️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "down-right arrow",
                "emoticon": "↘️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "up-right arrow",
                "emoticon": "↗️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "up-left arrow",
                "emoticon": "↖️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "up-down arrow",
                "emoticon": "↕️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            },
            {
                "description": "left-right arrow",
                "emoticon": "↔️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "arrow"
            }
        ],
        "religion": [
            {
                "description": "place of worship",
                "emoticon": "🛐",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "menorah",
                "emoticon": "🕎",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "om",
                "emoticon": "🕉️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "dotted six-pointed star",
                "emoticon": "🔯",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "star of David",
                "emoticon": "✡️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "latin cross",
                "emoticon": "✝️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "atom symbol",
                "emoticon": "⚛️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "wheel of dharma",
                "emoticon": "☸️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "yin yang",
                "emoticon": "☯️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "peace symbol",
                "emoticon": "☮️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "star and crescent",
                "emoticon": "☪️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            },
            {
                "description": "orthodox cross",
                "emoticon": "☦️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "religion"
            }
        ],
        "zodiac": [
            {
                "description": "Ophiuchus",
                "emoticon": "⛎",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Pisces",
                "emoticon": "♓",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Aquarius",
                "emoticon": "♒",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Capricorn",
                "emoticon": "♑",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Sagittarius",
                "emoticon": "♐",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Scorpio",
                "emoticon": "♏",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Libra",
                "emoticon": "♎",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Virgo",
                "emoticon": "♍",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Leo",
                "emoticon": "♌",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Cancer",
                "emoticon": "♋",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Gemini",
                "emoticon": "♊",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Taurus",
                "emoticon": "♉",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            },
            {
                "description": "Aries",
                "emoticon": "♈",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "zodiac"
            }
        ],
        "av-symbol": [
            {
                "description": "downwards button",
                "emoticon": "🔽",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "upwards button",
                "emoticon": "🔼",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "bright button",
                "emoticon": "🔆",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "dim button",
                "emoticon": "🔅",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "repeat single button",
                "emoticon": "🔂",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "repeat button",
                "emoticon": "🔁",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "shuffle tracks button",
                "emoticon": "🔀",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "antenna bars",
                "emoticon": "📶",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "mobile phone off",
                "emoticon": "📴",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "vibration mode",
                "emoticon": "📳",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "cinema",
                "emoticon": "🎦",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "reverse button",
                "emoticon": "◀️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "play button",
                "emoticon": "▶️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "record button",
                "emoticon": "⏺️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "stop button",
                "emoticon": "⏹️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "pause button",
                "emoticon": "⏸️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "play or pause button",
                "emoticon": "⏯️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "last track button",
                "emoticon": "⏮️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "next track button",
                "emoticon": "⏭️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "fast down button",
                "emoticon": "⏬",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "fast up button",
                "emoticon": "⏫",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "fast reverse button",
                "emoticon": "⏪",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "fast-forward button",
                "emoticon": "⏩",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            },
            {
                "description": "eject button",
                "emoticon": "⏏️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "av-symbol"
            }
        ],
        "gender": [
            {
                "description": "transgender symbol",
                "emoticon": "⚧️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "gender"
            },
            {
                "description": "male sign",
                "emoticon": "♂️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "gender"
            },
            {
                "description": "female sign",
                "emoticon": "♀️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "gender"
            }
        ],
        "math": [
            {
                "description": "divide",
                "emoticon": "➗",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "math"
            },
            {
                "description": "minus",
                "emoticon": "➖",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "math"
            },
            {
                "description": "plus",
                "emoticon": "➕",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "math"
            },
            {
                "description": "multiply",
                "emoticon": "✖️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "math"
            },
            {
                "description": "infinity",
                "emoticon": "♾️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "math"
            }
        ],
        "punctuation": [
            {
                "description": "wavy dash",
                "emoticon": "〰️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "red exclamation mark",
                "emoticon": "❗",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "white exclamation mark",
                "emoticon": "❕",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "white question mark",
                "emoticon": "❔",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "red question mark",
                "emoticon": "❓",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "exclamation question mark",
                "emoticon": "⁉️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            },
            {
                "description": "double exclamation mark",
                "emoticon": "‼️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "punctuation"
            }
        ],
        "currency": [
            {
                "description": "heavy dollar sign",
                "emoticon": "💲",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "currency"
            },
            {
                "description": "currency exchange",
                "emoticon": "💱",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "currency"
            }
        ],
        "other-symbol": [
            {
                "description": "trident emblem",
                "emoticon": "🔱",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "Japanese symbol for beginner",
                "emoticon": "🔰",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "name badge",
                "emoticon": "📛",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "part alternation mark",
                "emoticon": "〽️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "hollow red circle",
                "emoticon": "⭕",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "double curly loop",
                "emoticon": "➿",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "curly loop",
                "emoticon": "➰",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "cross mark button",
                "emoticon": "❎",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "cross mark",
                "emoticon": "❌",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "sparkle",
                "emoticon": "❇️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "eight-pointed star",
                "emoticon": "✴️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "eight-spoked asterisk",
                "emoticon": "✳️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "check mark",
                "emoticon": "✔️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "check mark button",
                "emoticon": "✅",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "fleur-de-lis",
                "emoticon": "⚜️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "medical symbol",
                "emoticon": "⚕️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "recycling symbol",
                "emoticon": "♻️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "check box with check",
                "emoticon": "☑️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "trade mark",
                "emoticon": "™️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "registered",
                "emoticon": "®️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            },
            {
                "description": "copyright",
                "emoticon": "©️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "other-symbol"
            }
        ],
        "keycap": [
            {
                "description": "keycap",
                "emoticon": "🔟",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "9️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "8️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "7️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "6️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "5️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "4️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "3️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "2️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "1️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "0️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            },
            {
                "description": "keycap",
                "emoticon": "*️⃣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "keycap"
            }
        ],
        "alphanum": [
            {
                "description": "input latin letters",
                "emoticon": "🔤",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "input symbols",
                "emoticon": "🔣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "input numbers",
                "emoticon": "🔢",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "input latin lowercase",
                "emoticon": "🔡",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "input latin uppercase",
                "emoticon": "🔠",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “acceptable” button",
                "emoticon": "🉑",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “bargain” button",
                "emoticon": "🉐",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “open for business” button",
                "emoticon": "🈺",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “discount” button",
                "emoticon": "🈹",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “application” button",
                "emoticon": "🈸",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “monthly amount” button",
                "emoticon": "🈷️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “not free of charge” button",
                "emoticon": "🈶",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “no vacancy” button",
                "emoticon": "🈵",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “passing grade” button",
                "emoticon": "🈴",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “vacancy” button",
                "emoticon": "🈳",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “prohibited” button",
                "emoticon": "🈲",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “reserved” button",
                "emoticon": "🈯",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “free of charge” button",
                "emoticon": "🈚",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “service charge” button",
                "emoticon": "🈂️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “here” button",
                "emoticon": "🈁",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "VS button",
                "emoticon": "🆚",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "UP! button",
                "emoticon": "🆙",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "SOS button",
                "emoticon": "🆘",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "OK button",
                "emoticon": "🆗",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "NG button",
                "emoticon": "🆖",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "NEW button",
                "emoticon": "🆕",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "ID button",
                "emoticon": "🆔",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "FREE button",
                "emoticon": "🆓",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "COOL button",
                "emoticon": "🆒",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "CL button",
                "emoticon": "🆑",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "AB button (blood type)",
                "emoticon": "🆎",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "P button",
                "emoticon": "🅿️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "O button (blood type)",
                "emoticon": "🅾️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "B button (blood type)",
                "emoticon": "🅱️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "A button (blood type)",
                "emoticon": "🅰️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “secret” button",
                "emoticon": "㊙️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "Japanese “congratulations” button",
                "emoticon": "㊗️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "circled M",
                "emoticon": "Ⓜ️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            },
            {
                "description": "information",
                "emoticon": "ℹ️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "alphanum"
            }
        ],
        "geometric": [
            {
                "description": "brown square",
                "emoticon": "🟫",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "purple square",
                "emoticon": "🟪",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "green square",
                "emoticon": "🟩",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "yellow square",
                "emoticon": "🟨",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "orange square",
                "emoticon": "🟧",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "blue square",
                "emoticon": "🟦",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "red square",
                "emoticon": "🟥",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "brown circle",
                "emoticon": "🟤",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "purple circle",
                "emoticon": "🟣",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "green circle",
                "emoticon": "🟢",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "yellow circle",
                "emoticon": "🟡",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "orange circle",
                "emoticon": "🟠",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "red triangle pointed down",
                "emoticon": "🔻",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "red triangle pointed up",
                "emoticon": "🔺",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "small blue diamond",
                "emoticon": "🔹",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "small orange diamond",
                "emoticon": "🔸",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "large blue diamond",
                "emoticon": "🔷",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "large orange diamond",
                "emoticon": "🔶",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "blue circle",
                "emoticon": "🔵",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "red circle",
                "emoticon": "🔴",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white square button",
                "emoticon": "🔳",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black square button",
                "emoticon": "🔲",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "radio button",
                "emoticon": "🔘",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "diamond with a dot",
                "emoticon": "💠",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white large square",
                "emoticon": "⬜",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black large square",
                "emoticon": "⬛",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black circle",
                "emoticon": "⚫",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white circle",
                "emoticon": "⚪",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black medium-small square",
                "emoticon": "◾",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white medium-small square",
                "emoticon": "◽",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black medium square",
                "emoticon": "◼️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white medium square",
                "emoticon": "◻️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "white small square",
                "emoticon": "▫️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            },
            {
                "description": "black small square",
                "emoticon": "▪️",
                "toneType": [],
                "groupTitle": "Symbols",
                "subgroupTitle": "geometric"
            }
        ]
    },
    "Flags": {
        "flag": [
            {
                "description": "triangular flag",
                "emoticon": "🚩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "black flag",
                "emoticon": "🏴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "pirate flag",
                "emoticon": "🏴‍☠️",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "white flag",
                "emoticon": "🏳️",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "rainbow flag",
                "emoticon": "🏳️‍🌈",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "transgender flag",
                "emoticon": "🏳️‍⚧️",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "chequered flag",
                "emoticon": "🏁",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            },
            {
                "description": "crossed flags",
                "emoticon": "🎌",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "flag"
            }
        ],
        "country-flag": [
            {
                "description": "flag",
                "emoticon": "🇿🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇿🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇿🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇾🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇾🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇽🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇼🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇼🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇻🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇺🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇯",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇹🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇧",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇯",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇽",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇸🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇷🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇷🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇷🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇷🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇷🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇶🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇵🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇴🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇳🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇶",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇽",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇲🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇧",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇱🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇰🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇯🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇯🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇯🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇯🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇶",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇮🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇭🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇧",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇶",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇬🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇯",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇫🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇪🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇯",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇩🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇰",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇵",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇽",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇨🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇦",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇧",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇭",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇯",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇳",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇶",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇻",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇾",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇧🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇨",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇩",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇪",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇫",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇬",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇮",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇱",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇲",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇴",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇶",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇷",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇸",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇹",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇺",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇼",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇽",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            },
            {
                "description": "flag",
                "emoticon": "🇦🇿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "country-flag"
            }
        ],
        "subdivision-flag": [
            {
                "description": "flag",
                "emoticon": "🏴󠁧󠁢󠁥󠁮󠁧󠁿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "subdivision-flag"
            },
            {
                "description": "flag",
                "emoticon": "🏴󠁧󠁢󠁳󠁣󠁴󠁿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "subdivision-flag"
            },
            {
                "description": "flag",
                "emoticon": "🏴󠁧󠁢󠁷󠁬󠁳󠁿",
                "toneType": [],
                "groupTitle": "Flags",
                "subgroupTitle": "subdivision-flag"
            }
        ]
    }
}

/***/ }),

/***/ "./view/js/handler/editor/tools/Background.js":
/*!****************************************************!*\
  !*** ./view/js/handler/editor/tools/Background.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Background)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_Palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/Palette */ "./view/js/handler/editor/component/Palette.js");




class Background extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-background-style'
	});

	static palette;

	static{

		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-background';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'G',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Background Color'
        });

		this.palette = new _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"]({
            openPositionMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].OpenPositionMode.BUTTON, 
            openPosition: this.toolHandler.toolButton,
			exampleMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].ExampleMode.TEXT_BACKGROUND_COLOR
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.palette.isConnected){
				this.palette.close();
			}else{
				this.palette.open();
			}
		}

		this.palette.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.palette.close();
		}

		super.outClickElementListener(this.palette.palette, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.palette.palette.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.palette.close();
			}
		})

	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(Background, dataset);

		if( ! dataset && Object.entries(this.dataset).length == 0){
			this.dataset.rgba = Background.palette.r + ',' + Background.palette.g + ',' + Background.palette.b + ',' + Background.palette.a;
		}
		this.style.backgroundColor = `rgba(${this.dataset.rgba})`;
	}



}

/***/ }),

/***/ "./view/js/handler/editor/tools/BulletPoint.js":
/*!*****************************************************!*\
  !*** ./view/js/handler/editor/tools/BulletPoint.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BulletPoint)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");



class BulletPoint extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	//static extendsElement = 'strong';
	//static defaultClass = 'line';
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);
	
	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-bullet-point-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-bullet-point';
		this.toolHandler.isInline = false;
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '●',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Bullet Point'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}

			.${this.toolHandler.defaultClass} {
				display: block;
				padding-left: 1em;
				margin-inline: 2.5em;
				list-style-type: disc;
			}
			.${this.toolHandler.defaultClass} > *{
				display: list-item;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}
	
	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	parentLine;

	constructor(dataset){
		super(BulletPoint, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});
		/*
		super.connectedAfterOnlyOneCallback = () => {
			this.dataset.index = BulletPoint.toolHandler.connectedFriends.length;
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}else{
				nextLine.line.lookAtMe();
			}
		}

		super.disconnectedChildAfterCallback = (removedNodes) => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}
        }
		*/
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Code.js":
/*!**********************************************!*\
  !*** ./view/js/handler/editor/tools/Code.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Code)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");



class Code extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	//static extendsElement = 'strong';
	//static defaultClass = 'line';
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-code-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-code';
		this.toolHandler.isInline = false;

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '',
            className: `${this.#defaultStyle.id}-button`,
            innerHTML: `
            <svg class="${this.#defaultStyle.id} css-gg-code-icon"
            width="0.9rem"
            height="0.9rem"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            >
                <path
                d="M13.325 3.05011L8.66741 20.4323L10.5993 20.9499L15.2568 3.56775L13.325 3.05011Z"
                fill="currentColor"
                />
                <path
                d="M7.61197 18.3608L8.97136 16.9124L8.97086 16.8933L3.87657 12.1121L8.66699 7.00798L7.20868 5.63928L1.04956 12.2017L7.61197 18.3608Z"
                fill="currentColor"
                />
                <path
                d="M16.388 18.3608L15.0286 16.9124L15.0291 16.8933L20.1234 12.1121L15.333 7.00798L16.7913 5.63928L22.9504 12.2017L16.388 18.3608Z"
                fill="currentColor"
                />
            </svg>
            `,
            title: 'Code Block'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
            .${this.#defaultStyle.id}-button{
            }
            .${this.#defaultStyle.id}.css-gg-code-icon{
                zoom:120%;
            }
			.${this.toolHandler.defaultClass} {
                display: block;
                background-color: #e7e7e7;
                margin-inline: 0.5em;
                border: solid 1px #d1d1d1;
                border-radius: 4px;
                white-space: pre-wrap;
                font-family: monospace;
                box-shadow: 0px 0px 3px 0px #d1d1d1;
                padding: 0.5em 1em 0.5em 1em;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	parentLine;

	constructor(dataset){
		super(Code, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});
        /*
		super.connectedAfterOnlyOneCallback = () => {
			this.dataset.index = Code.toolHandler.connectedFriends.length;
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}else{
				nextLine.line.lookAtMe();
			}
		}

        super.disconnectedChildAfterCallback = () => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}
        }
        */
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Color.js":
/*!***********************************************!*\
  !*** ./view/js/handler/editor/tools/Color.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Color)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_Palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/Palette */ "./view/js/handler/editor/component/Palette.js");




class Color extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-color-style'
	});

	static palette;

	static{

		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-color';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'C',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Font Color'
        });

		this.palette = new _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"]({
            openPositionMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].OpenPositionMode.BUTTON, 
            openPosition : this.toolHandler.toolButton
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.palette.isConnected){
				this.palette.close();
			}else{
				this.palette.open();
			}
		}

		this.palette.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.palette.close();
		}

		super.outClickElementListener(this.palette.palette, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.palette.palette.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.palette.close();
			}
		})
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(Color, dataset);
		if( ! dataset && Object.entries(this.dataset).length == 0){
			this.dataset.rgba = Color.palette.r + ',' + Color.palette.g + ',' + Color.palette.b + ',' + Color.palette.a;
		}
		this.style.color = `rgba(${this.dataset.rgba})`;
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/FontFamily.js":
/*!****************************************************!*\
  !*** ./view/js/handler/editor/tools/FontFamily.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FontFamily)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_FontFamilyBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/FontFamilyBox */ "./view/js/handler/editor/component/FontFamilyBox.js");




class FontFamily extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

    static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-font-family-style'
	});

    static fontFamilyBox;

    static #fontList = [
        'Arial, Helvetica, Sans-Serif',
        'Arial Black, Gadget, Sans-Serif',
        'Comic Sans MS, Textile, Cursive',
        'Courier New, Courier, Monospace',
        'Georgia, Times New Roman, Times, Serif',
        'Impact, Charcoal, Sans-Serif',
        'Lucida Console, Monaco, Monospace',
        'Lucida Sans Unicode, Lucida Grande, Sans-Serif',
        'Palatino Linotype, Book Antiqua, Palatino, Serif',
        'Tahoma, Geneva, Sans-Serif',
        'Times New Roman, Times, Serif',
        'Trebuchet MS, Helvetica, Sans-Serif',
        'Verdana, Geneva, Sans-Serif',
        'MS Sans Serif, Geneva, Sans-Serif',
        'MS Serif, New York, Serif'
    ]
    static{
        
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-font-family';
		
        this.fontFamilyBox = new _component_FontFamilyBox__WEBPACK_IMPORTED_MODULE_2__["default"](this.#fontList);

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'F',
            className: `${this.#defaultStyle.id}-button`,
            title: 'Font Family'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.fontFamilyBox.fontFamilyBox.isConnected){
				this.fontFamilyBox.close();
			}else{
				this.fontFamilyBox.open().then(fontFamilyBoxContainer=>{
				    this.toolHandler.processingElementPosition(this.fontFamilyBox.fontFamilyBox);
                });
			}
		}

        this.fontFamilyBox.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.fontFamilyBox.close();
		}

        document.addEventListener("scroll", () => {
			if(this.fontFamilyBox.fontFamilyBox.isConnected){
				this.toolHandler.processingElementPosition(this.fontFamilyBox.fontFamilyBox);
			}
		});
        window.addEventListener('resize', (event) => {
            if(this.fontFamilyBox.fontFamilyBox.isConnected){
                this.fontFamilyBox.open().then(fontFamilyBoxContainer=>{
				    this.toolHandler.processingElementPosition(this.fontFamilyBox.fontFamilyBox);
                });
            }
		})

		super.outClickElementListener(this.fontFamilyBox.fontFamilyBox, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.fontFamilyBox.fontFamilyBox.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
                this.fontFamilyBox.close();
			}
		})
	}

    static createDefaultStyle(){
		this.#defaultStyle.textContent = `
            .${this.#defaultStyle.id}-button{
                font-size: 0.8rem;
            }
        `
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(FontFamily, dataset);
		if( ! dataset && Object.entries(this.dataset).length == 0){
            this.dataset.font_family = FontFamily.fontFamilyBox.selectedFont?.style.fontFamily;
        }
        this.style.fontFamily = this.dataset.font_family
    }
	
}


/***/ }),

/***/ "./view/js/handler/editor/tools/FontSize.js":
/*!**************************************************!*\
  !*** ./view/js/handler/editor/tools/FontSize.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FontSize)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_FontSizeBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/FontSizeBox */ "./view/js/handler/editor/component/FontSizeBox.js");




class FontSize extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

    static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-font-size-style'
	});

    static fontSizeBox;

    static{
        
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-font-size';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '↑↓',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Font Size'
        });

		this.fontSizeBox = new _component_FontSizeBox__WEBPACK_IMPORTED_MODULE_2__["default"]({min:1, max:50});

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.fontSizeBox.fontSizeBox.isConnected){
				this.fontSizeBox.close();
			}else{
				this.fontSizeBox.open().then(fontSizeBoxContainer=>{
				    this.toolHandler.processingElementPosition(this.fontSizeBox.fontSizeBox);
                });
			}
		}

        this.fontSizeBox.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.fontSizeBox.close();
		}

        document.addEventListener("scroll", () => {
			if(this.fontSizeBox.fontSizeBox.isConnected){
				this.toolHandler.processingElementPosition(this.fontSizeBox.fontSizeBox);
			}
		});
        window.addEventListener('resize', (event) => {
            if(this.fontSizeBox.fontSizeBox.isConnected){
                this.fontSizeBox.open().then(fontSizeBoxContainer=>{
				    this.toolHandler.processingElementPosition(this.fontSizeBox.fontSizeBox);
                });
            }
		})

		super.outClickElementListener(this.fontSizeBox.fontSizeBox, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.fontSizeBox.fontSizeBox.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.fontSizeBox.close();
			}
		})
	}

    static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(FontSize, dataset);
		if( ! dataset && Object.keys(this.dataset).length == 0){
            this.dataset.font_size = FontSize.fontSizeBox.selectedFont?.style.fontSize;
        }
        this.style.fontSize = this.dataset.font_size
    }
	
}


/***/ }),

/***/ "./view/js/handler/editor/tools/Hyperlink.js":
/*!***************************************************!*\
  !*** ./view/js/handler/editor/tools/Hyperlink.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Hyperlink)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_HyperlinkBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/HyperlinkBox */ "./view/js/handler/editor/component/HyperlinkBox.js");




class Hyperlink extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-link-style'
	});

    static hyperlinkBox;

	static{

		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-link';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            className: `${this.#defaultStyle.id}-button`,
			innerHTML: `
				<svg class="${this.#defaultStyle.id} css-gg-link-icon"
				width="0.9rem"
				height="0.9rem"
				viewBox="0 0 24 24"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
				>
					<path
						d="M14.8284 12L16.2426 13.4142L19.071 10.5858C20.6331 9.02365 20.6331 6.49099 19.071 4.9289C17.509 3.3668 14.9763 3.3668 13.4142 4.9289L10.5858 7.75732L12 9.17154L14.8284 6.34311C15.6095 5.56206 16.8758 5.56206 17.6568 6.34311C18.4379 7.12416 18.4379 8.39049 17.6568 9.17154L14.8284 12Z"
						fill="currentColor"
					/>
					<path
						d="M12 14.8285L13.4142 16.2427L10.5858 19.0711C9.02372 20.6332 6.49106 20.6332 4.92896 19.0711C3.36686 17.509 3.36686 14.9764 4.92896 13.4143L7.75739 10.5858L9.1716 12L6.34317 14.8285C5.56212 15.6095 5.56212 16.8758 6.34317 17.6569C7.12422 18.4379 8.39055 18.4379 9.1716 17.6569L12 14.8285Z"
						fill="currentColor"
					/>
					<path
						d="M14.8285 10.5857C15.219 10.1952 15.219 9.56199 14.8285 9.17147C14.4379 8.78094 13.8048 8.78094 13.4142 9.17147L9.1716 13.4141C8.78107 13.8046 8.78107 14.4378 9.1716 14.8283C9.56212 15.2188 10.1953 15.2188 10.5858 14.8283L14.8285 10.5857Z"
						fill="currentColor"
					/>
				</svg>
			`,
			title: 'Hyperlink'
        });
		
		this.hyperlinkBox = new _component_HyperlinkBox__WEBPACK_IMPORTED_MODULE_2__["default"]();
		
		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.hyperlinkBox.hyperlinkBox.isConnected){
				this.hyperlinkBox.close();
			}else{
				this.hyperlinkBox.open().then(()=>{
					this.toolHandler.processingElementPosition(this.hyperlinkBox.hyperlinkBox);
				});
			}
		}

		document.addEventListener("scroll", () => {
			if(this.hyperlinkBox.hyperlinkBox.isConnected){
				this.toolHandler.processingElementPosition(this.hyperlinkBox.hyperlinkBox);
			}
		});
        window.addEventListener('resize', (event) => {
            if(this.hyperlinkBox.hyperlinkBox.isConnected){
				this.toolHandler.processingElementPosition(this.hyperlinkBox.hyperlinkBox);
            }
		})

		this.hyperlinkBox.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.hyperlinkBox.close();
		}

		super.outClickElementListener(this.hyperlinkBox.hyperlinkBox, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.hyperlinkBox.hyperlinkBox.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.hyperlinkBox.close();
			}
		});
		

	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
			}
			.${this.#defaultStyle.id}.css-gg-link-icon{
				zoom:120%;
			}
			.${this.toolHandler.defaultClass} {
				color: -webkit-link;
				cursor: pointer;
				text-decoration: underline;
				display: grid;
			}
			.${this.toolHandler.defaultClass} > [data-hyperlink_child="${Hyperlink.toolHandler.defaultClass}-child"]{
				all: initial;
				display: inline-block;
				margin-left: 1em;
				padding-left: 1em;
				border-left: 5px solid #d7d7db;
				width: 95%;
				float: left;
			}
			.${this.toolHandler.defaultClass} > [data-hyperlink_child="${Hyperlink.toolHandler.defaultClass}-child"] > *{
				font-size: 14px;
			}
			.${this.toolHandler.defaultClass} > [data-hyperlink_child="${Hyperlink.toolHandler.defaultClass}-child"] img{
				max-width: 100%;
                height: auto;
                aspect-ratio: attr(width) / attr(height);
			}
			.${this.toolHandler.defaultClass}-preview-url{
				position: fixed;
				z-index: 9999;
				width: 50vw;
				height: 50vh;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	#aTag = Object.assign(document.createElement('a'), {
		target: '_blank'
	});

	/*
	#previewUrl = Object.assign(document.createElement('iframe'), {
		className: `${Hyperlink.toolHandler.defaultClass}-preview-url`,
		//referrerpolicy: 'origin',
		//allow: 'Permissions-Policy',
		//width: 100,
		//height: 100,
	});
	*/
	/*HyperlinkChild = class HyperlinkChild extends HTMLElement{
		constructor(){
			super();
			this.className = `${Hyperlink.toolHandler.defaultClass}-child`;
			this.attachShadow({ mode : 'open' });
			this.shadowRoot.append(Hyperlink.defaultStyle.cloneNode(true));
		}
	};*/

	//#hyperlinkChild;
	constructor(dataset){
		super(Hyperlink, dataset);
		/*
		if( ! window.customElements.get(`${Hyperlink.toolHandler.defaultClass}-child`)){
			window.customElements.define(`${Hyperlink.toolHandler.defaultClass}-child`, this.HyperlinkChild);
		}
		
		this.#hyperlinkChild = new this.HyperlinkChild();
		
		*/
		let getUrlMetadataPromise;

		if( ! dataset && Object.keys(this.dataset).length == 0){
			this.dataset.href = Hyperlink.hyperlinkBox.lastUrl;
			getUrlMetadataPromise = fetch(this.dataset.href, {
				mode: 'no-cors',
			}).then(response => {
				return response.text();
			}).then(htmlText => {
				let dom = new DOMParser().parseFromString(htmlText, 'text/html');
				this.dataset.title = dom.querySelector('meta[name="og:title"]')?.getAttribute('content') 
					|| dom.querySelector('meta[name="twitter:title"]')?.getAttribute('content')
					|| dom.querySelector('title')?.textContent
					|| '';

				this.dataset.description = dom.querySelector('meta[name="description"]')?.getAttribute('content') 
					|| dom.querySelector('meta[name="og:description"]')?.getAttribute('content') 
					|| dom.querySelector('meta[name="twitter:description"]')?.getAttribute('content')
					|| ''
	
				this.dataset.image = dom.querySelector('meta[name="og:image"]')?.getAttribute('content')
					|| dom.querySelector('meta[name="twitter:image"]')?.getAttribute('content')
					|| ''

	
				this.dataset.favicon = dom.querySelector('link[rel="icon"]')?.getAttribute('href') || '';

				this.dataset.siteName = new URL(this.dataset.href).hostname;
	
				let p = document.createElement('p')
				//this.parentEditor.createLine();
				//this.#hyperlinkChild.shadowRoot.append(line);
				//this.append(line);
				return p;
			}).catch(error=>{
				console.error(error);
				//this.style.color = 'red';
				//this.title = 'unknown site';
				return undefined
			});
        }else{
			getUrlMetadataPromise = Promise.resolve().then(()=>{
				//let line = this.parentEditor.createLine();
				//line.contenteditable = false;
				//this.#hyperlinkChild.shadowRoot.append(line);
				//this.append(line);
				//let p = document.createElement('p')
				//return p
			});
		}
		this.#aTag.href = this.dataset.href
		super.connectedAfterOnlyOneCallback = () => {
			getUrlMetadataPromise.then(p => {
				if(! p){
					p = this.querySelector(`[data-hyperlink_child="${Hyperlink.toolHandler.defaultClass}-child"]`);
					if( ! p){
						return;
					}
				}
				let title;
				if(this.dataset.title != ''){
					title = Object.assign(document.createElement('p'), {
						textContent: this.dataset.title
					})
					title.style.fontWeight = 'bold';
				}
				let description;
				if(this.dataset.description != ''){
					description = Object.assign(document.createElement('p'),{
						textContent: this.dataset.description
					})
				}
				let image;
				if(this.dataset.image != ''){
					image = Object.assign(document.createElement('p'),{
						innerHTML: `
							<img data-image src="${this.dataset.image}"/>
						`
					});
				}
				let favicon;
				if(this.dataset.favicon != ''){
					favicon = Object.assign(document.createElement('span'), {
						innerHTML: `
							<img data-favicon src="${this.dataset.favicon}" style="width: 1.1em; vertical-align: text-bottom;"/>
						`
					})
				}
				let siteName = Object.assign(document.createElement('span'), {
					textContent: this.dataset.siteName
				});
				siteName.style.fontSize = '12px';
				siteName.style.fontWeight = 'bold';
				//this.#hyperlinkChild.shadowRoot.append(line);
				this.append(p);
				p.dataset.hyperlink_child = `${Hyperlink.toolHandler.defaultClass}-child`;
				p.contenteditable = false;
				p.replaceChildren(...[
					favicon, siteName,
					title,
					description,
					image
				].filter(e=>e!=undefined))

				this.onclick = (event) => {
					if( ! event.composedPath().some(e=>e==p)){
						this.#aTag.click();
					}
				}
			}) 
		}


		/*
		this.onmouseenter = () => {
			if(this.#previewUrl.src != this.dataset.href){
				this.#previewUrl.src = this.dataset.href;
			}
			if( ! this.#previewUrl.isConnected){
				document.body.append(this.#previewUrl);
				//this.append(this.#previewUrl);
			}
			Hyperlink.toolHandler.processingElementPosition(this.#previewUrl, this);
		}		

		FreedomInterface.outClickElementListener(this.#previewUrl, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.#previewUrl.isConnected && ! FreedomInterface.isMouseInnerElement(this)){
				this.#previewUrl.remove();
			}
		})
		document.addEventListener("scroll", () => {
			if(this.#previewUrl.isConnected){
				Hyperlink.toolHandler.processingElementPosition(this.#previewUrl, this);
			}
		});
		window.addEventListener('resize', (event) => {
			if(this.#previewUrl.isConnected){
				Hyperlink.toolHandler.processingElementPosition(this.#previewUrl, this);
			}
		})
		*/
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Image.js":
/*!***********************************************!*\
  !*** ./view/js/handler/editor/tools/Image.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_ImageBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/ImageBox */ "./view/js/handler/editor/component/ImageBox.js");



class Image extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

    static imageBox = new _component_ImageBox__WEBPACK_IMPORTED_MODULE_2__["default"]();

    static customImageCallback; 

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-image-style'
	});

    static slotName = 'free-will-editor-image-description-slot';

    static #selectedFile = Object.assign(document.createElement('input'), {
        type: 'file',
        accept: 'image/*',
        capture: 'camera',
    });

    static get selectedFile(){
        return this.#selectedFile;
    }

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-image';
        //this.toolHandler.isInline = false;

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '',
            className: `${this.#defaultStyle.id}-button`,
            innerHTML: `
            <svg class="${this.#defaultStyle.id} css-gg-image-icon"
                width="0.9rem"
                height="0.9rem"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                >
                <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M7 7C5.34315 7 4 8.34315 4 10C4 11.6569 5.34315 13 7 13C8.65685 13 10 11.6569 10 10C10 8.34315 8.65685 7 7 7ZM6 10C6 9.44772 6.44772 9 7 9C7.55228 9 8 9.44772 8 10C8 10.5523 7.55228 11 7 11C6.44772 11 6 10.5523 6 10Z"
                    fill="currentColor"
                />
                <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M3 3C1.34315 3 0 4.34315 0 6V18C0 19.6569 1.34315 21 3 21H21C22.6569 21 24 19.6569 24 18V6C24 4.34315 22.6569 3 21 3H3ZM21 5H3C2.44772 5 2 5.44772 2 6V18C2 18.5523 2.44772 19 3 19H7.31374L14.1924 12.1214C15.364 10.9498 17.2635 10.9498 18.435 12.1214L22 15.6863V6C22 5.44772 21.5523 5 21 5ZM21 19H10.1422L15.6066 13.5356C15.9971 13.145 16.6303 13.145 17.0208 13.5356L21.907 18.4217C21.7479 18.7633 21.4016 19 21 19Z"
                    fill="currentColor"
                />
            </svg>
            `,
            title: 'Image'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
                this.#selectedFile.click();
                this.#selectedFile.onchange = ()=> {
                    //let url = URL.createObjectURL(this.#selectedFile.files[0])
                    this.toolHandler.toolButton.dataset.tool_status = 'active';
                }
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
            .${this.toolHandler.defaultClass} {
                position: relative;
            }
            .${this.#defaultStyle.id}.css-gg-image-icon {
                zoom:120%;
            }
            .${this.#defaultStyle.id}.image-description{            
                cursor: pointer;
                display: inline-flex;
                align-items: center;
            }

            .${this.#defaultStyle.id}.image-description::after{
                margin-left: 0.5em;
                content: ' ['attr(data-file_name)'] 'attr(data-open_status);
                font-size: small;
                color: #bdbdbd;
            }

            .${this.#defaultStyle.id}.image-contanier{
                width: fit-content;
                transition: height 0.5s ease-in-out;
                overflow: hidden;
                position: relative;
            }
            .${this.#defaultStyle.id}.image-contanier img{
                max-width: 100%;
                height: auto;
                aspect-ratio: attr(width) / attr(height);
                image-rendering: crisp-edges;
                image-rendering: -webkit-optimize-contrast;
            }
        ` 
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

    #file;

    imgLoadEndCallback = (event) => {};

    image = document.createElement('img');

	constructor(dataset){
		super(Image, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});
        
        if( ! dataset && Object.keys(this.dataset).length == 0){
            this.#file = Image.selectedFile.cloneNode(true);
            Image.selectedFile.files = new DataTransfer().files;
            
            this.dataset.url = URL.createObjectURL(this.#file.files[0]);
            this.dataset.name = this.#file.files[0].name;
            this.dataset.last_modified = this.#file.files[0].lastModified;
            this.dataset.size = this.#file.files[0].size;
            this.dataset.content_type = this.#file.files[0].type;

            let url = URL.createObjectURL(this.#file.files[0], this.dataset.content_type);
            this.dataset.url = url;
            this.image.type = this.dataset.content_type;
            this.image.src = this.dataset.url;
            /*fetch(this.dataset.url).then(res=>res.blob()).then(blob => {
                const reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = () => {
                    this.dataset.base64 = reader.result;
                }
            })*/
            
        }else if(( ! this.dataset.url || this.dataset.url.startsWith('blob:file')) && this.dataset.base64){
            fetch(this.dataset.base64)
            .then(async res=>{
                return res.blob().then(blob=>{
                    let imgUrl = URL.createObjectURL(blob, res.headers.get('Content-Type'))
                    this.dataset.url = imgUrl;
                    this.image.src = this.dataset.url;
                })
            })
        }else if(Image.customImageCallback && typeof Image.customImageCallback == 'function'){
            Image.customImageCallback(this);
        }else if(this.dataset.url){
            this.image.src = this.dataset.url;
        }

        if(! this.dataset.name){
            this.remove();
            throw new Error(`this file is undefined ${this.dataset.name}`);
        }
        
        this.attachShadow({ mode : 'open' });
        this.shadowRoot.append(Image.defaultStyle.cloneNode(true));
        
        this.createDefaultContent().then(({wrap, description, slot, aticle})=>{
            this.connectedChildAfterCallback = (addedList) => {
                aticle.append(...addedList);
            }
        });
        
        this.disconnectedAfterCallback = () => {
            if(this.dataset.url.startsWith('blob:file')){
                setTimeout(() => {
                    URL.revokeObjectURL(this.dataset.url);
                }, 1000 * 60 * 2)
            }
        }
	}

    createDefaultContent(){
        return new Promise(resolve=>{
            let wrap = Object.assign(document.createElement('div'),{

            });
            wrap.draggable = false

            this.shadowRoot.append(wrap);

            let imageContanier = Object.assign(document.createElement('div'),{
                className: `${Image.defaultStyle.id} image-contanier`
            });

            /*let image = Object.assign(document.createElement('img'), {
                //src :`https://developer.mozilla.org/pimg/aHR0cHM6Ly9zLnprY2RuLm5ldC9BZHZlcnRpc2Vycy9iMGQ2NDQyZTkyYWM0ZDlhYjkwODFlMDRiYjZiY2YwOS5wbmc%3D.PJLnFds93tY9Ie%2BJ%2BaukmmFGR%2FvKdGU54UJJ27KTYSw%3D`
                //src: this.dataset.url
                //src: imgUrl
            });*/

            //if(this.#selectedFile.files.length != 0){
            this.image.dataset.image_name = this.dataset.name
            //}

            imageContanier.append(this.image);

            this.image.onload = () => {
                if(this.dataset.width){
                    this.image.width = this.dataset.width;
                }
                /*let applyToolAfterSelection = window.getSelection(), range = applyToolAfterSelection.getRangeAt(0);
                let scrollTarget;
                if(range.endContainer.nodeType == Node.TEXT_NODE){
                    scrollTarget = range.endContainer.parentElement
                }else{
                    scrollTarget = range.endContainer;
                }
                scrollTarget.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
                */
            //this.imgLoadEndCallback();
                //imageContanier.style.height = window.getComputedStyle(image).height;
            }
            this.image.onerror = () => {
                //imageContanier.style.height = window.getComputedStyle(image).height;
                this.image.dataset.error = '';
            }

            let {description, slot, aticle} = this.createDescription(this.image, imageContanier);

            this.connectedAfterOnlyOneCallback = () => {
                if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
                    aticle.append(...[...this.childNodes].filter(e=>e!=aticle));
                }
                wrap.replaceChildren(...[description,imageContanier].filter(e=>e != undefined));
                
                Image.imageBox.addImageHoverEvent(this.image, this);
                if(this.nextSibling?.tagName == 'BR'){
                    this.nextSibling.remove()
                }

                resolve({wrap, description, slot, aticle})
            }
        })
    }

    /**
     * 
     * @param {HTMLImageElement} image 
     * @param {HTMLDivElement} imageContanier 
     * @returns {HTMLDivElement}
     */
    createDescription(image, imageContanier){
        let description = Object.assign(document.createElement('div'),{
            className: `${Image.defaultStyle.id} image-description`
        });

        description.dataset.file_name = this.dataset.name
        description.dataset.open_status = this.dataset.open_status || '▼'; // '▼';
        imageContanier.style.height = this.dataset.height || 'auto'
        
        let {slot, aticle} = this.createSlot();
        
        description.append(slot)

        description.onclick = (event) => {
            if(description.dataset.open_status == '▼'){
                description.dataset.open_status = '▶'
                imageContanier.style.height = window.getComputedStyle(image).height;
                setTimeout(()=>{
                    imageContanier.style.height = '0px';
                    this.dataset.height = '0px';
                },100)

            }else{
                description.dataset.open_status = '▼';
                setTimeout(()=>{
                    imageContanier.style.height = window.getComputedStyle(image).height;
                    this.dataset.height = 'auto'
                },100)
                
                image.style.opacity = '';
                image.style.visibility = '';
            }
            this.dataset.open_status = description.dataset.open_status;
        }

        imageContanier.ontransitionend = () => {
            if(description.dataset.open_status == '▼'){
                imageContanier.style.height = 'auto';
            }else{
                image.style.opacity = 0;
                image.style.visibility = 'hidden';
            }
        }

        return {description, slot, aticle};
    }

    /**
     * 
     * @returns {HTMLSlotElement}
     */
    createSlot(){
        let aticle = document.createElement('div');
        
        aticle.contentEditable = 'false';
        aticle.draggable = 'false'; 

        //if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
            let randomId = Array.from(
                window.crypto.getRandomValues(new Uint32Array(16)),
                (e)=>e.toString(32).padStart(2, '0')
            ).join('');
            //aticle.append(...[...this.childNodes].map(e=>e.cloneNode(true)));
            aticle.append(...this.childNodes);
            aticle.slot = Image.slotName + '-' + randomId
            this.append(aticle);
            
            let slot = Object.assign(document.createElement('slot'),{
                name: Image.slotName + '-' + randomId
            });
            return {slot, aticle};
        //}else{
        //    return undefined
        //}

    }
    /**
     * @returns {HTMLInputElement}
     */
    get selectedFile(){
        return this.#file
    }
}


/***/ }),

/***/ "./view/js/handler/editor/tools/Italic.js":
/*!************************************************!*\
  !*** ./view/js/handler/editor/tools/Italic.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Italic)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");


class Italic extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-italic-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-italic';

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'I',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Italic'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-style: italic;
				font-size: 0.8rem;
			}

			.${this.toolHandler.defaultClass} {
				font-style: italic;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}
	
	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}


	constructor(dataset){
		super(Italic, dataset);
	}

	
}


/***/ }),

/***/ "./view/js/handler/editor/tools/NumericPoint.js":
/*!******************************************************!*\
  !*** ./view/js/handler/editor/tools/NumericPoint.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NumericPoint)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");



class NumericPoint extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	//static extendsElement = 'strong';
	//static defaultClass = 'line';
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);
	
	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-numeric-point-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-numeric-point';
		this.toolHandler.isInline = false;

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '1.',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Numeric Point'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}
    //list-style-type: disc;
	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
			.${this.toolHandler.defaultClass} {
				display: block;
				margin-inline: 1.3em;
				list-style-type: none;
			}
			.${this.toolHandler.defaultClass} > * {
				list-style-type: decimal;
				display: list-item;
				margin-inline: 1.3em;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}
	
	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	parentLine;
	
	constructor(dataset){
		super(NumericPoint, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});
		super.connectedChildAfterCallback = (list) => {
			let lastItem = list.at(-1);
			if(lastItem.nodeType == Node.ELEMENT_NODE){
				let inter = setInterval(()=>{
					if(lastItem.isConnected){
						clearInterval(inter);
						window.getSelection().setPosition(lastItem, lastItem.childNodes.length)
					}
				}, 50);
			}else if(lastItem.nodeType == Node.TEXT_NODE){
				let inter = setInterval(()=>{
					if(lastItem.isConnected){
						clearInterval(inter);
						window.getSelection().setPosition(lastItem, lastItem.length)
					}
				}, 50);
			}
		}
		/*
		super.connectedAfterOnlyOneCallback = () => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}else{
				nextLine.line.lookAtMe();
			}
		}
		/*
		super.disconnectedChildAfterCallback = (removedNodes) => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}
        }
		*/
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Quote.js":
/*!***********************************************!*\
  !*** ./view/js/handler/editor/tools/Quote.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Quote)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");



class Quote extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	//static extendsElement = 'strong';
	//static defaultClass = 'line';
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-quote-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-quote';
		this.toolHandler.isInline = false;

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'Q',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Quote'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
			.${this.toolHandler.defaultClass} {
				display: block;
				padding-left: 1em;
				border-left: 3px solid #d7d7db;
				margin-inline: 2.5em;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	parentLine;

	constructor(dataset){
		super(Quote, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});

		/*
		super.connectedAfterOnlyOneCallback = () => {
			this.dataset.index = Quote.toolHandler.connectedFriends.length;
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}else{
				nextLine.line.lookAtMe();
			}
		}

        super.disconnectedChildAfterCallback = () => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}
        }
		*/
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Resources.js":
/*!***************************************************!*\
  !*** ./view/js/handler/editor/tools/Resources.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Resources)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");



class Resources extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

    static customResourcesCallback; 

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-resources-style'
	});

    static slotName = 'free-will-editor-resources-description-slot';

    static #selectedFile = Object.assign(document.createElement('input'), {
        type: 'file'
    });

    static get selectedFile(){
        return this.#selectedFile;
    }

    static #uploadCallback;

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-resources';
        //this.toolHandler.isInline = false;

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '',
            className: `${this.#defaultStyle.id}-button`,
            innerHTML: `
            <svg class="${this.#defaultStyle.id} css-gg-file-add-icon" width="0.9rem" height="0.9rem" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 18V16H8V14H10V12H12V14H14V16H12V18H10Z" fill="currentColor" />
                <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M6 2C4.34315 2 3 3.34315 3 5V19C3 20.6569 4.34315 22 6 22H18C19.6569 22 21 20.6569 21 19V9C21 5.13401 17.866 2 14 2H6ZM6 4H13V9H19V19C19 19.5523 18.5523 20 18 20H6C5.44772 20 5 19.5523 5 19V5C5 4.44772 5.44772 4 6 4ZM15 4.10002C16.6113 4.4271 17.9413 5.52906 18.584 7H15V4.10002Z"
                    fill="currentColor"
                />
            </svg>
            `,
            title: 'Resources'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
                this.#selectedFile.click();
                this.#selectedFile.onchange = ()=> {
                    //let url = URL.createObjectURL(this.#selectedFile.files[0])

                    this.toolHandler.toolButton.dataset.tool_status = 'active';
                }
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
            .${this.toolHandler.defaultClass} {
                position: relative;
            }
            .${this.#defaultStyle.id}.css-gg-file-add-icon {
                zoom:120%;
            }
            .${this.#defaultStyle.id}.resources-description{            
                cursor: pointer;
                display: inline-flex;
                align-items: center;
            }

            .${this.#defaultStyle.id}.resources-description::after{
                margin-left: 0.5em;
                content: ' ['attr(data-file_name)'] 'attr(data-open_status);
                font-size: small;
                color: #bdbdbd;
            }
            .${this.#defaultStyle.id}.resources-download-button{
                margin-left: 1vw;
                border: solid 2px #e5e5e5;
                cursor: pointer;
                background: none;
            }
            .${this.#defaultStyle.id}.resources-contanier{
                width: auto;
                transition: height 0.5s ease-in-out;
                overflow: hidden;
                position: relative;
                margin-top: 0.7vh;
            }
            .${this.#defaultStyle.id}.resources-contanier object{
                width: 99%;
                height: auto;
                aspect-ratio: attr(width) / attr(height);
                border: solid 2px #efefef;
            }
            .${this.#defaultStyle.id}.resources-contanier object.unload{
                width: auto;
            }

        ` 
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

    static set uploadCallback(callback){
        this.#uploadCallback = callback;
    }
    static get uploadCallback(){
        return this.#uploadCallback;
    }

    #file;
    
    imgLoadEndCallback = (event) => {};

    resources = Object.assign(document.createElement('object'), {

    });

	constructor(dataset){
		super(Resources, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});
        
        if( ! dataset && Object.keys(this.dataset).length == 0){
            this.#file = Resources.selectedFile.cloneNode(true);
            Resources.selectedFile.files = new DataTransfer().files;

            this.dataset.url = URL.createObjectURL(this.#file.files[0]);
            this.dataset.name = this.#file.files[0].name;
            this.dataset.last_modified = this.#file.files[0].lastModified;
            this.dataset.size = this.#file.files[0].size;
            this.dataset.content_type = this.#file.files[0].type;

            let url = URL.createObjectURL(this.#file.files[0], this.dataset.content_type);
            this.dataset.url = url;
            /*fetch(this.dataset.url).then(res=>res.blob()).then(blob => {
                const reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = () => {
                    this.dataset.base64 = reader.result;
                }
            })*/
           
        }else if(( ! this.dataset.url || this.dataset.url.startsWith('blob:file')) && this.dataset.base64){
            /*
            fetch(this.dataset.base64)
            .then(async res=>{
                return res.blob().then(blob=>{
                    let imgUrl = URL.createObjectURL(blob, res.headers.get('Content-Type'))
                    this.dataset.url = imgUrl;
                    this.resources.data = this.dataset.url;
                })
            })*/
        }else if(Resources.customResourcesCallback && typeof Resources.customResourcesCallback == 'function'){
            Resources.customResourcesCallback(this);
        }else if(this.dataset.url){
        }
        this.resources.type = this.dataset.content_type;
        this.resources.data = this.dataset.url;
        this.resources.dataset.resources_name = this.dataset.name
        console.log(this.#file);
        if(! this.dataset.name){
            this.remove();
            throw new Error(`this file is undefined ${this.dataset.name}`);
        }
        
        this.attachShadow({ mode : 'open' });
        this.shadowRoot.append(Resources.defaultStyle.cloneNode(true));
        
        this.createDefaultContent().then(({wrap, description, slot, aticle})=>{
            this.connectedChildAfterCallback = (addedList) => {
                aticle.append(...addedList);
            }
        });
        
        this.disconnectedAfterCallback = () => {
            if(this.dataset.url.startsWith('blob:file')){
                setTimeout(() => {
                    URL.revokeObjectURL(this.dataset.url);
                }, 1000 * 60 * 2)
            }
        }

	}

    createDefaultContent(){
        return new Promise(resolve => {
            let wrap = Object.assign(document.createElement('div'),{

            });
            wrap.draggable = false

            this.shadowRoot.append(wrap);

            let resourcesContanier = Object.assign(document.createElement('div'),{
                className: `${Resources.defaultStyle.id} resources-contanier`
            });

            /*let resources = Object.assign(document.createElement('img'), {
                //src :`https://developer.mozilla.org/pimg/aHR0cHM6Ly9zLnprY2RuLm5ldC9BZHZlcnRpc2Vycy9iMGQ2NDQyZTkyYWM0ZDlhYjkwODFlMDRiYjZiY2YwOS5wbmc%3D.PJLnFds93tY9Ie%2BJ%2BaukmmFGR%2FvKdGU54UJJ27KTYSw%3D`
                //src: this.dataset.url
                //src: imgUrl
            });*/

            //if(this.file.files.length != 0){

            //}

            resourcesContanier.append(this.resources);

            this.resources.onload = (event) => {
                if(this.dataset.width){
                    this.resources.width = this.dataset.width;
                }
                //console.log(this.resources.contentWindow);
                if( ! this.resources.contentWindow){
                    this.resources.classList.add('unload')
                }
                /*let applyToolAfterSelection = window.getSelection(), range = applyToolAfterSelection.getRangeAt(0);
                let scrollTarget;
                if(range.endContainer.nodeType == Node.TEXT_NODE){
                    scrollTarget = range.endContainer.parentElement
                }else{
                    scrollTarget = range.endContainer;
                }
                scrollTarget.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
                */
            //this.imgLoadEndCallback();
                //resourcesContanier.style.height = window.getComputedStyle(resources).height;
            }
            this.resources.onerror = (event) => {
                //console.log(event);
                //resourcesContanier.style.height = window.getComputedStyle(resources).height;
                this.resources.dataset.error = '';
                if( ! this.resources.contentWindow){
                    this.resources.classList.add('unload')
                }
            }

            let {description, slot, aticle} = this.createDescription(this.resources, resourcesContanier);
            let downloadButton = Object.assign(document.createElement('button'), {
                className: `${Resources.defaultStyle.id} resources-download-button`,
                innerHTML : `<b>Download</b>`,
                onclick : () => {
                    fetch(this.dataset.url).then(res=>res.blob()).then(blob => {
                        let url = URL.createObjectURL(blob, this.dataset.content_type);
                        let a = document.createElement('a');
                        a.href = url;
                        a.download = this.dataset.name;
                        a.click();
                        a.remove();
                        setTimeout(() => {
                            URL.revokeObjectURL(url);
                        }, 1000 * 60 * 5)
                    })
                }
            });

            this.connectedAfterOnlyOneCallback = () => {
                if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
                    aticle.append(...[...this.childNodes].filter(e=>e!=aticle));
                }
                wrap.replaceChildren(...[description,downloadButton,resourcesContanier].filter(e=>e != undefined));
                
                if(this.nextSibling?.tagName == 'BR'){
                    this.nextSibling.remove()
                }

                resolve({wrap, description, slot, aticle})
            }
        })
    }

    /**
     * 
     * @param {HTMLObjectElement} resources 
     * @param {HTMLDivElement} resourcesContanier 
     * @returns 
     */
    createDescription(resources, resourcesContanier){
        let description = Object.assign(document.createElement('div'),{
            className: `${Resources.defaultStyle.id} resources-description`
        });

        description.dataset.file_name = this.dataset.name
        description.dataset.open_status = this.dataset.open_status || '▼'
        resourcesContanier.style.height = this.dataset.height || 'auto'
        
        description.dataset.open_status = '▼';
        
        let {slot, aticle} = this.createSlot();
        
        description.append(slot)

        description.onclick = (event) => {
            /*if(event.composedPath().some(e=> e== downloadButton)){
                return;
            }*/
            if(description.dataset.open_status == '▼'){
                description.dataset.open_status = '▶'
                resourcesContanier.style.height = window.getComputedStyle(resources).height;
                setTimeout(()=>{
                    resourcesContanier.style.height = '0px';
                    this.dataset.height = '0px';
                },100)

            }else{
                description.dataset.open_status = '▼';
                setTimeout(()=>{
                    resourcesContanier.style.height = window.getComputedStyle(resources).height;
                    this.dataset.height = 'auto';
                },100)
                
                resources.style.opacity = '';
                resources.style.visibility = '';

            }
            this.dataset.open_status = description.dataset.open_status;
        }

        resourcesContanier.ontransitionend = () => {
            if(description.dataset.open_status == '▼'){
                resourcesContanier.style.height = 'auto';
            }else{
                resources.style.opacity = 0;
                resources.style.visibility = 'hidden';
            }
        }

        return {description, slot, aticle};
    }

    /**
     * 
     * @returns {HTMLSlotElement}
     */
    createSlot(){
        let aticle = document.createElement('div');
        
        aticle.contentEditable = 'false';
        aticle.draggable = 'false'; 

        //if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
            let randomId = Array.from(
                window.crypto.getRandomValues(new Uint32Array(16)),
                (e)=>e.toString(32).padStart(2, '0')
            ).join('');
            //aticle.append(...[...this.childNodes].map(e=>e.cloneNode(true)));
            aticle.append(...this.childNodes);
            aticle.slot = Resources.slotName + '-' + randomId
            this.append(aticle);
            
            let slot = Object.assign(document.createElement('slot'),{
                name: Resources.slotName + '-' + randomId
            });
            return {slot, aticle};
        //}else{
        //   return undefined
        //}

    }
    /**
     * @returns {HTMLInputElement}
     */
    get selectedFile(){
        return this.#file
    }
    
    /*(set resourcesChange(url){
        let newResources
        this.resources.dataset.resources_name = this.dataset.name
        this.resources.type = this.dataset.content_type
        this.resources.data = url
    }*/
}


/***/ }),

/***/ "./view/js/handler/editor/tools/Sort.js":
/*!**********************************************!*\
  !*** ./view/js/handler/editor/tools/Sort.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Sort)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_SortBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/SortBox */ "./view/js/handler/editor/component/SortBox.js");




class Sort extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);
	
	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-index-style'
	});

    static sortBox; 

    static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-index';
		this.toolHandler.isInline = false;

        this.sortBox = new _component_SortBox__WEBPACK_IMPORTED_MODULE_2__["default"]();

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'Ξ',
            className: `${this.#defaultStyle.id}-button`,
			title: 'align'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.sortBox.sortBox.isConnected){
				this.sortBox.close();
			}else{
				this.sortBox.open();
                this.toolHandler.processingElementPosition(this.sortBox.sortBox);
			}
		}

        this.sortBox.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.sortBox.close();
		}

        document.addEventListener("scroll", () => {
			if(this.sortBox.sortBox.isConnected){
				this.toolHandler.processingPalettePosition(this.sortBox.sortBox);
			}
		});
        window.addEventListener('resize', (event) => {
            if(this.sortBox.sortBox.isConnected){
                this.sortBox.open();
                this.toolHandler.processingElementPosition(this.sortBox.sortBox);
            }
		})

		super.outClickElementListener(this.sortBox.sortBox, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.sortBox.sortBox.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.sortBox.close();
			}
		})
	}
    static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}

            .${this.toolHandler.defaultClass} {
                display: block;
            }
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(Sort, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});

		if( ! dataset && Object.entries(this.dataset).length == 0){
            this.dataset.text_align = Sort.sortBox.selectedSort?.textContent;
        }
        this.style.textAlign = this.dataset.text_align;

		super.connectedAfterOnlyOneCallback = () => {
			this.dataset.index = Sort.toolHandler.connectedFriends.length;
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}else{
				nextLine.line.lookAtMe();
			}
		}

		super.disconnectedChildAfterCallback = (removedNodes) => {
			let nextLine = this.parentEditor.getNextLine(this.parentLine);
			if( ! nextLine){
				this.parentEditor.createLine();
			}
        }

	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Strikethrough.js":
/*!*******************************************************!*\
  !*** ./view/js/handler/editor/tools/Strikethrough.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Strikethrough)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_Palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/Palette */ "./view/js/handler/editor/component/Palette.js");




class Strikethrough extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-strikethrough-style'
	});

    static palette;
	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-strikethrough';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'S',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Strikethrough'
        });

		this.palette = new _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"]({
            openPositionMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].OpenPositionMode.BUTTON, 
            openPosition: this.toolHandler.toolButton,
			exampleMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].ExampleMode.TEXT_LINE_THROUGH
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.palette.isConnected){
				this.palette.close();
			}else{
				this.palette.open();
			}
		}

		this.palette.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.palette.close();
		}

		super.outClickElementListener(this.palette.palette, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.palette.palette.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.palette.close();
			}
		})
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
				text-decoration: 1px line-through;
				text-decoration-color: #404040;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset){
		super(Strikethrough, dataset);
		if( ! dataset && Object.entries(this.dataset).length == 0){
			this.dataset.rgba = Strikethrough.palette.r + ',' + Strikethrough.palette.g + ',' + Strikethrough.palette.b + ',' + Strikethrough.palette.a;
		}

		this.style.textDecoration = `line-through rgba(${this.dataset.rgba}) 1px`;
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Strong.js":
/*!************************************************!*\
  !*** ./view/js/handler/editor/tools/Strong.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Strong)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");


class Strong extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-strong-style'
	});

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-strong';

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'B',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Bold'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
				this.toolHandler.toolButton.dataset.tool_status = 'active';
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
			}
			.${this.toolHandler.defaultClass} {
				font-weight: bold;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset, {isDefaultStyle = true} = {}){
		super(Strong, dataset);
	}
	
}


/***/ }),

/***/ "./view/js/handler/editor/tools/Underline.js":
/*!***************************************************!*\
  !*** ./view/js/handler/editor/tools/Underline.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Underline)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_Palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/Palette */ "./view/js/handler/editor/component/Palette.js");




class Underline extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {
	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-underline-style'
	});

	static palette;

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-underline';
		
		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: 'U',
            className: `${this.#defaultStyle.id}-button`,
			title: 'Underline'
        });

		this.palette = new _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"]({
            openPositionMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].OpenPositionMode.BUTTON, 
            openPosition: this.toolHandler.toolButton,
			exampleMode: _component_Palette__WEBPACK_IMPORTED_MODULE_2__["default"].ExampleMode.TEXT_UNDERLINE
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else if(this.palette.isConnected){
				this.palette.close();
			}else{
				this.palette.open();
			}
		}

		this.palette.applyCallback = (event) => {
			this.toolHandler.toolButton.dataset.tool_status = 'active'
			this.palette.close();
		}

		super.outClickElementListener(this.palette.palette, ({oldEvent, newEvent, isMouseOut})=>{
			if(isMouseOut && this.palette.palette.isConnected && ! super.isMouseInnerElement(this.toolHandler.toolButton)){
				this.palette.close();
			}
		})
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
			.${this.#defaultStyle.id}-button{
				font-size: 0.8rem;
				text-decoration: 1px underline;
			}
			.${this.toolHandler.defaultClass} {
				width: fit-content;
			}
		`
		let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

	static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}

	constructor(dataset, {isDefaultStyle = true} = {}){
		super(Underline, dataset);
		if( ! dataset && Object.entries(this.dataset).length == 0){
			this.dataset.rgba = Underline.palette.r + ',' + Underline.palette.g + ',' + Underline.palette.b + ',' + Underline.palette.a;
		}
		this.style.borderBottom = `solid 2px rgba(${this.dataset.rgba})`
		//this.style.backgroundImage = `linear-gradient(to right, rgba(${this.dataset.rgba}), rgba(${this.dataset.rgba}))`
		//this.style.textDecoration = `underline rgba(${this.dataset.rgba}) 1px`;
	}

}

/***/ }),

/***/ "./view/js/handler/editor/tools/Video.js":
/*!***********************************************!*\
  !*** ./view/js/handler/editor/tools/Video.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Video)
/* harmony export */ });
/* harmony import */ var _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../module/FreedomInterface */ "./view/js/handler/editor/module/FreedomInterface.js");
/* harmony import */ var _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../module/ToolHandler */ "./view/js/handler/editor/module/ToolHandler.js");
/* harmony import */ var _component_VideoBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/VideoBox */ "./view/js/handler/editor/component/VideoBox.js");



class Video extends _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"] {

	static toolHandler = new _module_ToolHandler__WEBPACK_IMPORTED_MODULE_1__["default"](this);

    static videoBox = new _component_VideoBox__WEBPACK_IMPORTED_MODULE_2__["default"]();

    static customVideoCallback;

	static #defaultStyle = Object.assign(document.createElement('style'), {
		id: 'free-will-editor-video-style'
	});

    static descriptionName = 'free-will-editor-video-description-slot';

    static #selectedFile = Object.assign(document.createElement('input'), {
        type: 'file',
        accept: 'video/*',
        capture: 'camera',
    });

    static get selectedFile(){
        return this.#selectedFile;
    }

	static{
		this.toolHandler.extendsElement = '';
		this.toolHandler.defaultClass = 'free-will-editor-video';

		this.toolHandler.toolButton = Object.assign(document.createElement('button'), {
            textContent: '',
            className: `${this.#defaultStyle.id}-button`,
            innerHTML: `
            <svg class="${this.#defaultStyle.id} css-gg-video-icon"
            width="0.9rem"
            height="0.9rem"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M4 4.5V6.5H12V7.5H3C1.34315 7.5 0 8.84315 0 10.5V16.5C0 18.1569 1.34315 19.5 3 19.5H15C16.5731 19.5 17.8634 18.2892 17.9898 16.7487L24 17.5V9.5L17.9898 10.2513C17.8634 8.71078 16.5731 7.5 15 7.5H14V5.5C14 4.94772 13.5523 4.5 13 4.5H4ZM18 12.2656V14.7344L22 15.2344V11.7656L18 12.2656ZM16 10.5C16 9.94772 15.5523 9.5 15 9.5H3C2.44772 9.5 2 9.94772 2 10.5V16.5C2 17.0523 2.44772 17.5 3 17.5H15C15.5523 17.5 16 17.0523 16 16.5V10.5Z"
                    fill="currentColor"
                />
            </svg>
            `,
            title: 'Video'
        });

		this.toolHandler.toolButton.onclick = ()=>{
			if(this.toolHandler.toolButton.dataset.tool_status == 'active' || this.toolHandler.toolButton.dataset.tool_status == 'connected'){
				this.toolHandler.toolButton.dataset.tool_status = 'cancel';
			}else{
                this.#selectedFile.onchange = ()=> {
                    //let url = URL.createObjectURL(this.#selectedFile.files[0])
                    this.toolHandler.toolButton.dataset.tool_status = 'active';
                }
                this.#selectedFile.click();
			}
		}
	}

	static createDefaultStyle(){
		this.#defaultStyle.textContent = `
            .${this.toolHandler.defaultClass} {
                position: relative;
            }
            .${this.#defaultStyle.id}.css-gg-video-icon {
                zoom:120%;
            }
            .${this.#defaultStyle.id}.video-description{            
                cursor: pointer;
                display: inline-flex;
                align-items: center;
            }
            .${this.#defaultStyle.id}.video-description::after{
                margin-left: 0.5em;
                content: ' ['attr(data-file_name)'] 'attr(data-open_status);
                font-size: small;
                color: #bdbdbd;
            }

            .${this.#defaultStyle.id}.video-contanier{
                width: fit-content;
                transition: height 0.5s ease-in-out;
                overflow: hidden;
                position: relative;
            }
            .${this.#defaultStyle.id}.video-contanier video{
                max-width: 100%;
                height: auto;
                aspect-ratio: attr(width) / attr(height);
            }
        `
        let defaultStyle = document.querySelector(`#${this.#defaultStyle.id}`);
        if(! defaultStyle){
            document.head.append(this.#defaultStyle);
        }else{
            this.#defaultStyle?.remove();
            this.#defaultStyle = defaultStyle;
            document.head.append(this.#defaultStyle);
        }
		return this.#defaultStyle;
	}

    static get defaultStyle(){
        return this.#defaultStyle;
    }

    static set defaultStyle(style){
        this.#defaultStyle.textContent = style;
    }

	static set insertDefaultStyle(style){
		this.#defaultStyle.sheet.insertRule(style);
	}
    

    #file;

    videoLoadEndCallback = (event) => {};

    video = Object.assign(document.createElement('video'), {
        loop: true,
        controls: true
    });

	constructor(dataset){
		super(Video, dataset, {deleteOption : _module_FreedomInterface__WEBPACK_IMPORTED_MODULE_0__["default"].DeleteOption.EMPTY_CONTENT_IS_NOT_DELETE});

		if( ! dataset && Object.entries(this.dataset).length == 0){
            this.#file = Video.selectedFile.cloneNode(true);
            Video.selectedFile.files = new DataTransfer().files;
            
            this.dataset.url = URL.createObjectURL(this.#file.files[0]);
            this.dataset.name = this.#file.files[0].name;
            this.dataset.lastModified = this.#file.files[0].lastModified;
            this.dataset.size = this.#file.files[0].size;
            this.dataset.content_type = this.#file.files[0].type;

            let url = URL.createObjectURL(this.#file.files[0], this.dataset.content_type);
            this.dataset.url = url;
            this.video.type = this.dataset.content_type;
            this.video.src = this.dataset.url;
            /*fetch(this.dataset.url).then(res=>res.blob()).then(blob => {
                const reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = () => {
                    this.dataset.base64 = reader.result;
                }
            })*/
            
        }else if(( ! this.dataset.url || this.dataset.url.startsWith('blob:file')) && this.dataset.base64){
            fetch(this.dataset.base64)
            .then(async res=>{
                return res.blob().then(blob=>{
                    let videoUrl = URL.createObjectURL(blob, res.headers.get('Content-Type'))
                    this.dataset.url = videoUrl;
                    this.video.src = this.dataset.url;
                })
            })
        }else if(Video.customVideoCallback && typeof Video.customVideoCallback == 'function'){
            Video.customVideoCallback(this);
        }else if(this.dataset.url){
            this.video.src = this.dataset.url;
        }

        if(! this.dataset.name){
            this.remove();
            throw new Error(`this file is undefined ${this.dataset.name}`);
        }

        this.attachShadow({ mode : 'open' });
        this.shadowRoot.append(Video.defaultStyle.cloneNode(true));

        this.createDefaultContent().then(({wrap, description, slot, aticle})=>{
            this.connectedChildAfterCallback = (addedList) => {
                aticle.append(...addedList);
            }
        });

        this.disconnectedAfterCallback = () => {
            if(this.dataset.url.startsWith('blob:file')){
                setTimeout(() => {
                    URL.revokeObjectURL(this.dataset.url);
                }, 1000 * 60 * 2)
            }
        }
	}

    createDefaultContent(){
        return new Promise(resolve=>{
            let wrap = Object.assign(document.createElement('div'),{

            });
            wrap.draggable = false

            this.shadowRoot.append(wrap);

            let videoContanier = Object.assign(document.createElement('div'),{
                className: `${Video.defaultStyle.id} video-contanier`
            });

            this.video.dataset.video_name = this.dataset.name

            videoContanier.append(this.video);
            this.video.onload = () => {
                if(
                    (this.file.length != 0 && video.canPlayType(this.file.files[0].type) == '') ||
                    (
                        this.dataset.name && 
                        this.video.canPlayType(
                            `video/${this.dataset.name.substring(this.dataset.name.lastIndexOf('.') + 1)}`
                        ) == ''
                    )
                ){
                    this.videoIsNotWorking();
                }
            }
            this.video.onloadeddata = () => {
                //videoContanier.style.height = window.getComputedStyle(video).height;
                /*let applyToolAfterSelection = window.getSelection(), range = applyToolAfterSelection.getRangeAt(0);
                let scrollTarget;
                if(range.endContainer.nodeType == Node.TEXT_NODE){
                    scrollTarget = range.endContainer.parentElement
                }else{
                    scrollTarget = range.endContainer;
                }
                scrollTarget.scrollIntoView({ behavior: "instant", block: "end", inline: "nearest" });
                */
                this.video.play();
            }
            this.video.onerror = () => {
                //videoContanier.style.height = window.getComputedStyle(video).height;
            }

            let {description, slot, aticle} = this.createDescription(this.video, videoContanier);

            this.connectedAfterOnlyOneCallback = () => {
                if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
                    aticle.append(...[...this.childNodes].filter(e=>e!=aticle));
                }
                wrap.replaceChildren(...[description,videoContanier].filter(e=>e != undefined));
                
                Video.videoBox.addVideoHoverEvent(this.video, this);
                if(this.nextSibling?.tagName == 'BR'){
                    this.nextSibling.remove()
                }

                resolve({wrap, description, slot, aticle})
            }
        })
    }

    /**
     * 
     * @param {HTMLVideoElement} image 
     * @param {HTMLDivElement} imageContanier 
     * @returns {HTMLDivElement}
     */
    createDescription(video, videoContanier){
        let description = Object.assign(document.createElement('div'), {
            className : `${Video.defaultStyle.id} video-description`
        });

        description.dataset.file_name = this.dataset.name
        description.dataset.open_status = this.dataset.open_status || '▼'
        videoContanier.style.height = this.dataset.height || 'auto'

        let {slot, aticle} = this.createSlot()
        
        if(slot){
            description.append(slot);
        }

        description.onclick = (event) => {

            if(description.dataset.open_status == '▼'){
                description.dataset.open_status = '▶'
                videoContanier.style.height = window.getComputedStyle(video).height;
                setTimeout(()=>{
                    videoContanier.style.height = '0px';
                    this.dataset.height = '0px';
                },100)

            }else{
                description.dataset.open_status = '▼';
                setTimeout(()=>{
                    videoContanier.style.height = window.getComputedStyle(video).height;
                    this.dataset.height = 'auto';
                },100)
                
                video.style.opacity = '';
                video.style.visibility = '';
            }

            this.dataset.open_status = description.dataset.open_status;
        }

        videoContanier.ontransitionend = () => {
            if(description.dataset.open_status == '▼'){
                videoContanier.style.height = 'auto';
            }else{
                video.style.opacity = 0;
                video.style.visibility = 'hidden';
            }
        }

        return {description, slot, aticle};
    }

    createSlot(){
        let aticle = document.createElement('div');
        
        aticle.contentEditable = 'false';
        aticle.draggable = 'false';

        //if(this.childNodes.length != 0 && this.childNodes[0]?.tagName != 'BR'){
            let randomId = Array.from(
                window.crypto.getRandomValues(new Uint32Array(16)),
                (e)=>e.toString(32).padStart(2, '0')
            ).join('');
            //aticle.append(...[...this.childNodes].map(e=>e.cloneNode(true)));
            aticle.append(...this.childNodes);
            aticle.slot = Video.descriptionName + '-' + randomId;
            this.append(aticle);
            
            let slot = Object.assign(document.createElement('slot'),{
                name: Video.descriptionName + '-' + randomId
            });

            return {slot, aticle};
        //}else{
        //    return undefined;
        //}
    }

    videoIsNotWorking(){
        alert(`${this.dataset.name}은 호환되지 않는 영상입니다.`);
        this.remove();
    }

    /**
     * @returns {HTMLInputElement}
     */
    get selectedFile(){
        return this.#file
    }
}


/***/ }),

/***/ "./view/js/handler/notice_board/NoticeBoardHandler.js":
/*!************************************************************!*\
  !*** ./view/js/handler/notice_board/NoticeBoardHandler.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class NoticeBoardHandler{
    #noticeBoardId
    #noticeBoard = [];
    #addNoticeBoardIdChangeListener = {};
    #noticeBoardChangeDone;
    #noticeBoardChangeAwait;
    constructor(){

    }

    set addNoticeBoardIdChangeListener({name, callBack, runTheFirst}){
        this.#addNoticeBoardIdChangeListener[name] = callBack;
        if(runTheFirst && this.#noticeBoardId){
            callBack(this);
        }
    }

    get addNoticeBoardIdChangeListener(){
        return this.#addNoticeBoardIdChangeListener;
    }

    set noticeBoardId(noticeBoardId){
        if( ! noticeBoardId){
            console.error('noticeBoardId is undefined');
            return;
        }
        this.#noticeBoard = [];
        this.#noticeBoardId = noticeBoardId;
        let startCallbackPromise = Promise.all(
            Object.values(this.#addNoticeBoardIdChangeListener).map(async callBack => {
                return new Promise(res => {
                    callBack(this);
                    res();
                })
            })
        )
        if( ! this.#noticeBoardChangeAwait){
            this.#noticeBoardChangeAwait = new Promise(resolve=>{
                this.#noticeBoardChangeDone = resolve;
                this.#noticeBoardChangeDone(startCallbackPromise);
            })
        }else{
            this.#noticeBoardChangeAwait.then(() => {
                startCallbackPromise.then(() => {
                    this.#noticeBoardChangeAwait = new Promise(resolve => {
                        this.#noticeBoardChangeDone = resolve;
                    })
                })
            })
        }
    }

    get noticeBoardId(){
        return this.#noticeBoardId;
    }

    get noticeBoard(){
        return this.#noticeBoard;
    }

    removeNoticeBoardIdChangeListener(name){
        delete this.#addNoticeBoardIdChangeListener(name);
    }

});

/***/ }),

/***/ "./view/js/handler/room/RoomHandler.js":
/*!*********************************************!*\
  !*** ./view/js/handler/room/RoomHandler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class RoomHandler{
    #roomId
    #room;
    #addRoomIdChangeListener = {};

    #roomChangeDone;
    #roomChangeAwait = new Promise(resolve=>{
        this.#roomChangeDone = resolve;
    });

    constructor(){

        window.myAPI.event.electronEventTrigger.addElectronEventListener('roomChange', event => {
            this.roomId = event.roomId
        })

    }

    set addRoomIdChangeListener({name, callBack, runTheFirst}){
        this.#addRoomIdChangeListener[name] = callBack;
        if(runTheFirst && this.#roomId){
            callBack(this);
        }
    }

    get addRoomIdChangeListener(){
        return this.#addRoomIdChangeListener;
    }

    set roomId(roomId){
        if( ! roomId){
            throw new Error('roomId is undefined')
        }
        this.#roomId = roomId;
        window.myAPI.room.getRoomDetail({roomId}).then(result => {
            this.#room = result.data;
            window.myAPI.setOption({
                name: 'lastRoomInfo', value : JSON.stringify(this.#room)
            })
            let startCallbackPromise = Promise.all(
                Object.values(this.#addRoomIdChangeListener).map(async callBack => {
                    return new Promise(res => {
                        callBack(this);
                        res();
                    })
                })
            )
            startCallbackPromise.then(()=>{
                this.#roomChangeDone();
            })
            this.#roomChangeAwait.then(()=>{
                this.#roomChangeAwait = new Promise(resolve=>{
                    this.#roomChangeDone = resolve;
                })
            })
            //window.myAPI.setTitle({title:this.#room.roomName})
            
        });
    }

    get roomId(){
        return Number(this.#roomId);
    }

    get room(){
        return this.#room;
    }
    removeRoomIdChangeListener(name){
        delete this.#addRoomIdChangeListener(name);
    }
    get roomChangeAwait(){
        return this.#roomChangeAwait;
    }
});

/***/ }),

/***/ "./view/js/handler/workspace/WorkspaceHandler.js":
/*!*******************************************************!*\
  !*** ./view/js/handler/workspace/WorkspaceHandler.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new class WorkspaceHandler{
    #workspace;
    #workspaceId;
    #addWorkspaceIdChangedListener = {};
    #workspaceChangeDone;
    #workspaceChangeAwait;
    constructor(){
        //window.addEventListener("DOMContentLoaded", (event) => {
            window.myAPI.getWorkspaceId().then(workspaceId=>{
                this.workspaceId = workspaceId;
            })
            window.myAPI.event.electronEventTrigger.addElectronEventListener('workspaceChange', event => {
                this.workspaceId = event.workspaceId;
            })
        //});
    }

    set addWorkspaceIdChangedListener({name, callBack, runTheFirst}){
        this.#addWorkspaceIdChangedListener[name] = callBack;
        if(runTheFirst && this.workspaceId){
            callBack(this);
        }
    }
    get addWorkspaceIdChangedListener(){
        return this.#addWorkspaceIdChangedListener;
    }

    set workspaceId(workspaceId){
        if(!workspaceId)return;
        this.#workspaceId = workspaceId;
        window.myAPI.workspace.getWorkspaceDetail({workspaceId}).then((workspace) => {
            this.#workspace = workspace;
            let startCallbackPromise = Promise.all(Object.values(this.#addWorkspaceIdChangedListener).map(async callBack => {
                return new Promise(res => {
                    callBack(this);
                    res();
                });
            }));
            if( ! this.#workspaceChangeAwait){
                this.#workspaceChangeAwait = new Promise(resolve=>{
                    this.#workspaceChangeDone = resolve;
                    this.#workspaceChangeDone(startCallbackPromise);
                })
            }else{
                this.#workspaceChangeAwait.then(() => {
                    startCallbackPromise.then(() => {
                        this.#workspaceChangeAwait = new Promise(resolve => {
                            this.#workspaceChangeDone = resolve;
                        })
                    })
                })
            }
        });
    }
    get workspaceId(){
        return Number(this.#workspaceId);
    }
    get workspace(){
        return this.#workspace;
    }
    removeWorkspaceIdChangedListener(name){
        delete this.#addWorkspaceIdChangedListener(name);
    }
});

/***/ }),

/***/ "./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http.js */ "./node_modules/axios/lib/helpers/null.js");
/* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const knownAdapters = {
  http: _http_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_1__["default"]
}

_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getAdapter: (adapters) => {
    adapters = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});


/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js");
/* harmony import */ var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../helpers/cookies.js */ "./node_modules/axios/lib/helpers/cookies.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../helpers/isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
/* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js");
















function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = (0,_helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers).normalize();
    let {responseType, withXSRFToken} = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFormData(requestData)) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserEnv || _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = (0,_core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__["default"])(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Request aborted', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__["default"];
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"](
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if(_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserEnv) {
      withXSRFToken && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));

      if (withXSRFToken || (withXSRFToken !== false && (0,_helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__["default"])(fullPath))) {
        // Add xsrf header
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__["default"].read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__["default"](null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = (0,_helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__["default"])(fullPath);

    if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].protocols.indexOf(protocol) === -1) {
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Unsupported protocol ' + protocol + ':', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");
/* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js");
/* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");
/* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js");




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"](defaultConfig);
  const instance = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.request, context);

  // Copy axios.prototype to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype, context, {allOwnKeys: true});

  // Copy context to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance((0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

// Expose Axios class to allow class inheritance
axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];

// Expose Cancel & CancelToken
axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__["default"];
axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__["default"];
axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"];
axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_8__.VERSION;
axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__["default"];

// Expose AxiosError class
axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__["default"];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__["default"];

// Expose isAxiosError
axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__["default"];

// Expose mergeConfig
axios.mergeConfig = _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

axios.AxiosHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__["default"];

axios.formToJSON = thing => (0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__["default"].getAdapter;

axios.HttpStatusCode = _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];

axios.default = axios;

// this module should only have a default export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axios);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CancelToken);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? 'canceled' : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
  __CANCEL__: true
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanceledError);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isCancel)
/* harmony export */ });


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js");
/* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js");
/* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");











const validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
      response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].merge(
      headers.common,
      headers[config.method]
    );

    headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);
    const fullPath = (0,_buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__["default"])(config.baseURL, config.url);
    return (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axios);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosError);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders((0,_helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterceptorManager);


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildFullPath)
/* harmony export */ });
/* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js");





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !(0,_helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL)) {
    return (0,_helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
  }
  return requestedURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dispatchRequest)
/* harmony export */ });
/* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers);

  // Transform request data
  config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__["default"].getAdapter(config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
      config,
      config.transformResponse,
      response
    );

    response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!(0,_cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__["default"])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeConfig)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");





const headersToObject = (thing) => thing instanceof _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? thing.toJSON() : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge.call({caseless}, target, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge({}, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ settle)
/* harmony export */ });
/* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
      'Request failed with status code ' + response.status,
      [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ transformData)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  const context = response || config;
  const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(context.headers);
  let data = context.data;

  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_1__["default"],

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);

    if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);

    if (isFormData) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify((0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data)) : data;
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)
    ) {
      return data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0,_helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data, this.formSerializer).toString();
      }

      if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return (0,_helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.FormData,
    Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "1.6.2";

/***/ }),

/***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosURLSearchParams);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HttpStatusCode);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bind)
/* harmony export */ });


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildURL)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ?
      params.toString() :
      new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ combineURLs)
/* harmony export */ });


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(path) && cookie.push('path=' + path);

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });



/***/ }),

/***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;

    if (isLast) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
    const obj = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formDataToJSON);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAbsoluteURL)
/* harmony export */ });


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAxiosError)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && (payload.isAxiosError === true);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());


/***/ }),

/***/ "./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line strict
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseProtocol)
/* harmony export */ });


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (speedometer);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ spread)
/* harmony export */ });


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js");




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
}

const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSpecCompliantForm(formData);

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('Blob is not supported. Use a Buffer instead.');
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value)) ||
        ((_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]')) && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each(el, key) {
      const result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(
        formData, el, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFormData);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toURLEncodedForm)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");






function toURLEncodedForm(data, options) {
  return (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('options must be an object', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('option ' + opt + ' must be ' + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Unknown option ' + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  assertOptions,
  validators
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Blob !== 'undefined' ? Blob : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof FormData !== 'undefined' ? FormData : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js");
/* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js");
/* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isBrowser: true,
  classes: {
    URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"]
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasBrowserEnv: () => (/* binding */ hasBrowserEnv),
/* harmony export */   hasStandardBrowserEnv: () => (/* binding */ hasStandardBrowserEnv),
/* harmony export */   hasStandardBrowserWebWorkerEnv: () => (/* binding */ hasStandardBrowserWebWorkerEnv)
/* harmony export */ });
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();




/***/ }),

/***/ "./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js");
/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/utils.js */ "./node_modules/axios/lib/platform/common/utils.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ..._common_utils_js__WEBPACK_IMPORTED_MODULE_0__,
  ..._node_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
});


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");




// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************************************************!*\
  !*** ./view/js/renderer/multipleChattingViewRenderer.js ***!
  \**********************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _browser_preload_preload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../browser/preload/preload */ "./browser/preload/preload.js");
/* harmony import */ var _component_chatting_ChattingContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @component/chatting/ChattingContainer */ "./view/js/component/chatting/ChattingContainer.js");
/* harmony import */ var _component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @component/notice_board/NoticeBoardContainer */ "./view/js/component/notice_board/NoticeBoardContainer.js");
/* harmony import */ var _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @handler/room/RoomHandler */ "./view/js/handler/room/RoomHandler.js");
/* harmony import */ var _handler_chatting_ChattingHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @handler/chatting/ChattingHandler */ "./view/js/handler/chatting/ChattingHandler.js");
/* harmony import */ var _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @handler/workspace/WorkspaceHandler */ "./view/js/handler/workspace/WorkspaceHandler.js");
/* harmony import */ var _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @handler/editor/tools/Image */ "./view/js/handler/editor/tools/Image.js");
/* harmony import */ var _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @handler/editor/tools/Video */ "./view/js/handler/editor/tools/Video.js");
/* harmony import */ var _handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @handler/editor/tools/Resources */ "./view/js/handler/editor/tools/Resources.js");
/* harmony import */ var _handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @handler/account/AccountHandler */ "./view/js/handler/account/AccountHandler.js");
/* harmony import */ var _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @handler/S3EncryptionUtil */ "./view/js/handler/S3EncryptionUtil.js");
/* harmony import */ var _handler_IndexedDBHandler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @handler/IndexedDBHandler */ "./view/js/handler/IndexedDBHandler.js");
/* harmony import */ var _component_option_SimpleOption__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @component/option/SimpleOption */ "./view/js/component/option/SimpleOption.js");
/* harmony import */ var _root_js_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @root/js/common */ "./view/js/common.js");
/**
 * web용
 */

window.myAPI = _browser_preload_preload__WEBPACK_IMPORTED_MODULE_0__.myAPI;




















window.addEventListener('load', async () => {
	const indexedDBHandler = new _handler_IndexedDBHandler__WEBPACK_IMPORTED_MODULE_11__["default"]({
		dbName: 'fileDB-main-page',
		storeName: `s3Memory-main-page`,
		columnInfo: {
			fileName: ['fileName', 'fileName', {unique : true}],
			originFileName: ['originFileName', 'originFileName'],
			fileData : ['fileData', 'fileData'],
			lastModified: ['lastModified', 'lastModified'],
			uploadType: ['uploadType', 'uploadType'],
			roomId: ['roomId', 'roomId'],
			workspaceId: ['workspaceId', 'workspaceId']
		},
		keyPathNameList: ['fileName'],
		pkAutoIncrement : false
	});
	const dbOpenPromise = indexedDBHandler.open();

	const imageOrVideoCallback = async (targetTools) => {
		if(targetTools.hasAttribute('data-is_loading')){
			let uploadLoading = targetTools.querySelector('[data-upload_loading]');
			if( ! uploadLoading){
				uploadLoading = Object.assign(document.createElement('div'), {
					className: 'upload_loading',
					innerHTML: `
					<div class="upload_loading_container">
						<span>컨텐츠를 업로드 중입니다</span>
						<span class="status_text_elipsis" data-status_text_elipsis></span>
					</div>
					`
				})
				uploadLoading.dataset.upload_loading = '';
			}else{
				uploadLoading.className = 'upload_loading'
				uploadLoading.querySelector('[data-status_text_elipsis]').className = 'upload_loading'; 
			}
			targetTools.append(uploadLoading);
			return;
		}


		let fileType;
		if(targetTools.constructor == _handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_6__["default"]){
			fileType = 'IMAGE';
		}else if(targetTools.constructor == _handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_7__["default"]){
			fileType = 'VIDEO';
		}else{
			fileType = 'FILE';
		}
		const isHasRememberFile = await new Promise(resolve => {
			/*if(targetTools.constructor == Resources){
				resolve({result: undefined});
			}*/
			dbOpenPromise.then(() => {
				new Promise(res=>{
					indexedDBHandler.getList({
						pageNum : 1, 
						pageSize : 99999, 
						readOption: 'readwrite', 
						callBack: (cursor)=>{
							if(cursor.value.lastModified < new Date().getTime() - oneDay){
								cursor.delete();
							}
						}
					}).then(result=>{
						res();
						/*let deleteTargetList = result.data.filter(e=>{
							let lastModified = parseInt(e.lastModified);
							return lastModified - oneDay <= new Date().getTime() - oneDay;
						}).map(e=>e.fileName);
						indexedDBHandler.deleteList(deleteTargetList).then((deleteResult) => {
							res();
						});*/
					}).catch((err)=>{
						console.error(err)
						res();
					})	
				}).then(() => {
					indexedDBHandler.getItem(targetTools.dataset.new_file_name).then(result=>{
						resolve(result);
					});
				})
			})
		})

		if(isHasRememberFile.result){
			let url = URL.createObjectURL(isHasRememberFile.result.fileData, targetTools.dataset.content_type)
			targetTools.dataset.url = url;
			if(targetTools.image){
				targetTools.image.src = url;
			}else if(targetTools.video){
				targetTools.video.src = url;
			}else{
				targetTools.resources.data = url;
			}
			return;
		}

		let startPromise = new Promise(resolve => {

			let {size, rank, rankText} = _root_js_common__WEBPACK_IMPORTED_MODULE_13__["default"].shortenBytes(targetTools.dataset.size);

			if(size >= 10 && rank >= 2){
				let filePreview = targetTools.querySelector('[data-file_preview]');
				if( ! filePreview){
					filePreview = Object.assign(document.createElement('div'), {
						className: 'file_preview',
						innerHTML: `
						<div class="file_preview_container" data-file_preview_container>
							<div>10MB 이상의 파일은 당신의 데이터를 위해 미리보기를 제공하지 않습니다.</div>
							<div>미리보기를 클릭시 기능 제공을 위해 임시 저장소에 저장을 시작하며, 이는 추후 자동 삭제의 대상이 됩니다.</div>
							<div>이 파일의 용량 : ${size}${rankText}</div>
							<button class="file_preview_button" data-file_preview_button type="button">미리보기</button>
						</div>
						`
					});
					filePreview.dataset.file_preview = '';
				}else{
					filePreview.querySelector('[data-file_preview_container]').className = 'file_preview_container'
					filePreview.querySelector('[data-file_preview_button]').className = 'file_preview_button'; 
					filePreview.className = 'file_preview';
				}

				filePreview.onclick = (event) => {
					event.stopPropagation();
				}
				filePreview.dataset.visibility_not = '';

				targetTools.append(filePreview)

				let filePreviewButton = filePreview.querySelector('.file_preview_button');
				//document.body.onclick = (event) =>{ event}
				filePreviewButton.onclick = (event) => {

					event.stopPropagation();
					filePreviewButton.textContent = '';
					filePreviewButton.className = 'loading_rotate';
					resolve(filePreview);
				}
			}else{
				resolve();
			}
		});

		startPromise.then((filePreview) => {

			let getSignData = `${_handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].roomId}:${_handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_5__["default"].workspaceId}:${targetTools.dataset.new_file_name}:${_handler_account_AccountHandler__WEBPACK_IMPORTED_MODULE_9__.accountHandler.accountInfo.accountName}`
			_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.callS3PresignedUrl(window.myAPI.s3.generateGetObjectPresignedUrl, getSignData, {uploadType : targetTools.dataset.upload_type, fileType})
			.then( (result) => {
				if(! result){
					return;
				}
				let {data, encDncKeyPair} = result;
				let totalLen = 0;
				let size = parseInt(targetTools.dataset.size);
				let progress = Object.assign(document.createElement('progress'), {
					max: 100,
					value : 0
				});
				if(filePreview){
					let container = filePreview.querySelector('.file_preview_container');
					container.append(progress)
				}
				return Promise.all([
					_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionKey).then( async (buffer) => {
						return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.secretAlgorithm)
							.then(buf=>String.fromCharCode(...new Uint8Array(buf)))
					}),
					_handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.convertBase64ToBuffer(data.encryptionMd).then( async (buffer) => {
						return _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.decryptMessage(encDncKeyPair.privateKey, buffer, _handler_S3EncryptionUtil__WEBPACK_IMPORTED_MODULE_10__.s3EncryptionUtil.secretAlgorithm)
							.then(buf=>String.fromCharCode(...new Uint8Array(buf)))
					})
				]).then( async ([k,m]) => {
					return fetch(data.presignedUrl, {
						method:"GET",
						headers: {
							'Content-Encoding' : 'base64',
							'Content-Type' : 'application/octet-stream',
							'x-amz-server-side-encryption-customer-algorithm': 'AES256',
							'x-amz-server-side-encryption-customer-key': k,
							'x-amz-server-side-encryption-customer-key-md5': m,
						}
					}).then(async response=> {
						if(response.status != 200 && response.status != 201){
							throw new Error('s3 connect failed')
						}
						return response.body;
					}).then((body) => {
						const reader = body.getReader();
						return new ReadableStream(
							{
								start(controller) {
									return pump();
									function pump() {
										return reader.read().then(({ done, value }) => {
											totalLen += value?.length || 0;
											progress.value = (totalLen / size) * 100 
											// When no more data needs to be consumed, close the stream
											if (done) {
												controller.close();
												return;
											}
											// Enqueue the next data chunk into our target stream
											controller.enqueue(value);
											return pump();
										});
									}
								},
							}
						);
						/*
						let newBlob = new Blob([buffer], { type: imageEditor.dataset.content_type });
						let imgUrl = URL.createObjectURL(newBlob);
						*/
					})
					.then(stream => new Response(stream))
					.then(res => res.blob())
					.then(async blob => {
						console.log(totalLen);
						let newBlob = new Blob([blob], { type: targetTools.dataset.content_type });
						return dbOpenPromise.then( async () => {
							return indexedDBHandler.addItem({
								fileName: targetTools.dataset.new_file_name,
								originFileName: targetTools.dataset.name,
								fileData: newBlob,
								lastModified: new Date().getTime(),
								uploadType: targetTools.dataset.upload_type,
								roomId: _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].roomId,
								workspaceId: _handler_workspace_WorkspaceHandler__WEBPACK_IMPORTED_MODULE_5__["default"].workspaceId
							}).then(()=>{
								return URL.createObjectURL(newBlob)
							})
						})
					})
					.then(url => {
						//targetTools.dataset.url = url;
						if(targetTools.image){
							targetTools.image.src = url;
						}else if(targetTools.video){
							targetTools.video.src = url;
						}else{
							targetTools.resources.data = url;
						}

						if(filePreview){
							filePreview.replaceChildren();
							filePreview.parentElement.removeChild(filePreview);
							filePreview.remove();
						}
					})
					.catch(err=>{
						console.error(err);
						console.error(err.message)
					})
				
				})
			})

		})
		
	}

	_handler_editor_tools_Image__WEBPACK_IMPORTED_MODULE_6__["default"].customImageCallback = (imageEditor) => imageOrVideoCallback(imageEditor)
	_handler_editor_tools_Video__WEBPACK_IMPORTED_MODULE_7__["default"].customVideoCallback = (videoEditor) => imageOrVideoCallback(videoEditor)
	_handler_editor_tools_Resources__WEBPACK_IMPORTED_MODULE_8__["default"].customResourcesCallback = (resourcesEditor) => imageOrVideoCallback(resourcesEditor)
});	

const visibleObserver = new IntersectionObserver((entries, observer) => {
	entries.forEach(entry =>{
		let {isIntersecting, target} = entry;
		if(target.hasAttribute('data-visibility_not')){
			return;
		}
		if (isIntersecting){
			target.style.visibility = '';
			target.style.opacity = '';
			target.dataset.visibility = 'v';
		}else{
			target.style.visibility = 'hidden';
			target.style.opacity = 0;
			target.dataset.visibility = 'h';
		}
	})
}, {
	threshold: 0.01,
	root: document
});
new MutationObserver( (mutationList, observer) => {
	mutationList.forEach((mutation) => {
		let {addedNodes, removedNodes} = mutation;
		new Promise(resolve=> {
			addedNodes.forEach(async e => {
				if(e.nodeType !== Node.ELEMENT_NODE || (e.nodeType === Node.ELEMENT_NODE && e.hasAttribute('data-is_not_visible_target'))){
					return;
				}
				new Promise(res=>{
					visibleObserver.observe(e);
					res();
				})
			})
			resolve();
		})
		new Promise(resolve=> {
			removedNodes.forEach(async e => {
				if(e.nodeType !== Node.ELEMENT_NODE || (e.nodeType === Node.ELEMENT_NODE && e.hasAttribute('data-is_not_visible_target'))){
					return;
				}
				new Promise(res=>{
					visibleObserver.unobserve(e);
					res();
				})
			})
			resolve();
		})
	})
}).observe(document, {
	childList: true,
	subtree: true
})

window.addEventListener("DOMContentLoaded", (event) => {
	let workspaceIdResolve;
	let workspaceIdPromise = new Promise(resolve=>{
		workspaceIdResolve = resolve;
	})
	window.myAPI.getWorkspaceId().then(workspaceId=>{
		if(workspaceId != undefined){
			workspaceIdResolve(workspaceId);
		}
		window.myAPI.event.electronEventTrigger.addElectronEventListener('workspaceChange', event => {
			let newWorkspaceId = event.workspaceId
			if(workspaceId == newWorkspaceId){
				return;
			}
			if(newWorkspaceId != undefined){
				workspaceIdResolve(newWorkspaceId)
			}
			//event.workspaceId
		})
	})
	workspaceIdPromise.then(workspaceId => {
		document.querySelector('#main').append(
			_component_notice_board_NoticeBoardContainer__WEBPACK_IMPORTED_MODULE_2__["default"].wrap,
			_component_chatting_ChattingContainer__WEBPACK_IMPORTED_MODULE_1__["default"].wrap
		)

        window.myAPI.event.electronEventTrigger.addElectronEventListener('roomChange', event => {
            _handler_room_RoomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].roomId = event.roomId;
        })

		window.myAPI.stream.initWorkspaceStream({workspaceId});
	})
});

})();

/******/ })()
;
//# sourceMappingURL=multipleChattingViewRenderer.js.map